<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>zookeeper分布式锁</title>
    <link href="/2022/05/16/%E6%BA%90%E7%A0%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2022/05/16/%E6%BA%90%E7%A0%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<blockquote><p>zookepper使用curator框架实现分布式锁</p></blockquote><h1 id="一、可重入锁"><a href="#一、可重入锁" class="headerlink" title="一、可重入锁"></a>一、可重入锁</h1><h1 id="二、-Semphore"><a href="#二、-Semphore" class="headerlink" title="二、 Semphore"></a>二、 Semphore</h1><h2 id="三、非可重入锁"><a href="#三、非可重入锁" class="headerlink" title="三、非可重入锁"></a>三、非可重入锁</h2><h2 id="四、可重入读写锁"><a href="#四、可重入读写锁" class="headerlink" title="四、可重入读写锁"></a>四、可重入读写锁</h2><h2 id="五、MultiLock"><a href="#五、MultiLock" class="headerlink" title="五、MultiLock"></a>五、MultiLock</h2>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis分布式锁</title>
    <link href="/2022/05/16/%E6%BA%90%E7%A0%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2022/05/16/%E6%BA%90%E7%A0%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<blockquote><p>redis基于redisson实现的锁机制</p></blockquote><h1 id="一、可重入锁"><a href="#一、可重入锁" class="headerlink" title="一、可重入锁"></a>一、可重入锁</h1><h2 id="1-加锁"><a href="#1-加锁" class="headerlink" title="1. 加锁"></a>1. 加锁</h2><h2 id="2-watchdog维持加锁"><a href="#2-watchdog维持加锁" class="headerlink" title="2. watchdog维持加锁"></a>2. watchdog维持加锁</h2><h2 id="3-可重入加锁"><a href="#3-可重入加锁" class="headerlink" title="3. 可重入加锁"></a>3. 可重入加锁</h2><h2 id="4-锁的互斥阻塞"><a href="#4-锁的互斥阻塞" class="headerlink" title="4. 锁的互斥阻塞"></a>4. 锁的互斥阻塞</h2><h2 id="5-锁释放"><a href="#5-锁释放" class="headerlink" title="5. 锁释放"></a>5. 锁释放</h2><h2 id="6-锁超时与自动释放"><a href="#6-锁超时与自动释放" class="headerlink" title="6. 锁超时与自动释放"></a>6. 锁超时与自动释放</h2><h2 id="7-可重入锁总结"><a href="#7-可重入锁总结" class="headerlink" title="7. 可重入锁总结"></a>7. 可重入锁总结</h2><h1 id="二、公平锁"><a href="#二、公平锁" class="headerlink" title="二、公平锁"></a>二、公平锁</h1><h2 id="1-排队加锁"><a href="#1-排队加锁" class="headerlink" title="1. 排队加锁"></a>1. 排队加锁</h2><h2 id="2-可重入加锁"><a href="#2-可重入加锁" class="headerlink" title="2. 可重入加锁"></a>2. 可重入加锁</h2><h2 id="3-排队分数刷新"><a href="#3-排队分数刷新" class="headerlink" title="3. 排队分数刷新"></a>3. 排队分数刷新</h2><h2 id="4-队列重排"><a href="#4-队列重排" class="headerlink" title="4. 队列重排"></a>4. 队列重排</h2><h2 id="5-释放锁"><a href="#5-释放锁" class="headerlink" title="5. 释放锁"></a>5. 释放锁</h2><h2 id="6-按顺序依次加锁"><a href="#6-按顺序依次加锁" class="headerlink" title="6. 按顺序依次加锁"></a>6. 按顺序依次加锁</h2><h1 id="三、MultiLock"><a href="#三、MultiLock" class="headerlink" title="三、MultiLock"></a>三、MultiLock</h1><h1 id="四、RedLock"><a href="#四、RedLock" class="headerlink" title="四、RedLock"></a>四、RedLock</h1><h1 id="五、读写锁"><a href="#五、读写锁" class="headerlink" title="五、读写锁"></a>五、读写锁</h1><h2 id="1-加读锁"><a href="#1-加读锁" class="headerlink" title="1. 加读锁"></a>1. 加读锁</h2><h2 id="2-加写锁"><a href="#2-加写锁" class="headerlink" title="2. 加写锁"></a>2. 加写锁</h2><h2 id="3-读锁与读锁非互斥"><a href="#3-读锁与读锁非互斥" class="headerlink" title="3. 读锁与读锁非互斥"></a>3. 读锁与读锁非互斥</h2><h2 id="4-读锁与写锁互斥"><a href="#4-读锁与写锁互斥" class="headerlink" title="4. 读锁与写锁互斥"></a>4. 读锁与写锁互斥</h2><h2 id="5-写锁与写锁互斥"><a href="#5-写锁与写锁互斥" class="headerlink" title="5. 写锁与写锁互斥"></a>5. 写锁与写锁互斥</h2><h1 id="六、Semaphore"><a href="#六、Semaphore" class="headerlink" title="六、Semaphore"></a>六、Semaphore</h1><h1 id="七、CountDownLatch"><a href="#七、CountDownLatch" class="headerlink" title="七、CountDownLatch"></a>七、CountDownLatch</h1>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式锁概述</title>
    <link href="/2022/05/16/%E6%BA%90%E7%A0%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/05/16/%E6%BA%90%E7%A0%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<p>常见的分布式锁的实现分为两种</p><ul><li>redis实现</li><li>Zookeeper实现</li></ul><h3 id="redis分布式锁"><a href="#redis分布式锁" class="headerlink" title="redis分布式锁"></a>redis分布式锁</h3><ul><li>redis单实例</li></ul><p>不靠谱，redis存在单点故障，会导致系统崩溃，做不到高可用。</p><ul><li>redis主从架构+哨兵模式</li></ul><p>保证高可用，并且master宕机之后，slave可以接替。但是存在隐患：master宕机的时候，还没有异步复制锁到slave，导致重复加锁问题。</p><ul><li>redis多master集群</li></ul><p>redis官方存在redlock算法，但是实现过程太复杂繁琐，多master集群环境很多问题可能导致重复加锁。</p><p>redis实现分布式锁有一个优点，redisson，开源的redis客户端类库，封装了大量基于redis的复杂的一些操作，数据集合的分布式存储以及多种复杂的分布式锁，分布式执行操作以及对象。</p><h3 id="Zookeeper分布式锁"><a href="#Zookeeper分布式锁" class="headerlink" title="Zookeeper分布式锁"></a>Zookeeper分布式锁</h3><p>优点：<br>锁模型健壮、稳定、可用性高<br>缺点：<br><del>没有很好的开源的分布式锁的类库来支持多种锁模型。常见方案就是手动封装一个基于顺序节点的普通悲观锁。</del>(curor开源框架好用)</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式事务方案</title>
    <link href="/2022/05/15/%E6%BA%90%E7%A0%81/%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%96%B9%E6%A1%88/"/>
    <url>/2022/05/15/%E6%BA%90%E7%A0%81/%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="一、分布式事务方案"><a href="#一、分布式事务方案" class="headerlink" title="一、分布式事务方案"></a>一、分布式事务方案</h1><h2 id="1-二阶段提交方案-x2F-XA方案"><a href="#1-二阶段提交方案-x2F-XA方案" class="headerlink" title="1. 二阶段提交方案&#x2F;XA方案"></a>1. 二阶段提交方案&#x2F;XA方案</h2><p>【事务】单系统多数据源事务概述</p><h2 id="2-TCC方案"><a href="#2-TCC方案" class="headerlink" title="2. TCC方案"></a>2. TCC方案</h2><p>TCC全称为Try、Confirm、Cancel</p><ol><li>Try阶段：对各个服务的资源做检测以及对资源进行锁定或者预留</li><li>Confirm阶段：在各个服务中执行实际的操作</li><li>Cancel阶段：如果任何一个服务的业务方法执行出错，那么这里就需要进行补偿，就是执行已经成功的业务逻辑的回滚操作</li></ol><p>适合场景：<br>强一致性场景，比如金钱相关。由于和业务耦合太强，不通用，比较少使用。<br>适合于多个服务的操作比较快，TCC相当于是一堆同步服务调用的操作，包裹在一个事务里面。</p><h2 id="3-本地消息表"><a href="#3-本地消息表" class="headerlink" title="3. 本地消息表"></a>3. 本地消息表</h2><ol><li>A系统在自己本地一个事务里面操作的同时，插入一条数据到消息表</li><li>A系统间这个消息发送到MQ中</li><li>B系统接收到消息之后，在一个事务里面，先往自己本地消息表插入一条数据，同时执行其他业务操作。如果这个消息已经被处理过了，那么此时事务会回滚，不会执行其他重复消息</li><li>B系统执行成功之后，会更新自己本地的消息表的状态以及A系统消息表的状态</li><li>如果B系统处理失败了，那么就不会更新消息表状态，那么测试A系统会定时扫描自己的消息表。如果有没有处理的消息，就会再次发送到MQ中，让B再次处理</li><li>这个方案保证了最终一致性，哪怕B事务失败了，但是A还是会不断重发消息，直到B那边成功为止</li></ol><p>缺点：<br>太过于依赖数据库的消息表进行管理事务。但是高并发场景以及扩展性很差</p><h2 id="4-可靠消息最终一致性方案"><a href="#4-可靠消息最终一致性方案" class="headerlink" title="4. 可靠消息最终一致性方案"></a>4. 可靠消息最终一致性方案</h2><ol><li>A系统先发送一个preprod消息到mq，如果这个preprod消息发送失败，那么直接取消操作别执行了。</li><li>如果这个消息发送成功，那么就继续执行本地事务，如果成功就告诉mq发送确认消息，如果失败就告诉mq回滚消息</li><li>如果发送了确认消息，那么此时B系统就会接收到确认消息，然后执行本地事务。</li><li>mq会自动定时轮训所有的preprod消息回调A接口，确认消息是不是本地事务处理失败了还是没有发送确认消息，后续操作时进行重试还是回滚。一般此时A系统会查看数据库之前本地事务是否执行，如果回滚了，那么这里也会回滚吗，这个就避免可能本地事务执行成功了，但是确认消息发送失败了。</li><li>B系统如果事务失败了，就会进行重试，自动不断重试直到成功。如果实在不行，就针对重要的资金类业务进行回滚。比如B系统本地回滚之后，会通知系统A也进行回滚，或者发送报警，由人工回滚和补偿</li></ol><p>适合于比较耗时的操作，通过消息中间件做成异步调用。发送一个消息，由消费端进行业务消费。</p><h2 id="5-最大努力通知方案"><a href="#5-最大努力通知方案" class="headerlink" title="5. 最大努力通知方案"></a>5. 最大努力通知方案</h2><ol><li>系统A本地执行事务完之后，会发送消息到MQ</li><li>这里会有专门消费MQ的最大努力通知服务，这个服务会消费MQ然后写入数据库中记录下来或者放在内存队列中，接着调用系统B的接口</li><li>要是系统B执行成功了就OK，要是系统B执行失败了，那么最大努力通知服务就定时尝试重新调用系统B，重试N次，最后不行就放弃。</li></ol><p>与可靠消息最终一致性方案类似，但是一致性方案必须保证消息执行成功，而最大努力通知方案则不然。<br>比较适合不太核心的服务调用操作，比如说消息服务等</p><h2 id="6-saga事务"><a href="#6-saga事务" class="headerlink" title="6. saga事务"></a>6. saga事务</h2><p>地位类似于TCC，saga事务本质也是用于解决微服务里面，复杂的服务调用链条</p><h1 id="二、TCC方案"><a href="#二、TCC方案" class="headerlink" title="二、TCC方案"></a>二、TCC方案</h1><h2 id="1-TCC方案及其变种"><a href="#1-TCC方案及其变种" class="headerlink" title="1.TCC方案及其变种"></a>1.TCC方案及其变种</h2><h3 id="1-1-通用性TCC技术方案"><a href="#1-1-通用性TCC技术方案" class="headerlink" title="1.1  通用性TCC技术方案"></a>1.1  通用性TCC技术方案</h3><p>存在对象</p><ol><li>主业务服务：相当于流量充值中心的服务。就是TCC事务的主控服务，主要控制的服务，负责整个分布式事务的编排和管理，执行，回滚</li><li>从业务服务：相当于资金服务、订单服务、积分服务等。主要提供了三个接口，try-confirm-cancel。try是锁定资源，confirm是业务逻辑，cancel是回滚逻辑。</li><li>业务活动管理器：管理具体的分布式事务的状态，分布式事务中，各个服务对应的子事务的状态，包括执行各个从业务服务的confirm和calcel接口的执行和调用</li></ol><p>阶段描述案例</p><ol><li>try阶段：先冻结用户的账户资金，将一部分资金转出到冻结资金字段里面，可以创建一个充值订单，但是状态是交易中</li><li>confirm阶段：将用户的冻结资金减掉，转移到商户的账号里面。同时将充值订单的状态修改为交易成功，完成抽奖机会、积分、卡券的新增</li><li>cancel阶段：try阶段任何一个服务存在问题的话，就cancel掉。相当于将冻结的资金还回去，将订单状态修改为交易失败。confirm阶段任何一个服务有问题的话，也cancel掉，相当于将商户账户里面的资金还到账户里面，同时将订单的状态修改为交易失败。</li></ol><p>执行流程</p><ol><li>主业务服务先再本地开启一个事务</li><li>主业务服务向业务活动管理器申请启动一个分布式事务活动，主业务服务向业务活动管理器注册各个从业务活动</li><li>接着主业务服务负责调用各个从业务服务的try接口</li><li>如果所有从业务服务的try接口都调用成功的话，那么主业务服务就提交本地事务，然后通知业务活动管理器调用各个从业务服务的confirm接口</li><li>如果有某个服务的try接口调用失败，那么主业务服务回滚本地事务，然后通知业务活动管理器调用各个业务服务的cancel接口</li><li>如果主业务触发了confirm操作，但是如果confirm过程中有失败，那么也会让活动管理器通知各个从业务服务cancel</li><li>最后分布式事务结束</li></ol><h3 id="1-2-异步确保型TCC技术方案"><a href="#1-2-异步确保型TCC技术方案" class="headerlink" title="1.2  异步确保型TCC技术方案"></a>1.2  异步确保型TCC技术方案</h3><p>背景：<br>如果要接入到一个TCC分布式事务中，那么从业务服务必须改造自己的接口，本来是一个接口的，现在需要新增两个接口(try和cancel),改造起来比较麻烦。</p><p>方案：<br>按通用型TCC方案改造一下，在主业务服务和从业务服务中间加了一个可靠性消息服务(可靠性消息通过自身本地数据库实现)。主业务服务的try、confirm和cancel操作都调用可靠性消息服务，然后可靠性消息服务在try阶段插入一条消息在自己本地数据库。接着主业务服务之星confirm操作，可靠消息服务就根据之前的消息，调用从业务服务实际的业务接口。要是和这个调用失败的话，那么主业务服务发起cancel，将可靠消息服务本地的消息删除即可。</p><p>使用这个方案，就不需要将从业务服务那边拆分三个接口。</p><h3 id="1-3-补偿性TCC解决方案"><a href="#1-3-补偿性TCC解决方案" class="headerlink" title="1.3  补偿性TCC解决方案"></a>1.3  补偿性TCC解决方案</h3><p>方案：<br>与通用型TCC方案类似，只是将从业务服务的三个接口，调整为Do和Compensate。如果业务逻辑执行失败，就进行补偿。</p><h2 id="2-TCC技术方案落地"><a href="#2-TCC技术方案落地" class="headerlink" title="2. TCC技术方案落地"></a>2. TCC技术方案落地</h2><h3 id="2-1-接口拆分问题"><a href="#2-1-接口拆分问题" class="headerlink" title="2.1  接口拆分问题"></a>2.1  接口拆分问题</h3><p>从业务服务的每个接口都要拆分为三个接口，try、confirm、cancel接口。</p><h3 id="2-2-接口特殊情况"><a href="#2-2-接口特殊情况" class="headerlink" title="2.2  接口特殊情况"></a>2.2  接口特殊情况</h3><ul><li>空回滚：try阶段，比如网络问题，没有调通try接口就回滚直接调用cancel接口的情况</li><li>try回滚和confirm回滚：不同阶段的回滚操作不同</li><li>倒置请求：try请求调用的时候，网络超时，直接调用了cancel请求。但是过了一会try请求又来了，此时需要不允许执行<h3 id="2-3-接口幂等性保证"><a href="#2-3-接口幂等性保证" class="headerlink" title="2.3  接口幂等性保证"></a>2.3  接口幂等性保证</h3>try、confirm、cancel接口可能会被多次调用，因此接口需要保证幂等性。</li></ul><h2 id="3-TCC框架技术选型"><a href="#3-TCC框架技术选型" class="headerlink" title="3. TCC框架技术选型"></a>3. TCC框架技术选型</h2><ul><li>tcc-transaction</li><li>himly</li><li>ByteTCC<h2 id="4-ByteTCC"><a href="#4-ByteTCC" class="headerlink" title="4. ByteTCC"></a>4. ByteTCC</h2><a href="https://github.com/liuyangming/ByteTCC">ByteTC</a></li></ul><h1 id="三、saga方案"><a href="#三、saga方案" class="headerlink" title="三、saga方案"></a>三、saga方案</h1><h2 id="1-saga概述"><a href="#1-saga概述" class="headerlink" title="1. saga概述"></a>1. saga概述</h2><p>saga将每个接口拆分为2个接口，一个是业务接口，一个是补偿接口，相当于将TCC里面的try和confirm合并为一个接口，即先执行业务接口，直接就尝试完成整个业务逻辑的操作。如果在服务调用链条里面，某个服务的业务接口执行失败了，那么直接对已经执行成功的所有服务都调用其补偿接口，将之前执行成功的业务逻辑回滚。</p><p>saga两种思想：编排模式和命令模式</p><ul><li>编排模式</li></ul><p>事件驱动类型的模式，每个服务执行成功了，就发布一个事件，下一个服务会监听到这个事件，然后继续执行。<br>整个事件流程会需要基于框架定义流程，看哪个服务依赖下一个服务。</p><ul><li>优点</li></ul><p>去中心化</p><ul><li>缺点</li></ul><p>太麻烦，如果有连续十几个服务的调用，导致服务对消息的监听非常复杂，并且不好调试和定位问题</p><ul><li>命令模式</li></ul><p>相比于编排模式，就是引入了一个saga流程管理器，对开启事务的流程依次调用执行，如果某个服务调用失败了，就将之前调用成功的接口服务依次执行补偿接口。</p><h1 id="四、可靠消息最终一致性方案"><a href="#四、可靠消息最终一致性方案" class="headerlink" title="四、可靠消息最终一致性方案"></a>四、可靠消息最终一致性方案</h1><h2 id="1-可靠消息最终一致性方案分析"><a href="#1-可靠消息最终一致性方案分析" class="headerlink" title="1. 可靠消息最终一致性方案分析"></a>1. 可靠消息最终一致性方案分析</h2><h3 id="1-1-涉及组件"><a href="#1-1-涉及组件" class="headerlink" title="1.1 涉及组件"></a>1.1 涉及组件</h3><ul><li>上游服务</li></ul><p>发送MQ消息通知下游服务执行某个操作</p><ul><li>可靠消息服务</li></ul><p>协调上下游服务的消息传递，确保数据一致性。</p><ul><li>MQ消息中间件</li></ul><p>需要有ack确认机制，一般是RocketMQ或者RabbitMQ</p><ul><li>下游服务</li></ul><p>要被调用的服务</p><h3 id="1-2-执行流程"><a href="#1-2-执行流程" class="headerlink" title="1.2 执行流程"></a>1.2 执行流程</h3><ol><li><p>上游服务发送一个待确认消息给可靠消息服务</p></li><li><p>可靠消息服务将这个待确认的消息保存到自己本地数据库里面，保存起来，但是不发送MQ。此时的消息状态是待确认</p></li><li><p>上游服务操作本地数据库</p></li><li><p>上游服务根据自己操作本地数据库的结果，来通知可靠消息服务</p><ol><li>执行成功可以通知可靠消息服务确认发送消息</li><li>执行失败就通知可靠消息服务删除消息</li></ol></li><li><p>可靠消息服务将整个消息修改为已发送,并且将消息发送到MQ中间件里面</p><ol><li>如果发送MQ失败，那么可靠消息服务更新本地数据库的消息状态为已发送的操作也必须回滚</li><li>反之如果数据库的消息更新为已发送了，就需要保证MQ成功投递消息</li></ol></li><li><p>下游服务从MQ中监听到消息，进行消费</p></li><li><p>下游服务根据消息，在自己本地操作数据库</p></li><li><p>下游服务完成本地数据库操作之后，对MQ进行ack操作，确认消息处理成功</p></li><li><p>下游服务对MQ进行ack之后，再给可靠消息服务发送个请求，让可靠消息服务将消息状态更新为已完成</p><h3 id="1-3-失败情况分析"><a href="#1-3-失败情况分析" class="headerlink" title="1.3 失败情况分析"></a>1.3 失败情况分析</h3></li><li><p>上游服务发送待确认消息给可靠消息服务</p></li></ol><p>如果此环节失败了，即上游服务没有发送待确认消息给可靠消息服务，那么重新开始，数据不存在不一致</p><ol start="2"><li>可靠消息服务保存消息，状态为待确认</li></ol><p>此时可靠消息服务操作数据库异常，会返回给上游消息服务一个失败的消息，上游服务就不会往下执行</p><ol start="3"><li>上游服务操作本地数据库</li></ol><p>上游操作本地数据库失败了，会进行回滚，同时也不会继续发送确认消息</p><ol start="4"><li>上游服务通知可靠消息服务，可以确认发送消息</li></ol><p>此时会产生数据不一致。上游服务已经执行好了，应该告诉可靠消息执行或者删除，但是此时可靠消息服务接收不到消息。可靠消息服务的数据库中间会留着一条待确认消息。</p><ol start="5"><li>可靠消息服务将整个消息修改为已发送，并且将消息发送到MQ中间件里面</li></ol><p>此步骤也会产生数据不一致。</p><ol><li><p>如果上游服务操作本地数据库失败了，会通知可靠消息去删除消息。此时可靠消息服务删除操作失败了，会有一个待确认消息始终留在可靠消息服务的数据库中</p></li><li><p>如果上游服务操作数据库成功了，通知可靠消息服务去确认和投递消息。但是确认消息+投递消息一起失败了，消息还是待确认状态，没有投递到mq中也不对。</p></li><li><p>下游服务从MQ监听到消息</p></li></ol><p>下游消息消费失败没有ack确认，MQ自身会进行重试</p><ol start="7"><li>下游服务在本地数据库操作</li></ol><p>失败了同上</p><ol start="8"><li>下游服务完成本地数据库操作之后，对MQ进行ack操作</li></ol><p>可以考虑将下游服务的本地数据库操作和MQ的ack操作包裹在一个事务里，这样的话呢，如果MQ ack操作报错了，本地事务直接回滚</p><ol start="9"><li>下游服务对MQ进行ack之后，再给可靠消息服务发送个请求，让可靠消息服务将消息状态更新为已完成</li></ol><p>此时存在一条消息一直是已发送状态。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="1-4-可靠消息服务机制完善"><a href="#1-4-可靠消息服务机制完善" class="headerlink" title="1.4 可靠消息服务机制完善"></a>1.4 可靠消息服务机制完善</h3><ol><li><p>上游服务执行状况回调确认及消息重投机制</p><ol><li>可靠消息服务开一个后台线程，扫描数据库中处于待确认状态的消息，同时消息的创建时间超过超时阈值</li><li>对超时的消息，需要回调上游服务特意提供的查询操作状态的接口，然后上游服务自己判断这个操作是否执行</li><li>如果操作没有执行，那么证明是步骤3上游服务本地数据库操作异常导致，此时可靠消息服务删除此消息即可</li><li>如果操作已经执行，那么是步骤4或者步骤5异常，此时消息服务就可以再次尝试用一个事务更新本地消息为已发送，同时尝试再次发送消息给MQ</li></ol></li><li><p>下游服务回调机制</p><ol><li>开启一个后台线程，监控已发送的消息，如果打到阈值，就判定超时</li><li>此时也需要可靠消息服务再次重新投递消息给MQ</li><li>下游服务的接口要保证幂等性</li></ol></li></ol><h3 id="1-5-RocketMQ自身的实现"><a href="#1-5-RocketMQ自身的实现" class="headerlink" title="1.5 RocketMQ自身的实现"></a>1.5 RocketMQ自身的实现</h3><p>RocketMQ自身实现了一个类似最终消息一致性的方案。</p><ol><li>上游服务发送prepare消息，可以认为是一个待确认消息到RocketMQ</li><li>RocketMQ会在内部保存这个消息，然后返回一个状态给上游服务</li><li>上游服务执行本地事务</li><li>如果失败了就会发送rollback给RocketMQ，RocketMQ会删除那条消息，如果成功了就发送commit给RocketMQ</li><li>RocketMQ会根据状态来处理消息，如果是rollback就删除消息，如果是commit就将消息标识为可以被下游服务消费</li><li>下游服务消费消息</li><li>下游服务执行本地事务</li><li>下游服务然后返回ack给RocketMQ，如果消费失败，或者本地事务执行失败，或者ack发送失败，RocketMQ都有自己的重试策略，重新发送消息</li><li>RocketMQ如果能成功收到ack消息，就会将消息删除。</li></ol><h1 id="五、最大努力通知方案"><a href="#五、最大努力通知方案" class="headerlink" title="五、最大努力通知方案"></a>五、最大努力通知方案</h1>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单系统多数据源事务</title>
    <link href="/2022/05/15/%E6%BA%90%E7%A0%81/%E4%BA%8B%E5%8A%A1/%E5%8D%95%E7%B3%BB%E7%BB%9F%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E4%BA%8B%E5%8A%A1/"/>
    <url>/2022/05/15/%E6%BA%90%E7%A0%81/%E4%BA%8B%E5%8A%A1/%E5%8D%95%E7%B3%BB%E7%BB%9F%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="一-XA规范"><a href="#一-XA规范" class="headerlink" title="一. XA规范"></a>一. XA规范</h1><p>X&#x2F;Open定义了的组织定义了分布式事务的模型，其中包含以下角色</p><ul><li>AP(Application )应用程序</li><li>TM(Transaction Manager)事务管理器</li><li>RM(Resource Manager)资源管理器</li><li>CRM(Communication Resource Manager)通信资源管理器</li></ul><p>通俗的将上述角色对应现在系统<br>AP -&gt; 系统<br>TM -&gt; 一个专门管理横跨多个数据库的事务组件<br>RM -&gt; 数据库<br>CRM -&gt; 消息中间件(可以不用)</p><p>XA接口规范仅仅是规范了TM和RM之间的通信交互规则，具体实现由数据库厂商实现。MySQL就会提供XA规范的接口函数和类库实现。</p><h1 id="二-2PC理论"><a href="#二-2PC理论" class="headerlink" title="二. 2PC理论"></a>二. 2PC理论</h1><p>2PC(Two-Phase-Commitment-Protocol 二阶段提交协议)就是基于XA规范，让分布式事务可以落地，定义了分布式事务过程中的细节。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>准备阶段</li></ol><p>TM先发送prepare消息给各个数据库，让各个库先把分布式事务里要执行的各种操作，先准备执行。此时各个库会差不多先执行好，就是不提交。</p><ol start="2"><li>提交阶段</li></ol><p>各个数据库如果都告诉TM成功了，TM就会发消息给各个数据库说提交，然后各个数据库都在自己本地提交事务。整个分布式事务就成功了。<br>但是如果有一个告诉TM失败了，或者超时。TM就会判定整个分布式事务失败了，通知各个数据库回滚事务。各个数据库都回滚好了之后就通知TM，此时TM就认为整个分布式事务就回滚了。</p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><ol><li>同步阻塞</li></ol><p>在阶段一里面执行prepare操作会占用资源，一直到整个分布式事务完成，才会释放资源，在整个过程中，如果有其他人要访问这个资源，就会被阻塞。<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/12966419/1637769107411-613b2994-6372-488d-bd30-1d2b0bceea5a.jpeg"></p><ol start="2"><li>单点故障</li></ol><p>TM是单点的，一旦挂了，事务就丢失了。</p><ol start="3"><li>事务状态丢失</li></ol><p>即使把TM做成一个双机热备的，一个TM挂了自动选举其他的TM出来，但是如果TM挂掉的同时，接收到commit消息的某个库也挂了，此时即使重新选举了其他的TM，压根不知道这个分布式事务当前的状态，因为不知道哪个库接受过commit消息。</p><ol start="4"><li>脑裂问题</li></ol><p>在二阶段中，如果发生了脑裂问题，那么就会导致某些数据库没有接收到comit消息。有些库收到了commit消息，结果有的库没有收到。</p><h1 id="三-3PC理论"><a href="#三-3PC理论" class="headerlink" title="三. 3PC理论"></a>三. 3PC理论</h1><p>three-phase-commitment 三阶段提交协议</p><ol><li>CanCommit阶段</li></ol><p>TM发送一个CanCommit消息给各个数据库，然后各个库返回个结果。此阶段不会执行SQL语句，就是各个库看自己的网络环境及各方面是否准备好。</p><ol start="2"><li>PreCommit阶段</li></ol><p>如果各个库对CanCommit消息返回的都是成功，那么进入PreCommit阶段。TM发送PreCommit消息给各个库，此时就相当于2PC中的阶段一。就会执行各个SQL语句，但是不会提交。如果有个库对CanCommit消息返回了失败，那么TM就发送abort消息给各个库，结束分布式事务。</p><ol start="3"><li>DoCommit阶段</li></ol><p>如果各个库对PreCommit阶段都返回了成功，那么发送DoCommit消息给各个库，让各个库提交事务。如果各个库提交事务成功，那么分布式事务成功。如果有个库对PreComit返回失败或者超时一直没有返回，那么TM认为分布式事务失败，直接发abort消息给各个库回滚。各个库回滚成功之后通知TM，分布式事务回滚</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ol><li>引入了CanCommit阶段</li><li>在DoCommit阶段，各个库有了超时机制。如果一个库收到了PreCommit自己还返回成功了，但是等了一会，如果超时时间到了，还没有接收到TM发送的DoCommit消息或者是abort消息，就判定TM可能故障，数据库自己就执行DoCommit操作提交事务。</li></ol><p>一个库如果接收到PreCommit消息，那么CanCommit阶段肯定已经过了，说明各个库的基本环境都ok。<br>那么在任何一个库的PreCommit成功之后，超时没有收到TM发的DoCommit消息，默认两个事情</p><ol><li>各个库的环境没有问题</li><li>TM挂了</li></ol><p>因此会直接自己本地执行commit操作</p><h2 id="缺陷-1"><a href="#缺陷-1" class="headerlink" title="缺陷"></a>缺陷</h2><p>由于DoCommit阶段的超时机制，可能TM发送了abort消息，但是因为脑裂问题，各个库没有收到abort消息，就自己执行commit操作了。</p><h1 id="四、JTA与全局事务"><a href="#四、JTA与全局事务" class="headerlink" title="四、JTA与全局事务"></a>四、JTA与全局事务</h1><p>全局事务主要是针对X&#x2F;OPEN组织定义了一套分布式事务的模型和规范 DTP(Distributerd Transaction Processing Reference Model 分布式事务处理模型)，包含DTP,TM,RM,AP等角色的一套分布式事务模型。</p><p>XA实际上就是一种借口规范，就是TM在和数据库RM进行通讯的时候的接口规范。</p><p>全局事务，Global Transaction，是DTP模型中的一个概念，全局事务，指的其实就是说跨多个数据库的这么一个分布式事务</p><p>JTA事务，站在另外一个角度，其实是J2EE中的一个概念，Java Transaction API，JTA一套分布式事务的编程API。按照XA、DTP那套模型和规范，在J2EE中，单库的事务是通过JDBC事务来支持的</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring tx事务</title>
    <link href="/2022/05/15/%E6%BA%90%E7%A0%81/%E4%BA%8B%E5%8A%A1/Spring-tx%E4%BA%8B%E5%8A%A1/"/>
    <url>/2022/05/15/%E6%BA%90%E7%A0%81/%E4%BA%8B%E5%8A%A1/Spring-tx%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>Spring事务相关包在<code>spring-tx</code>包下面，具体实现在org.springframework.transaction.interceptor.TransactionAspectSupport#invokeWithinTransaction。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">invokeWithinTransaction</span><span class="hljs-params">(Method method, Class&lt;?&gt; targetClass, <span class="hljs-keyword">final</span> InvocationCallback invocation)</span><br><span class="hljs-keyword">throws</span> Throwable &#123;<br><br><span class="hljs-comment">// If the transaction attribute is null, the method is non-transactional.</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">TransactionAttribute</span> <span class="hljs-variable">txAttr</span> <span class="hljs-operator">=</span> getTransactionAttributeSource().getTransactionAttribute(method, targetClass);<br><span class="hljs-keyword">final</span> <span class="hljs-type">PlatformTransactionManager</span> <span class="hljs-variable">tm</span> <span class="hljs-operator">=</span> determineTransactionManager(txAttr);<br><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">joinpointIdentification</span> <span class="hljs-operator">=</span> methodIdentification(method, targetClass, txAttr);<br><br><span class="hljs-keyword">if</span> (txAttr == <span class="hljs-literal">null</span> || !(tm <span class="hljs-keyword">instanceof</span> CallbackPreferringPlatformTransactionManager)) &#123;<br><span class="hljs-comment">// Standard transaction demarcation with getTransaction and commit/rollback calls.</span><br><span class="hljs-type">TransactionInfo</span> <span class="hljs-variable">txInfo</span> <span class="hljs-operator">=</span> createTransactionIfNecessary(tm, txAttr, joinpointIdentification);<br><span class="hljs-type">Object</span> <span class="hljs-variable">retVal</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// This is an around advice: Invoke the next interceptor in the chain.</span><br><span class="hljs-comment">// This will normally result in a target object being invoked.</span><br>retVal = invocation.proceedWithInvocation();<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br><span class="hljs-comment">// target invocation exception</span><br>completeTransactionAfterThrowing(txInfo, ex);<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>cleanupTransactionInfo(txInfo);<br>&#125;<br>commitTransactionAfterReturning(txInfo);<br><span class="hljs-keyword">return</span> retVal;<br>&#125;<br><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">ThrowableHolder</span> <span class="hljs-variable">throwableHolder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThrowableHolder</span>();<br><br><span class="hljs-comment">// It&#x27;s a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in.</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionCallback</span>&lt;Object&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doInTransaction</span><span class="hljs-params">(TransactionStatus status)</span> &#123;<br><span class="hljs-type">TransactionInfo</span> <span class="hljs-variable">txInfo</span> <span class="hljs-operator">=</span> prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> invocation.proceedWithInvocation();<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br><span class="hljs-keyword">if</span> (txAttr.rollbackOn(ex)) &#123;<br><span class="hljs-comment">// A RuntimeException: will lead to a rollback.</span><br><span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> RuntimeException) &#123;<br><span class="hljs-keyword">throw</span> (RuntimeException) ex;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThrowableHolderException</span>(ex);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// A normal return value: will lead to a commit.</span><br>throwableHolder.throwable = ex;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>cleanupTransactionInfo(txInfo);<br>&#125;<br>&#125;<br>&#125;);<br><br><span class="hljs-comment">// Check result state: It might indicate a Throwable to rethrow.</span><br><span class="hljs-keyword">if</span> (throwableHolder.throwable != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> throwableHolder.throwable;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">catch</span> (ThrowableHolderException ex) &#123;<br><span class="hljs-keyword">throw</span> ex.getCause();<br>&#125;<br><span class="hljs-keyword">catch</span> (TransactionSystemException ex2) &#123;<br><span class="hljs-keyword">if</span> (throwableHolder.throwable != <span class="hljs-literal">null</span>) &#123;<br>logger.error(<span class="hljs-string">&quot;Application exception overridden by commit exception&quot;</span>, throwableHolder.throwable);<br>ex2.initApplicationException(throwableHolder.throwable);<br>&#125;<br><span class="hljs-keyword">throw</span> ex2;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex2) &#123;<br><span class="hljs-keyword">if</span> (throwableHolder.throwable != <span class="hljs-literal">null</span>) &#123;<br>logger.error(<span class="hljs-string">&quot;Application exception overridden by commit exception&quot;</span>, throwableHolder.throwable);<br>&#125;<br><span class="hljs-keyword">throw</span> ex2;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h2><p>createTransactionIfNecessary此处在开启事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> TransactionInfo <span class="hljs-title function_">createTransactionIfNecessary</span><span class="hljs-params">(</span><br><span class="hljs-params">PlatformTransactionManager tm, TransactionAttribute txAttr, <span class="hljs-keyword">final</span> String joinpointIdentification)</span> &#123;<br><br><span class="hljs-comment">// If no name specified, apply method identification as transaction name.</span><br><span class="hljs-keyword">if</span> (txAttr != <span class="hljs-literal">null</span> &amp;&amp; txAttr.getName() == <span class="hljs-literal">null</span>) &#123;<br>txAttr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelegatingTransactionAttribute</span>(txAttr) &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> joinpointIdentification;<br>&#125;<br>&#125;;<br>&#125;<br><br><span class="hljs-type">TransactionStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (txAttr != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (tm != <span class="hljs-literal">null</span>) &#123;<br>status = tm.getTransaction(txAttr);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Skipping transactional joinpoint [&quot;</span> + joinpointIdentification +<br><span class="hljs-string">&quot;] because no transaction manager has been configured&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>status &#x3D; tm.getTransaction(txAttr);<br>tm就是PlatformTransactionManager，一个事务管理器。此方法就相当于通过事务管理器开启一个事务。</p><p>这边就是用了模板方法，在abstract父类中调用模板方法，各个子类具体实现方法内容。</p><ol><li><p>doGetTransaction</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Return a transaction object for the current transaction state.</span><br><span class="hljs-comment"> * &lt;p&gt;The returned object will usually be specific to the concrete transaction</span><br><span class="hljs-comment"> * manager implementation, carrying corresponding transaction state in a</span><br><span class="hljs-comment"> * modifiable fashion. This object will be passed into the other template</span><br><span class="hljs-comment"> * methods (e.g. doBegin and doCommit), either directly or as part of a</span><br><span class="hljs-comment"> * DefaultTransactionStatus instance.</span><br><span class="hljs-comment"> * &lt;p&gt;The returned object should contain information about any existing</span><br><span class="hljs-comment"> * transaction, that is, a transaction that has already started before the</span><br><span class="hljs-comment"> * current &#123;<span class="hljs-doctag">@code</span> getTransaction&#125; call on the transaction manager.</span><br><span class="hljs-comment"> * Consequently, a &#123;<span class="hljs-doctag">@code</span> doGetTransaction&#125; implementation will usually</span><br><span class="hljs-comment"> * look for an existing transaction and store corresponding state in the</span><br><span class="hljs-comment"> * returned transaction object.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the current transaction object</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> org.springframework.transaction.CannotCreateTransactionException</span><br><span class="hljs-comment"> * if transaction support is not available</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> TransactionException in case of lookup or system errors</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #doBegin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #doCommit</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #doRollback</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> DefaultTransactionStatus#getTransaction</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> Object <span class="hljs-title function_">doGetTransaction</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> TransactionException;<br><br><span class="hljs-comment">//JpaTransactionManager</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doGetTransaction</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">JpaTransactionObject</span> <span class="hljs-variable">txObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JpaTransactionObject</span>();<br>txObject.setSavepointAllowed(isNestedTransactionAllowed());<br><br><span class="hljs-type">EntityManagerHolder</span> <span class="hljs-variable">emHolder</span> <span class="hljs-operator">=</span> (EntityManagerHolder)<br>TransactionSynchronizationManager.getResource(getEntityManagerFactory());<br><span class="hljs-keyword">if</span> (emHolder != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Found thread-bound EntityManager [&quot;</span> + emHolder.getEntityManager() +<br><span class="hljs-string">&quot;] for JPA transaction&quot;</span>);<br>&#125;<br>txObject.setEntityManagerHolder(emHolder, <span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (getDataSource() != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">ConnectionHolder</span> <span class="hljs-variable">conHolder</span> <span class="hljs-operator">=</span> (ConnectionHolder)<br>TransactionSynchronizationManager.getResource(getDataSource());<br>txObject.setConnectionHolder(conHolder);<br>&#125;<br><br><span class="hljs-keyword">return</span> txObject;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>doBegin</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doBegin</span><span class="hljs-params">(Object transaction, TransactionDefinition definition)</span> &#123;<br><span class="hljs-type">JpaTransactionObject</span> <span class="hljs-variable">txObject</span> <span class="hljs-operator">=</span> (JpaTransactionObject) transaction;<br><br><span class="hljs-keyword">if</span> (txObject.hasConnectionHolder() &amp;&amp; !txObject.getConnectionHolder().isSynchronizedWithTransaction()) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalTransactionStateException</span>(<br><span class="hljs-string">&quot;Pre-bound JDBC Connection found! JpaTransactionManager does not support &quot;</span> +<br><span class="hljs-string">&quot;running within DataSourceTransactionManager if told to manage the DataSource itself. &quot;</span> +<br><span class="hljs-string">&quot;It is recommended to use a single JpaTransactionManager for all transactions &quot;</span> +<br><span class="hljs-string">&quot;on a single DataSource, no matter whether JPA or JDBC access.&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (txObject.getEntityManagerHolder() == <span class="hljs-literal">null</span> ||<br>txObject.getEntityManagerHolder().isSynchronizedWithTransaction()) &#123;<br><span class="hljs-type">EntityManager</span> <span class="hljs-variable">newEm</span> <span class="hljs-operator">=</span> createEntityManagerForTransaction();<br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Opened new EntityManager [&quot;</span> + newEm + <span class="hljs-string">&quot;] for JPA transaction&quot;</span>);<br>&#125;<br>txObject.setEntityManagerHolder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EntityManagerHolder</span>(newEm), <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-type">EntityManager</span> <span class="hljs-variable">em</span> <span class="hljs-operator">=</span> txObject.getEntityManagerHolder().getEntityManager();<br><br><span class="hljs-comment">// Delegate to JpaDialect for actual transaction begin.</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">timeoutToUse</span> <span class="hljs-operator">=</span> determineTimeout(definition);<br><span class="hljs-type">Object</span> <span class="hljs-variable">transactionData</span> <span class="hljs-operator">=</span> getJpaDialect().beginTransaction(em,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">DelegatingTransactionDefinition</span>(definition) &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTimeout</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> timeoutToUse;<br>&#125;<br>&#125;);<br>txObject.setTransactionData(transactionData);<br><br><span class="hljs-comment">// Register transaction timeout.</span><br><span class="hljs-keyword">if</span> (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) &#123;<br>txObject.getEntityManagerHolder().setTimeoutInSeconds(timeoutToUse);<br>&#125;<br><br><span class="hljs-comment">// Register the JPA EntityManager&#x27;s JDBC Connection for the DataSource, if set.</span><br><span class="hljs-keyword">if</span> (getDataSource() != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">ConnectionHandle</span> <span class="hljs-variable">conHandle</span> <span class="hljs-operator">=</span> getJpaDialect().getJdbcConnection(em, definition.isReadOnly());<br><span class="hljs-keyword">if</span> (conHandle != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">ConnectionHolder</span> <span class="hljs-variable">conHolder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionHolder</span>(conHandle);<br><span class="hljs-keyword">if</span> (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) &#123;<br>conHolder.setTimeoutInSeconds(timeoutToUse);<br>&#125;<br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Exposing JPA transaction as JDBC transaction [&quot;</span> +<br>conHolder.getConnectionHandle() + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<br>TransactionSynchronizationManager.bindResource(getDataSource(), conHolder);<br>txObject.setConnectionHolder(conHolder);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Not exposing JPA transaction [&quot;</span> + em + <span class="hljs-string">&quot;] as JDBC transaction because &quot;</span> +<br><span class="hljs-string">&quot;JpaDialect [&quot;</span> + getJpaDialect() + <span class="hljs-string">&quot;] does not support JDBC Connection retrieval&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Bind the entity manager holder to the thread.</span><br><span class="hljs-keyword">if</span> (txObject.isNewEntityManagerHolder()) &#123;<br>TransactionSynchronizationManager.bindResource(<br>getEntityManagerFactory(), txObject.getEntityManagerHolder());<br>&#125;<br>txObject.getEntityManagerHolder().setSynchronizedWithTransaction(<span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-keyword">catch</span> (TransactionException ex) &#123;<br>closeEntityManagerAfterFailedBegin(txObject);<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>closeEntityManagerAfterFailedBegin(txObject);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CannotCreateTransactionException</span>(<span class="hljs-string">&quot;Could not open JPA EntityManager for transaction&quot;</span>, ex);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>事务最终打开的代码在底层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//org.springframework.orm.jpa.vendor.HibernateJpaDialect#beginTransaction</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">beginTransaction</span><span class="hljs-params">(EntityManager entityManager, TransactionDefinition definition)</span><br><span class="hljs-keyword">throws</span> PersistenceException, SQLException, TransactionException &#123;<br><br>...<br><span class="hljs-comment">// Standard JPA transaction begin call for full JPA context setup...</span><br>entityManager.getTransaction().begin();<br>...<br>&#125;<br><br><br><span class="hljs-comment">//org.hibernate.jpa.internal.TransactionImpl#begin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-built_in">this</span>.rollbackOnly = <span class="hljs-literal">false</span>;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.tx != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.tx.getStatus() == TransactionStatus.ACTIVE) &#123;<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Transaction already active&quot;</span>);<br>           &#125;<br><br>           <span class="hljs-built_in">this</span>.tx = <span class="hljs-built_in">this</span>.getSession().beginTransaction();<br>       &#125; <span class="hljs-keyword">catch</span> (HibernateException var2) &#123;<br>           <span class="hljs-built_in">this</span>.entityManager.throwPersistenceException(var2);<br>       &#125;<br><br>   &#125;<br><br><span class="hljs-comment">//org.hibernate.internal.SessionImpl#beginTransaction</span><br><span class="hljs-keyword">public</span> Transaction <span class="hljs-title function_">beginTransaction</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> HibernateException &#123;<br>       <span class="hljs-built_in">this</span>.errorIfClosed();<br>       <span class="hljs-type">Transaction</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getTransaction();<br>       <span class="hljs-keyword">if</span> (result.getStatus() != TransactionStatus.ACTIVE) &#123;<br>           <span class="hljs-built_in">this</span>.timestamp = <span class="hljs-built_in">this</span>.factory.getSettings().getRegionFactory().nextTimestamp();<br>       &#125;<br><br>       result.begin();<br>       <span class="hljs-keyword">return</span> result;<br>   &#125;<br><br><span class="hljs-comment">//org.hibernate.engine.transaction.internal.TransactionImpl#begin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">TransactionStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transactionDriverControl.getStatus();<br>       <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.valid) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionException</span>(<span class="hljs-string">&quot;Transaction instance is no longer valid&quot;</span>);<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (status != TransactionStatus.ACTIVE) &#123;<br>           LOG.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>           <span class="hljs-built_in">this</span>.transactionDriverControl.begin();<br>       &#125;<br>   &#125;<br><br><span class="hljs-comment">//org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.TransactionDriverControlImpl#begin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span> &#123;<br>           <span class="hljs-built_in">this</span>.errorIfInvalid();<br>           <span class="hljs-built_in">this</span>.jdbcResourceTransaction.begin();<br>           JdbcResourceLocalTransactionCoordinatorImpl.<span class="hljs-built_in">this</span>.afterBeginCallback();<br>       &#125;<br><br><span class="hljs-comment">//此时已经是jdbc底层逻辑</span><br><br><span class="hljs-comment">//org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl#begin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-built_in">this</span>.initiallyAutoCommit = determineInitialAutoCommitMode(<span class="hljs-built_in">this</span>.getConnectionForTransactionManagement());<br>       <span class="hljs-built_in">super</span>.begin();<br>   &#125;<br><br><span class="hljs-comment">//org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor#begin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           log.trace(<span class="hljs-string">&quot;Preparing to begin transaction via JDBC Connection.setAutoCommit(false)&quot;</span>);<br>           <span class="hljs-built_in">this</span>.getConnectionForTransactionManagement().setAutoCommit(<span class="hljs-literal">false</span>);<br>           <span class="hljs-built_in">this</span>.status = TransactionStatus.ACTIVE;<br>           log.trace(<span class="hljs-string">&quot;Transaction begun via JDBC Connection.setAutoCommit(false)&quot;</span>);<br>       &#125; <span class="hljs-keyword">catch</span> (SQLException var2) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionException</span>(<span class="hljs-string">&quot;JDBC begin transaction failed: &quot;</span>, var2);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="执行目标方法"><a href="#执行目标方法" class="headerlink" title="执行目标方法"></a>执行目标方法</h2><p>回到invokeWithinTransaction中，<code>retVal = invocation.proceedWithInvocation()</code>就是执行目标方法。</p><h2 id="执行完毕提交事务"><a href="#执行完毕提交事务" class="headerlink" title="执行完毕提交事务"></a>执行完毕提交事务</h2><p><code>commitTransactionAfterReturning(txInfo)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commitTransactionAfterReturning</span><span class="hljs-params">(TransactionInfo txInfo)</span> &#123;<br><span class="hljs-keyword">if</span> (txInfo != <span class="hljs-literal">null</span> &amp;&amp; txInfo.hasTransaction()) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Completing transaction for [&quot;</span> + txInfo.getJoinpointIdentification() + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<br>txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="发生异常事务回滚"><a href="#发生异常事务回滚" class="headerlink" title="发生异常事务回滚"></a>发生异常事务回滚</h2><p><code>completeTransactionAfterThrowing(txInfo, ex)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completeTransactionAfterThrowing</span><span class="hljs-params">(TransactionInfo txInfo, Throwable ex)</span> &#123;<br><span class="hljs-keyword">if</span> (txInfo != <span class="hljs-literal">null</span> &amp;&amp; txInfo.hasTransaction()) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Completing transaction for [&quot;</span> + txInfo.getJoinpointIdentification() +<br><span class="hljs-string">&quot;] after exception: &quot;</span> + ex);<br>&#125;<br><span class="hljs-keyword">if</span> (txInfo.transactionAttribute.rollbackOn(ex)) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());<br>&#125;<br><span class="hljs-keyword">catch</span> (TransactionSystemException ex2) &#123;<br>logger.error(<span class="hljs-string">&quot;Application exception overridden by rollback exception&quot;</span>, ex);<br>ex2.initApplicationException(ex);<br><span class="hljs-keyword">throw</span> ex2;<br>&#125;<br><span class="hljs-keyword">catch</span> (RuntimeException ex2) &#123;<br>logger.error(<span class="hljs-string">&quot;Application exception overridden by rollback exception&quot;</span>, ex);<br><span class="hljs-keyword">throw</span> ex2;<br>&#125;<br><span class="hljs-keyword">catch</span> (Error err) &#123;<br>logger.error(<span class="hljs-string">&quot;Application exception overridden by rollback error&quot;</span>, ex);<br><span class="hljs-keyword">throw</span> err;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// We don&#x27;t roll back on this exception.</span><br><span class="hljs-comment">// Will still roll back if TransactionStatus.isRollbackOnly() is true.</span><br><span class="hljs-keyword">try</span> &#123;<br>txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());<br>&#125;<br><span class="hljs-keyword">catch</span> (TransactionSystemException ex2) &#123;<br>logger.error(<span class="hljs-string">&quot;Application exception overridden by commit exception&quot;</span>, ex);<br>ex2.initApplicationException(ex);<br><span class="hljs-keyword">throw</span> ex2;<br>&#125;<br><span class="hljs-keyword">catch</span> (RuntimeException ex2) &#123;<br>logger.error(<span class="hljs-string">&quot;Application exception overridden by commit exception&quot;</span>, ex);<br><span class="hljs-keyword">throw</span> ex2;<br>&#125;<br><span class="hljs-keyword">catch</span> (Error err) &#123;<br>logger.error(<span class="hljs-string">&quot;Application exception overridden by commit error&quot;</span>, ex);<br><span class="hljs-keyword">throw</span> err;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的方法由于接口扩展，都是基于hibernate和JDBC完成事务处理。</p><p>&#x2F;&#x2F;TODO 判断当前method是否开启事务源码可以看一下</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事务概述</title>
    <link href="/2022/05/15/%E6%BA%90%E7%A0%81/%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/05/15/%E6%BA%90%E7%A0%81/%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、事务的ACID"><a href="#一、事务的ACID" class="headerlink" title="一、事务的ACID"></a>一、事务的ACID</h1><h2 id="1-Atomic原子性"><a href="#1-Atomic原子性" class="headerlink" title="1. Atomic原子性"></a>1. Atomic原子性</h2><p>一堆sql要么一起成功，要么全部失败</p><h2 id="2-Consistency一致性"><a href="#2-Consistency一致性" class="headerlink" title="2. Consistency一致性"></a>2. Consistency一致性</h2><p>针对一组SQL执行之前，数据是准确的，执行之后的数据也必须是准确的</p><h2 id="3-Isolation隔离性"><a href="#3-Isolation隔离性" class="headerlink" title="3. Isolation隔离性"></a>3. Isolation隔离性</h2><p>多事务之间是存在事务隔离，互不影响</p><h2 id="4-Durability持久性"><a href="#4-Durability持久性" class="headerlink" title="4.Durability持久性"></a>4.Durability持久性</h2><p>事务成功之后，对数据的修改时永久有效的</p><h1 id="二、事务隔离级别"><a href="#二、事务隔离级别" class="headerlink" title="二、事务隔离级别"></a>二、事务隔离级别</h1><h2 id="1-读未提交-Read-Uncommitted"><a href="#1-读未提交-Read-Uncommitted" class="headerlink" title="1. 读未提交 Read Uncommitted"></a>1. 读未提交 Read Uncommitted</h2><p>某个事务还未提交的时候，修改的数据，就让别的事务读取到了。</p><h2 id="2-读已提交-Read-Committed"><a href="#2-读已提交-Read-Committed" class="headerlink" title="2. 读已提交 Read Committed"></a>2. 读已提交 Read Committed</h2><p>事务A在执行的时候，查询到一个数据是1。过了一段时间，事务B把数据修改为2并且提交。然后事务A再次查询数据变成2.<br>即一个事务内对一个数据的两次读，可能会读到不一样的值。</p><h2 id="3-可重复读-Read-Repeatable"><a href="#3-可重复读-Read-Repeatable" class="headerlink" title="3. 可重复读 Read Repeatable"></a>3. 可重复读 Read Repeatable</h2><p>事务A在执行的过程中，对某个数据的值，无论读多少次，值都是1。就算过程中事务B修改了数据的值，并且提交，但是事务A还是读取到自己事务开始时候的数据的值。</p><h2 id="4-串行化-Serializable"><a href="#4-串行化-Serializable" class="headerlink" title="4. 串行化 Serializable"></a>4. 串行化 Serializable</h2><p>幻读、不可重复读和可重复读都是两个事务同时对某个数据在修改，但是幻读针对的是插入。<br>事务A是将所有行的某个字段修改为2，但是事务B插入了一个事务，那个字段的值为1。<br>如果要解决幻读，就需要使用串行化级别的隔离级别，将所有的事务串行起来，不允许多个事务并行操作。</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>√</td><td>√</td><td>√</td></tr><tr><td>读已提交</td><td>×</td><td>√</td><td>√</td></tr><tr><td>可重复读</td><td>×</td><td>×</td><td>√</td></tr><tr><td>可串行化</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>脏读：某个事务还未提交的时候，修改的数据，就让别的事务读取到了。<br>不可重复读：在一个事务内多次重复读取的数据准确性<br>幻读：事务A 按照一定条件进行数据读取， 期间事务B 插入了相同搜索条件的新数据，事务A再次按照原先条件进行读取时，发现了事务B 新插入的数据</p><blockquote><p>如果事务A 按一定条件搜索， 期间事务B 删除了符合条件的某一条数据，导致事务A 再次读取时数据少了一条。这种情况归为 不可重复读</p></blockquote><h1 id="三、MySQL的MVCC机制"><a href="#三、MySQL的MVCC机制" class="headerlink" title="三、MySQL的MVCC机制"></a>三、MySQL的MVCC机制</h1><p>MVVC:multi-version concurrency control 多版本并发控制</p><p>MySQL默认的隔离级别为Read Reoeatable，即每个事务都会开启一个自己要操作的某个数据的快照，事务期间，读到的都是这个数据快照。对一个数据的多次读也都是一样的。</p><p>innodb存储引擎，在每行数据的最后加两个隐藏列，一个保存行的创建时间，一个保存行的删除时间。但是这存放的不是时间，而是事务id，事务id是mysql自己维护的自增值，全局唯一。</p><blockquote><p>在一个事务内查询的时候，mysql只会查询创建时间的事务id小于等于当前事务id的行，这样可以确保这个行是在当前事务中创建，或者是之前创建的；同时一个行的删除时间的事务id要么没有定义（就是没删除），要么是必当前事务id大（在事务开启之后才被删除）；满足这两个条件的数据都会被查出来。</p><p>那么如果某个事务执行期间，别的事务更新了一条数据呢？这个很关键的一个实现，其实就是在innodb中，是插入了一行记录，然后将新插入的记录的创建时间设置为新的事务的id，同时将这条记录之前的那个版本的删除时间设置为新的事务的id。</p></blockquote><h1 id="四、Spring事务传播机制"><a href="#四、Spring事务传播机制" class="headerlink" title="四、Spring事务传播机制"></a>四、Spring事务传播机制</h1><ol><li><strong>PROPAGATION_REQUIRED</strong></li></ol><p>这个是最常见的，就是说，如果ServiceA.method调用了ServiceB.method，如果ServiceA.method开启了事务，然后ServiceB.method也声明了事务，那么ServiceB.method不会开启独立事务，而是将自己的操作放在ServiceA.method的事务中来执行，ServiceA和ServiceB任何一个报错都会导致整个事务回滚。这就是默认的行为，其实一般我们都是需要这样子的。</p><ol start="2"><li><strong>PROPAGATION_SUPPORTS</strong></li></ol><p>如果ServiceA.method开了事务，那么ServiceB就将自己加入ServiceA中来运行，如果ServiceA.method没有开事务，那么ServiceB自己也不开事务</p><ol start="3"><li><strong>PROPAGATION_MANDATORY</strong></li></ol><p>必须被一个开启了事务的方法来调用自己，否则报错</p><ol start="4"><li><strong>PROPAGATION_REQUIRES_NEW</strong></li></ol><p>ServiceB.method强制性自己开启一个新的事务，然后ServiceA.method的事务会卡住，等ServiceB事务完了自己再继续。这就是影响的回滚了，如果ServiceA报错了，ServiceB是不会受到影响的，ServiceB报错了，ServiceA也可以选择性的回滚或者是提交。</p><ol start="5"><li><strong>PROPAGATION_NOT_SUPPORTED</strong></li></ol><p>就是ServiceB.method不支持事务，ServiceA的事务执行到ServiceB那儿，就挂起来了，ServiceB用非事务方式运行结束，ServiceA事务再继续运行。这个好处就是ServiceB代码报错不会让ServiceA回滚。</p><ol start="6"><li><strong>PROPAGATION_NEVER</strong></li></ol><p>不能被一个事务来调用，ServiceA.method开事务了，但是调用了ServiceB会报错</p><ol start="7"><li><strong>PROPAGATION_NESTED</strong></li></ol><p>开启嵌套事务，ServiceB开启一个子事务，如果回滚的话，那么ServiceB就回滚到开启子事务的这个save point。</p><h1 id="五、CAP理论"><a href="#五、CAP理论" class="headerlink" title="五、CAP理论"></a>五、CAP理论</h1><ul><li>Consistency 一致性<ul><li>强一致性</li></ul></li></ul><p>在一个分布式系统中，一旦做了一个数据的修改，那么这个操作成功的时候，就必须是分布式系统的各个节点都是一样的。</p><ul><li>弱一致性</li></ul><p>在一个分布式系统中，一旦做了一个数据的修改，不确定能不能让各个节点都更新成功</p><ul><li>最终一致性</li></ul><p>更新过后一段时间内，数据不一致，最后经过一段时间成功了</p><ul><li>Availability 可用性</li></ul><p>分布式系统是可用的。就是不存在一会访问成功一会失败的情况。<br>可用性级别划分：</p><ul><li>99% 一年只能有80小时左右是可以允许访问失败的</li><li>99.9% 一年大概有8小时左右可以访问失败</li><li>99.99% 一年中大概存在一小时访问失败</li><li>99.999% 一年中大概存在五分钟访问失败</li><li>99.9999% 一年中大概存在一分钟访问失败</li><li>Partition Tolerence 分区容忍性</li></ul><p>分布式系统如果遇到了网络分区的故障，即各个系统之间无法正常通讯。分布式系统可以容忍网络故障的能力。</p><p><strong>CAP中，只能满足CP或者AP，不可能三者兼得，其中必须满足P。分布式系统中的分区容忍性非常重要，如果一旦出现了一些网络分区的故障，保证整套系统继续运转是非常重要的。</strong></p><ul><li>CP 一致性+分区容忍性</li><li>AP 可用性+分区容忍性</li></ul><p>假如分布式系统出现了网络分区故障，因为保障了P，所以系统正常运转。但是系统之间无法进行通信，也无法进行数据同步。<br>此时客户端进行了一个数据保存，那么此时有两个情况：</p><ol><li>保证CP，就返回特殊的结果(异常)给客户端</li><li>保证AP，就返回不一致的数据</li></ol><p>类似12306，电商系统这些业务系统一般都是AP。就商品库存或者火车票库存是旧的数据，在实际执行的时候再进行数据检查即可。</p><p>典型系统：<br>CP: zookeeper、mongodb、hbase等<br>AP:12306等业务系统</p><h1 id="六、BASE理论"><a href="#六、BASE理论" class="headerlink" title="六、BASE理论"></a>六、BASE理论</h1><p>BASE就是Basicly Abaliable、Soft State、Eventual Consistency，即基本可用、软状态、最终一致性</p><ul><li>基本可用</li></ul><p>可以适当进行降级，在故障的时候，直接引导到降级的一些功能里面</p><ul><li>软状态</li></ul><p>可以存在中间的数据状态，比如多节点在同步数据，在一段时间内，可能每个节点数据不一致，正在同步过程中，这个就是软状态</p><ul><li>最终一致性</li></ul><p>虽然存在软状态，但是最终结果会变为一直的</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CompletableFuture</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/CompletableFuture/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/CompletableFuture/</url>
    
    <content type="html"><![CDATA[<h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>Future接口(FutureTask实现类)定义了操作异步任务执行一些方法，如获取异步任务的执行结果、取消任务的执行、判断任务是否被取消、判断任务是否执行完毕等。<br>Future接口可以为主线程开一个分支任务</p><p>优点</p><ul><li>future+线程池异步多线程任务配合，可以显著提高程序的执行效率</li></ul><p>缺点<br>future对于结果的获取不友好，只能通过阻塞或者轮询的方式得到任务结果</p><ul><li>get()会进行阻塞</li><li>isDone()轮询会导致CPU空转<figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-keyword">final</span> FutureTask&lt;String&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>());<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>    t1.start();<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> futureTask.get();<br>    System.out.println(s);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2>提供一种观察者模式的机制，让任务执行完后可以通知监听的一方<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1655654616406-d2dcf550-d3a2-4f4b-ba4e-c49c8739bae7.png#clientId=u827c53c4-0219-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=275&id=ufd36635f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=275&originWidth=724&originalType=binary&ratio=1&rotation=0&showTitle=false&size=148662&status=done&style=none&taskId=u2ff821d8-346f-492e-a4db-d4b576c9c8e&title=&width=724" alt="image.png"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        CompletableFuture.supplyAsync(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;come in&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ThreadLocalRandom.current().nextInt(<span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;1s后出结果&quot;</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;,pool).whenComplete((v,e)-&gt;&#123;<br>            <span class="hljs-keyword">if</span>(e == <span class="hljs-literal">null</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;计算完成 结果为：&quot;</span>+v);<br>            &#125;<br>        &#125;).exceptionally(e-&gt;&#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;异常情况&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;处理其他事情&quot;</span>);<br><br>        <span class="hljs-comment">//forkjoin是守护线程，需要主线程不能直接结束</span><br>        <span class="hljs-comment">//        TimeUnit.SECONDS.sleep(3);</span><br>    &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        pool.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程池</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="核心变量"><a href="#核心变量" class="headerlink" title="核心变量"></a>核心变量</h2><h3 id="corePoolSize"><a href="#corePoolSize" class="headerlink" title="corePoolSize"></a>corePoolSize</h3><h3 id="maximumPoolSize"><a href="#maximumPoolSize" class="headerlink" title="maximumPoolSize"></a>maximumPoolSize</h3><h3 id="keepAliveTime"><a href="#keepAliveTime" class="headerlink" title="keepAliveTime"></a>keepAliveTime</h3><h3 id="TimeUnit"><a href="#TimeUnit" class="headerlink" title="TimeUnit"></a>TimeUnit</h3><h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><h3 id="ThreadFactory"><a href="#ThreadFactory" class="headerlink" title="ThreadFactory"></a>ThreadFactory</h3><h3 id="RejectedExecutionHandler"><a href="#RejectedExecutionHandler" class="headerlink" title="RejectedExecutionHandler"></a>RejectedExecutionHandler</h3><h3 id="ctl"><a href="#ctl" class="headerlink" title="ctl"></a>ctl</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">ctl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>通过32位的Integer的数字代表了线程池当前的状态以及线程池内部的线程数量。<br>32位的Integer的数字，前3位是线程池的状态，后29位是线程池内的线程数量。<br>通过一个数字以及大量的二进制运算，实现32位数字设置线程池的状态以及线程池的线程数量。</p><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><h3 id="1-线程池里的线程数-lt-核心线程数"><a href="#1-线程池里的线程数-lt-核心线程数" class="headerlink" title="1.线程池里的线程数&lt;核心线程数"></a>1.线程池里的线程数&lt;核心线程数</h3><p>如果当前线程池里的线程数小于核心线程数指定的数量，此时就会创建一个新的线程。最开始线程池的线程数是0，没有线程。</p><h3 id="2-线程池里的线程数-gt-x3D-核心线程数"><a href="#2-线程池里的线程数-gt-x3D-核心线程数" class="headerlink" title="2.线程池里的线程数&gt;&#x3D;核心线程数"></a>2.线程池里的线程数&gt;&#x3D;核心线程数</h3><p>如果线程池里的线程数大于等于核心线程数，把当前的线程给压入等待队列去排队。<br>排队之后做一些处理，如果线程池已经关闭了，此时要从队列里将刚加进去的任务出队。如果线程池是空的，会创建一个线程放进去。</p><h3 id="3-线程池的线程数-gt-x3D-核心线程数，并且入队列失败"><a href="#3-线程池的线程数-gt-x3D-核心线程数，并且入队列失败" class="headerlink" title="3.线程池的线程数&gt;&#x3D;核心线程数，并且入队列失败"></a>3.线程池的线程数&gt;&#x3D;核心线程数，并且入队列失败</h3><p>会再次尝试创建新的线程(根据最大线程数决定)<br>但是如果创建额外线程还是失败了就会根据拒绝策略执行后续步骤。<br>超过核心线程数的线程，在超过keepAliveTime的时间范围都空闲的话，就会给杀死。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable command)</span> &#123;<br>    <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Proceed in 3 steps:</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 1. If fewer than corePoolSize threads are running, try to</span><br><span class="hljs-comment">     * start a new thread with the given command as its first</span><br><span class="hljs-comment">     * task.  The call to addWorker atomically checks runState and</span><br><span class="hljs-comment">     * workerCount, and so prevents false alarms that would add</span><br><span class="hljs-comment">     * threads when it shouldn&#x27;t, by returning false.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 2. If a task can be successfully queued, then we still need</span><br><span class="hljs-comment">     * to double-check whether we should have added a thread</span><br><span class="hljs-comment">     * (because existing ones died since last checking) or that</span><br><span class="hljs-comment">     * the pool shut down since entry into this method. So we</span><br><span class="hljs-comment">     * recheck state and if necessary roll back the enqueuing if</span><br><span class="hljs-comment">     * stopped, or start a new thread if there are none.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 3. If we cannot queue task, then we try to add a new</span><br><span class="hljs-comment">     * thread.  If it fails, we know we are shut down or saturated</span><br><span class="hljs-comment">     * and so reject the task.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>    <span class="hljs-keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;<br>        <span class="hljs-keyword">if</span> (addWorker(command, <span class="hljs-literal">true</span>))<br>            <span class="hljs-keyword">return</span>;<br>        c = ctl.get();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">recheck</span> <span class="hljs-operator">=</span> ctl.get();<br>        <span class="hljs-keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))<br>            reject(command);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (workerCountOf(recheck) == <span class="hljs-number">0</span>)<br>            addWorker(<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!addWorker(command, <span class="hljs-literal">false</span>))<br>        reject(command);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addWorker</span><span class="hljs-params">(Runnable firstTask, <span class="hljs-type">boolean</span> core)</span> &#123;<br>    retry:<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(c);<br><br>        <span class="hljs-comment">// Check if queue empty only if necessary.</span><br>        <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;<br>            ! (rs == SHUTDOWN &amp;&amp;<br>               firstTask == <span class="hljs-literal">null</span> &amp;&amp;<br>               ! workQueue.isEmpty()))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">wc</span> <span class="hljs-operator">=</span> workerCountOf(c);<br>            <span class="hljs-keyword">if</span> (wc &gt;= CAPACITY ||<br>                wc &gt;= (core ? corePoolSize : maximumPoolSize))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (compareAndIncrementWorkerCount(c))<br>                <span class="hljs-keyword">break</span> retry;<br>            c = ctl.get();  <span class="hljs-comment">// Re-read ctl</span><br>            <span class="hljs-keyword">if</span> (runStateOf(c) != rs)<br>                <span class="hljs-keyword">continue</span> retry;<br>            <span class="hljs-comment">// else CAS failed due to workerCount change; retry inner loop</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">workerStarted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">workerAdded</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">Worker</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(firstTask);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> w.thread;<br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>            mainLock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// Recheck while holding lock.</span><br>                <span class="hljs-comment">// Back out on ThreadFactory failure or if</span><br>                <span class="hljs-comment">// shut down before lock acquired.</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(ctl.get());<br><br>                <span class="hljs-keyword">if</span> (rs &lt; SHUTDOWN ||<br>                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="hljs-literal">null</span>)) &#123;<br>                    <span class="hljs-keyword">if</span> (t.isAlive()) <span class="hljs-comment">// precheck that t is startable</span><br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalThreadStateException</span>();<br>                    workers.add(w);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> workers.size();<br>                    <span class="hljs-keyword">if</span> (s &gt; largestPoolSize)<br>                        largestPoolSize = s;<br>                    workerAdded = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                mainLock.unlock();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (workerAdded) &#123;<br>                t.start();<br>                workerStarted = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (! workerStarted)<br>            addWorkerFailed(w);<br>    &#125;<br>    <span class="hljs-keyword">return</span> workerStarted;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硬件层面的多线程</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/%E7%A1%AC%E4%BB%B6%E5%B1%82%E9%9D%A2%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/%E7%A1%AC%E4%BB%B6%E5%B1%82%E9%9D%A2%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Java规定所有变量的赋值操作是原子性"><a href="#Java规定所有变量的赋值操作是原子性" class="headerlink" title="Java规定所有变量的赋值操作是原子性"></a>Java规定所有变量的赋值操作是原子性</h2><p>诸如 a &#x3D; 1,resource &#x3D; loadResource等直接赋值操作在Java虚拟机的底层是保证了原子性的。<br>但是 i++， a+&#x3D; 1这种语法糖的操作并不是原子性的。</p><p>特例<br>32位虚拟机 里面的long&#x2F;double类型的变量的简单赋值写操作，不是原子性。<br>long是64位的，在多线程编发的时候，可能会导致高低位赋值错误。<br>此时对变量加上volatile，可以保证此时的环境下的写操作时原子性的。</p><p>不保障原子性的操作</p><ul><li>i++</li><li>i &#x3D; x*y</li></ul><h2 id="计算机硬件概述"><a href="#计算机硬件概述" class="headerlink" title="计算机硬件概述"></a>计算机硬件概述</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>每个处理器都有自己的寄存器（register），所以多个处理器各自运行一个线程的时候，可能导致某个变量给放到寄存器里去，接着就会导致各个线程没法看到其他处理器寄存器里的变量的值修改了</p><h3 id="写缓冲器"><a href="#写缓冲器" class="headerlink" title="写缓冲器"></a>写缓冲器</h3><p>一个处理器运行的线程对变量的写操作都是针对写缓冲来的（store buffer）并不是直接更新主内存，所以很可能导致一个线程更新了变量，但是仅仅是在写缓冲区里罢了，没有更新到主内存里去</p><h3 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h3><p>一个处理器的线程更新了写缓冲区之后，将更新同步到了自己的高速缓存里（cache，或者是主内存），然后还把这个更新通知给了其他的处理器，但是其他处理器可能就是把这个更新放到无效队列里去，没有更新他的高速缓存</p><h3 id="flush处理器缓存"><a href="#flush处理器缓存" class="headerlink" title="flush处理器缓存"></a>flush处理器缓存</h3><p>flush处理器缓存，他的意思就是把自己更新的值刷新到高速缓存里去（或者是主内存），因为必须要刷到高速缓存（或者是主内存）里，才有可能在后续通过一些特殊的机制让其他的处理器从自己的高速缓存（或者是主内存）里读取到更新的值<br>除了flush以外，他还会发送一个消息到总线（bus），通知其他处理器，某个变量的值被他给修改了</p><h3 id="refresh处理器缓存"><a href="#refresh处理器缓存" class="headerlink" title="refresh处理器缓存"></a>refresh处理器缓存</h3><p>refresh处理器缓存，他的意思就是说，处理器中的线程在读取一个变量的值的时候，如果发现其他处理器的线程更新了变量的值，必须从其他处理器的高速缓存（或者是主内存）里，读取这个最新的值，更新到自己的高速缓存中</p><h2 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h2><h3 id="指令重排的层次"><a href="#指令重排的层次" class="headerlink" title="指令重排的层次"></a>指令重排的层次</h3><ol><li>javac静态编译器</li><li>JIT动态编译器</li><li>处理器执行顺序</li><li>内存重排序<ol><li>写缓冲器</li><li>高数缓存</li><li>无效队列<h3 id="处理器的指令乱序机制"><a href="#处理器的指令乱序机制" class="headerlink" title="处理器的指令乱序机制"></a>处理器的指令乱序机制</h3>指令不一定说是拿到了一个指令立马可以执行的，比如有的指令是要进行网络通信、磁盘读写，获取锁，很多种，有的指令不是立马就绪可以执行的，为了提升效率，在现代处理器里面都是走的指令的乱序执行机制<br>把编译好的指令一条一条读取到处理器里，但是哪个指令先就绪可以执行，就先执行，不是按照代码顺序来的。每个指令的结果放到一个重排序处理器中，重排序处理器把各个指令的结果按照代码顺序应用到主内存或者写缓冲器里</li></ol></li></ol><h3 id="处理器的推测执行"><a href="#处理器的推测执行" class="headerlink" title="处理器的推测执行"></a>处理器的推测执行</h3><p>预先执行下一步，在执行上一步的判断，如果判断不为真，就舍弃后面预执行的结果。</p><h3 id="内存重排序"><a href="#内存重排序" class="headerlink" title="内存重排序"></a>内存重排序</h3><p>处理器会将数据写入写缓冲器，这个过程是store；从高速缓存里读数据，这个过程是load。写缓冲器和高速缓存执行load和store的过程，都是按照处理器指示的顺序来的，处理器的重排处理器也是按照程序顺序来load和store的。<br>但是在其他处理器可能回档到load和store是重排序的。这种就是内存重排序</p><p>内存重排序的四种可能</p><ol><li>LoadLoad重排序：一个处理器先执行一个L1读操作，再执行一个L2读操作；但是另外一个处理器看到的是先L2再L1</li><li>StoreStore重排序：一个处理器先执行一个W1写操作，再执行一个W2写操作；但是另外一个处理器看到的是先W2再W1</li><li>LoadStore重排序：一个处理器先执行一个L1读操作，再执行一个W2写操作；但是另外一个处理器看到的是先W2再L1</li><li>StoreLoad重排序：一个处理器先执行一个W1写操作，再执行一个L2读操作；但是另外一个处理器看到的是先L2再W1</li></ol><h2 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h2><p>按可见性分，内存屏障可以分为Load屏障和Store屏障</p><h3 id="Load屏障"><a href="#Load屏障" class="headerlink" title="Load屏障"></a>Load屏障</h3><p>执行refresh处理器缓存的操作，就是对别的处理器更新过的变量，从其他处理器的高速缓存（或者主内存）加载数据到自己的高数缓存来，确保自己看到的是最新的数据。</p><h3 id="Store屏障"><a href="#Store屏障" class="headerlink" title="Store屏障"></a>Store屏障</h3><p>执行flush处理器缓存的操作，把自己当前处理器更新的变量的值都刷新到高速缓存（或者主内存）中</p><p>按照有序性分，内存屏障还可以分为Acquire屏障和Release屏障</p><h3 id="Acquire屏障"><a href="#Acquire屏障" class="headerlink" title="Acquire屏障"></a>Acquire屏障</h3><p>禁止读操作和读写操作之间发生指令重排序</p><h3 id="Release屏障"><a href="#Release屏障" class="headerlink" title="Release屏障"></a>Release屏障</h3><p>禁止写操作和读写操作之间发成指令重排序</p><h2 id="synchronized的保证"><a href="#synchronized的保证" class="headerlink" title="synchronized的保证"></a>synchronized的保证</h2><p>synchronized可以同时保证原子性、可见性、有序性</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>synchronized存在加锁和释放锁的机制保证原子性。</p><p><a href="https://www.processon.com/view/link/62466d535653bb072bd26a61">点击查看【processon】</a></p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>synchronized在同步代码块里面，对变量的写操作，在释放锁的时候，全部强制执行flush操作。<br>在进入代码块的时候，对所有变量的读操作，全部执行refresh操作</p><p>如果用了synchronized关键字，在底层编译后，JVM指令中会有monitorenter和monitorexit指令。<br>在monitorenter指令之后，会加一个Load屏障，执行refresh操作，把别的处理器修改过的最新值加载到自己的高速缓存中。<br>在monitorexit指令之后，会加一个Sotre屏障，让线程把自己在同步代码块里修改的变量的值都执行flush操作，刷到高速缓存（或者主内存中。）</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>synchronized会通过加内存屏障解决内存重排序<br>在monitorenter指令之后，Load屏障之后，会加一个Acquire屏障。<br>在monitorexit指令之前，会加一个Release屏障。<br>保证同步代码块内部的指令可以重排，但是同步代码块内部的指令和外面的指令是不能重排的</p><h2 id="volatile的保证"><a href="#volatile的保证" class="headerlink" title="volatile的保证"></a>volatile的保证</h2><p>在volatile变量写操作的前面会加入一个Release屏障，然后在之后会加入一个Store屏障，这样就可以保证volatile写跟Release屏障之前的任何读写操作都不会指令重排，然后Store屏障保证了，写完数据之后，立马会执行flush处理器缓存的操作</p><p>在volatile变量读操作的前面会加入一个Load屏障，这样就可以保证对这个变量的读取时，如果被别的处理器修改过了，必须得从其他处理器的高速缓存（或者主内存）中加载到自己本地高速缓存里，保证读到的是最新数据；在之后会加入一个Acquire屏障，禁止volatile读操作之后的任何读写操作会跟volatile读指令重排序</p><h2 id="高速缓存-1"><a href="#高速缓存-1" class="headerlink" title="高速缓存"></a>高速缓存</h2><p>那么处理器在读写高速缓存的时候，实际上会根据变量名执行一个内存地址解码的操作，解析出来3个东西，index、tag和offset。index用于定位到拉链散列表中的某个bucket，tag是用于定位cache entry，offset是用于定位一个变量在cache line中的位置</p><p>如果说可以成功定位到一个高速缓存中的数据，而且flag还标志着有效，则缓存命中；否则不满足上述条件，就是缓存未命中。如果是读数据未命中的话，会从主内存重新加载数据到高速缓存中，现在处理器一般都有三级高速缓存，L1、L2、L3，越靠前面的缓存读写速度越快<br><a href="https://www.processon.com/view/link/6246791c07912907096ee231">点击查看【processon】</a></p><h2 id="Java虚拟机对锁的优化"><a href="#Java虚拟机对锁的优化" class="headerlink" title="Java虚拟机对锁的优化"></a>Java虚拟机对锁的优化</h2>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>锁优化</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/%E9%94%81%E4%BC%98%E5%8C%96/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/%E9%94%81%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="锁优化方案"><a href="#锁优化方案" class="headerlink" title="锁优化方案"></a>锁优化方案</h2><h3 id="1-标志位修改等可见性场景优先使用volatile"><a href="#1-标志位修改等可见性场景优先使用volatile" class="headerlink" title="1. 标志位修改等可见性场景优先使用volatile"></a>1. 标志位修改等可见性场景优先使用volatile</h3><p>多线程场景下，考虑清楚多线程对共享数据访问的时候的并发场景，是读多还是写多。<br>如果仅仅只是有一些线程来写一个变量(标志位)，另一些线程读取这个标志位的值。就可以优先使用volatile</p><h3 id="2-数值递增的场景优先使用Atomic原子类"><a href="#2-数值递增的场景优先使用Atomic原子类" class="headerlink" title="2. 数值递增的场景优先使用Atomic原子类"></a>2. 数值递增的场景优先使用Atomic原子类</h3><p>如果共享变量仅仅是简单的数值累加或者变更数值的操作，可以使用Atomic类。</p><h3 id="3-数据允许多副本场景优先使用ThreadLocal"><a href="#3-数据允许多副本场景优先使用ThreadLocal" class="headerlink" title="3. 数据允许多副本场景优先使用ThreadLocal"></a>3. 数据允许多副本场景优先使用ThreadLocal</h3><h3 id="4-读多写少需要加锁的场景优先使用读写锁"><a href="#4-读多写少需要加锁的场景优先使用读写锁" class="headerlink" title="4. 读多写少需要加锁的场景优先使用读写锁"></a>4. 读多写少需要加锁的场景优先使用读写锁</h3><h3 id="5-尽可能减少线程对锁占用的时间"><a href="#5-尽可能减少线程对锁占用的时间" class="headerlink" title="5. 尽可能减少线程对锁占用的时间"></a>5. 尽可能减少线程对锁占用的时间</h3><p>分段加锁机制<br>在加锁的时候尽量不要进行一些磁盘文件读写，网络IO读写</p><h3 id="6-尽可能减少线程对数据加锁的粒度"><a href="#6-尽可能减少线程对数据加锁的粒度" class="headerlink" title="6. 尽可能减少线程对数据加锁的粒度"></a>6. 尽可能减少线程对数据加锁的粒度</h3><p>一块数据可以拆分为多块小数据的情况下，仅仅对大块数据里的部分子数据加锁。</p><h3 id="7-尽可能对不同功能分离锁的使用"><a href="#7-尽可能对不同功能分离锁的使用" class="headerlink" title="7. 尽可能对不同功能分离锁的使用"></a>7. 尽可能对不同功能分离锁的使用</h3><p>如果有一个锁，看是否能按照功能不同进行拆分，减少线程竞争锁的冲突。</p><h3 id="8-避免在循环中频繁的加锁以及释放锁"><a href="#8-避免在循环中频繁的加锁以及释放锁" class="headerlink" title="8. 避免在循环中频繁的加锁以及释放锁"></a>8. 避免在循环中频繁的加锁以及释放锁</h3><h3 id="9-减少高并发场景中线程对锁的争用"><a href="#9-减少高并发场景中线程对锁的争用" class="headerlink" title="9. 减少高并发场景中线程对锁的争用"></a>9. 减少高并发场景中线程对锁的争用</h3><p>比如多级缓存机制</p><h2 id="锁问题排查"><a href="#锁问题排查" class="headerlink" title="锁问题排查"></a>锁问题排查</h2><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>存在两把锁，线程1获取到了锁1，然后尝试获取锁2。但是线程2获取到了锁2，尝试获取锁1。</p><p>容易出现死锁的地方就是，一段代码先获取了一把锁但是没释放就尝试获取另外的锁。另一端代码相似的思路，但是获取锁的顺序相反，就很容易死锁。</p><p>排查方案：<br>jstack得到dump快照看线程状态</p><p>解决方案：<br>线程加锁顺序改为一致</p><h3 id="线程饥饿"><a href="#线程饥饿" class="headerlink" title="线程饥饿"></a>线程饥饿</h3><p>在非公平锁的情况下，可能存在最先的线程一直获取不到锁的情况。</p><p>解决方案：<br>策略调整为公平锁</p><h3 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h3><p>线程一直在后台运行，但是一直无法完成自身任务。</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreadLocal</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/ThreadLocal/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/ThreadLocal/</url>
    
    <content type="html"><![CDATA[<h2 id="ThreadLocal源码"><a href="#ThreadLocal源码" class="headerlink" title="ThreadLocal源码"></a>ThreadLocal源码</h2><p>底层是获取每个线程自己持有的ThreadLocalMap，去获取值。</p><h3 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Sets the current thread&#x27;s copy of this thread-local variable</span><br><span class="hljs-comment"> * to the specified value.  Most subclasses will have no need to</span><br><span class="hljs-comment"> * override this method, relying solely on the &#123;<span class="hljs-doctag">@link</span> #initialValue&#125;</span><br><span class="hljs-comment"> * method to set the values of thread-locals.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value the value to be stored in the current thread&#x27;s copy of</span><br><span class="hljs-comment"> *        this thread-local.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>        map.set(<span class="hljs-built_in">this</span>, value);<br>    <span class="hljs-keyword">else</span><br>        createMap(t, value);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns the value in the current thread&#x27;s copy of this</span><br><span class="hljs-comment"> * thread-local variable.  If the variable has no value for the</span><br><span class="hljs-comment"> * current thread, it is first initialized to the value returned</span><br><span class="hljs-comment"> * by an invocation of the &#123;<span class="hljs-doctag">@link</span> #initialValue&#125; method.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the current thread&#x27;s value of this thread-local</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>        ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> map.getEntry(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (T)e.value;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> setInitialValue();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReentrantReadWriteLock</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/ReentrantReadWriteLock/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/ReentrantReadWriteLock/</url>
    
    <content type="html"><![CDATA[<h2 id="ReentrantReadWriteLock源码"><a href="#ReentrantReadWriteLock源码" class="headerlink" title="ReentrantReadWriteLock源码"></a>ReentrantReadWriteLock源码</h2><h3 id="加写锁"><a href="#加写锁" class="headerlink" title="加写锁"></a>加写锁</h3><p>排他锁</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Walkthrough:</span><br><span class="hljs-comment">         * 1. If read count nonzero or write count nonzero</span><br><span class="hljs-comment">         *    and owner is a different thread, fail.</span><br><span class="hljs-comment">         * 2. If count would saturate, fail. (This can only</span><br><span class="hljs-comment">         *    happen if count is already nonzero.)</span><br><span class="hljs-comment">         * 3. Otherwise, this thread is eligible for lock if</span><br><span class="hljs-comment">         *    it is either a reentrant acquire or</span><br><span class="hljs-comment">         *    queue policy allows it. If so, update state</span><br><span class="hljs-comment">         *    and set owner.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            区分读锁还是写锁，利用state的值</span><br><span class="hljs-comment">            在二进制高低16位代表了读锁还是写锁</span><br><span class="hljs-comment">            state的二进制值高16位是读锁</span><br><span class="hljs-comment">            低16位是写锁</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            实际就是获取state的低16位，即写锁状态</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> exclusiveCount(c);<br>        <span class="hljs-comment">//c不为0，即有人加过锁</span><br>        <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                c!=0，w==0 说明有人加了锁，但是不是写锁，返回false</span><br><span class="hljs-comment">                或者你不是之前的线程，返回false</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>            <span class="hljs-comment">// Reentrant acquire</span><br>            <span class="hljs-comment">//加写锁的是你自己，就可以重入</span><br>            setState(c + acquires);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            如果是非公平锁，就会去尝试加锁</span><br><span class="hljs-comment">            如果是公平锁，就会去判断队列是否有等待的线程</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">if</span> (writerShouldBlock() ||<br>            !compareAndSetState(c, c + acquires))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        setExclusiveOwnerThread(current);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="加读锁"><a href="#加读锁" class="headerlink" title="加读锁"></a>加读锁</h3><p>共享锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Walkthrough:</span><br><span class="hljs-comment">         * 1. If write lock held by another thread, fail.</span><br><span class="hljs-comment">         * 2. Otherwise, this thread is eligible for</span><br><span class="hljs-comment">         *    lock wrt state, so ask if it should block</span><br><span class="hljs-comment">         *    because of queue policy. If not, try</span><br><span class="hljs-comment">         *    to grant by CASing state and updating count.</span><br><span class="hljs-comment">         *    Note that step does not check for reentrant</span><br><span class="hljs-comment">         *    acquires, which is postponed to full version</span><br><span class="hljs-comment">         *    to avoid having to check hold count in</span><br><span class="hljs-comment">         *    the more typical non-reentrant case.</span><br><span class="hljs-comment">         * 3. If step 2 fails either because thread</span><br><span class="hljs-comment">         *    apparently not eligible or CAS fails or count</span><br><span class="hljs-comment">         *    saturated, chain to version with full retry loop.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-comment">//写锁不为0，即有人加写锁</span><br>        <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span> &amp;&amp;<br>            <span class="hljs-comment">//并且不是你加的写锁</span><br>            getExclusiveOwnerThread() != current)<br>            <span class="hljs-comment">//就不可以加读锁</span><br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//获取写锁状态</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> sharedCount(c);<br>        <span class="hljs-keyword">if</span> (!readerShouldBlock() &amp;&amp;<br>            r &lt; MAX_COUNT &amp;&amp;<br>            compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>            <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) &#123;<br>                firstReader = current;<br>                firstReaderHoldCount = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                firstReaderHoldCount++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>                <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current))<br>                    cachedHoldCounter = rh = readHolds.get();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                    readHolds.set(rh);<br>                rh.count++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fullTryAcquireShared(current);<br>    &#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fullTryAcquireShared</span><span class="hljs-params">(Thread current)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * This code is in part redundant with that in</span><br><span class="hljs-comment">         * tryAcquireShared but is simpler overall by not</span><br><span class="hljs-comment">         * complicating tryAcquireShared with interactions between</span><br><span class="hljs-comment">         * retries and lazily reading hold counts.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() != current)<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// else we hold the exclusive lock; blocking here</span><br>                <span class="hljs-comment">// would cause deadlock.</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (readerShouldBlock()) &#123;<br>                <span class="hljs-comment">// Make sure we&#x27;re not acquiring read lock reentrantly</span><br>                <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                    <span class="hljs-comment">// assert firstReaderHoldCount &gt; 0;</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span>) &#123;<br>                        rh = cachedHoldCounter;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current)) &#123;<br>                            rh = readHolds.get();<br>                            <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                                readHolds.remove();<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (sharedCount(c) == MAX_COUNT)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>            <span class="hljs-keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>                <span class="hljs-keyword">if</span> (sharedCount(c) == <span class="hljs-number">0</span>) &#123;<br>                    firstReader = current;<br>                    firstReaderHoldCount = <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                    firstReaderHoldCount++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span>)<br>                        rh = cachedHoldCounter;<br>                    <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current))<br>                        rh = readHolds.get();<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                        readHolds.set(rh);<br>                    rh.count++;<br>                    cachedHoldCounter = rh; <span class="hljs-comment">// cache for release</span><br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>firstReaderHoldCount<br>cachedHoldCounter<br>手动维护了一份计数器，为什么不知道</p><h3 id="释放写锁"><a href="#释放写锁" class="headerlink" title="释放写锁"></a>释放写锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>     <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>         <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>         <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>             unparkSuccessor(h);<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> &#125;<br> <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>     <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>     <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> getState() - releases;<br>     <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> exclusiveCount(nextc) == <span class="hljs-number">0</span>;<br>     <span class="hljs-keyword">if</span> (free)<br>         setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>     setState(nextc);<br>     <span class="hljs-keyword">return</span> free;<br> &#125;<br><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unparkSuccessor</span><span class="hljs-params">(Node node)</span> &#123;<br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">      * If status is negative (i.e., possibly needing signal) try</span><br><span class="hljs-comment">      * to clear in anticipation of signalling.  It is OK if this</span><br><span class="hljs-comment">      * fails or if status is changed by waiting thread.</span><br><span class="hljs-comment">      */</span><br>     <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> node.waitStatus;<br>     <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)<br>         compareAndSetWaitStatus(node, ws, <span class="hljs-number">0</span>);<br><br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">      * Thread to unpark is held in successor, which is normally</span><br><span class="hljs-comment">      * just the next node.  But if cancelled or apparently null,</span><br><span class="hljs-comment">      * traverse backwards from tail to find the actual</span><br><span class="hljs-comment">      * non-cancelled successor.</span><br><span class="hljs-comment">      */</span><br>     <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>     <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;<br>         s = <span class="hljs-literal">null</span>;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; t != <span class="hljs-literal">null</span> &amp;&amp; t != node; t = t.prev)<br>             <span class="hljs-keyword">if</span> (t.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                 s = t;<br>     &#125;<br>     <span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span>)<br>         LockSupport.unpark(s.thread);<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="释放读锁"><a href="#释放读锁" class="headerlink" title="释放读锁"></a>释放读锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">releaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>     <span class="hljs-comment">//只有在读锁全部释放的时候会返回true</span><br>    <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>        doReleaseShared();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123;<br>    <span class="hljs-comment">//前面在维护计数器变量</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>        <span class="hljs-comment">// assert firstReaderHoldCount &gt; 0;</span><br>        <span class="hljs-keyword">if</span> (firstReaderHoldCount == <span class="hljs-number">1</span>)<br>            firstReader = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">else</span><br>            firstReaderHoldCount--;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current))<br>            rh = readHolds.get();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> rh.count;<br>        <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">1</span>) &#123;<br>            readHolds.remove();<br>            <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">throw</span> unmatchedUnlockException();<br>        &#125;<br>        --rh.count;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c - SHARED_UNIT;<br>        <span class="hljs-comment">//只有在读锁全部释放的时候会返回true</span><br>        <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>            <span class="hljs-comment">// Releasing the read lock has no effect on readers,</span><br>            <span class="hljs-comment">// but it may allow waiting writers to proceed if</span><br>            <span class="hljs-comment">// both read and write locks are now free.</span><br>            <span class="hljs-type">return</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span>= <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doReleaseShared</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Ensure that a release propagates, even if there are other</span><br><span class="hljs-comment">     * in-progress acquires/releases.  This proceeds in the usual</span><br><span class="hljs-comment">     * way of trying to unparkSuccessor of head if it needs</span><br><span class="hljs-comment">     * signal. But if it does not, status is set to PROPAGATE to</span><br><span class="hljs-comment">     * ensure that upon release, propagation continues.</span><br><span class="hljs-comment">     * Additionally, we must loop in case a new node is added</span><br><span class="hljs-comment">     * while we are doing this. Also, unlike other uses of</span><br><span class="hljs-comment">     * unparkSuccessor, we need to know if CAS to reset status</span><br><span class="hljs-comment">     * fails, if so rechecking.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h != tail) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> h.waitStatus;<br>            <span class="hljs-comment">//寻找队列中的写锁</span><br>            <span class="hljs-keyword">if</span> (ws == Node.SIGNAL) &#123;<br>                <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">continue</span>;            <span class="hljs-comment">// loop to recheck cases</span><br>                unparkSuccessor(h);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ws == <span class="hljs-number">0</span> &amp;&amp;<br>                     !compareAndSetWaitStatus(h, <span class="hljs-number">0</span>, Node.PROPAGATE))<br>                <span class="hljs-keyword">continue</span>;                <span class="hljs-comment">// loop on failed CAS</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (h == head)                   <span class="hljs-comment">// loop if head changed</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Condition源码"><a href="#Condition源码" class="headerlink" title="Condition源码"></a>Condition源码</h2><h3 id="线程等待"><a href="#线程等待" class="headerlink" title="线程等待"></a>线程等待</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * Implements interruptible condition wait.</span><br><span class="hljs-comment">  * &lt;ol&gt;</span><br><span class="hljs-comment">  * &lt;li&gt; If current thread is interrupted, throw InterruptedException.</span><br><span class="hljs-comment">  * &lt;li&gt; Save lock state returned by &#123;<span class="hljs-doctag">@link</span> #getState&#125;.</span><br><span class="hljs-comment">  * &lt;li&gt; Invoke &#123;<span class="hljs-doctag">@link</span> #release&#125; with saved state as argument,</span><br><span class="hljs-comment">  *      throwing IllegalMonitorStateException if it fails.</span><br><span class="hljs-comment">  * &lt;li&gt; Block until signalled or interrupted.</span><br><span class="hljs-comment">  * &lt;li&gt; Reacquire by invoking specialized version of</span><br><span class="hljs-comment">  *      &#123;<span class="hljs-doctag">@link</span> #acquire&#125; with saved state as argument.</span><br><span class="hljs-comment">  * &lt;li&gt; If interrupted while blocked in step 4, throw InterruptedException.</span><br><span class="hljs-comment">  * &lt;/ol&gt;</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>     <span class="hljs-keyword">if</span> (Thread.interrupted())<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>     <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> addConditionWaiter();<br>     <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> fullyRelease(node);<br>     <span class="hljs-type">int</span> <span class="hljs-variable">interruptMode</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>     <span class="hljs-keyword">while</span> (!isOnSyncQueue(node)) &#123;<br>         LockSupport.park(<span class="hljs-built_in">this</span>);<br>         <span class="hljs-keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="hljs-number">0</span>)<br>             <span class="hljs-keyword">break</span>;<br>     &#125;<br>     <span class="hljs-keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)<br>         interruptMode = REINTERRUPT;<br>     <span class="hljs-keyword">if</span> (node.nextWaiter != <span class="hljs-literal">null</span>) <span class="hljs-comment">// clean up if cancelled</span><br>         unlinkCancelledWaiters();<br>     <span class="hljs-keyword">if</span> (interruptMode != <span class="hljs-number">0</span>)<br>         reportInterruptAfterWait(interruptMode);<br> &#125;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * Adds a new waiter to wait queue.</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> its new wait node</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addConditionWaiter</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> lastWaiter;<br>     <span class="hljs-comment">// If lastWaiter is cancelled, clean out.</span><br>     <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span> &amp;&amp; t.waitStatus != Node.CONDITION) &#123;<br>         unlinkCancelledWaiters();<br>         t = lastWaiter;<br>     &#125;<br>     <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), Node.CONDITION);<br>     <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)<br>         firstWaiter = node;<br>     <span class="hljs-keyword">else</span><br>         t.nextWaiter = node;<br>     lastWaiter = node;<br>     <span class="hljs-keyword">return</span> node;<br> &#125;<br></code></pre></td></tr></table></figure><p>Condition.await()<br>会将自己加入Condition等待队列，释放锁，挂起自己<br>signal<br>唤醒的过程，就是把condition等待队列中的元素，转化为一个加锁等待队列中的元素</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReentrantLock</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/ReentrantLock/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/ReentrantLock/</url>
    
    <content type="html"><![CDATA[<h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><p>AbstractQueueSynchronizer 抽象队列同步器<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/12966419/1648544801349-54a846df-0bff-41c3-8b9c-13b2d7923c5d.jpeg"></p><ol><li>线程1获取ReentrantLock，state改为1，当前加锁线程记录为线程1</li><li>线程2尝试获取锁，发现state不为0，就进入队列队尾，阻塞等待</li><li>线程1执行完毕，释放锁。将state改为0，当前加锁线程置空，同时唤醒队列中的阻塞等待的线程</li><li>线程2尝试获取锁重复上面步骤</li></ol><h2 id="ReentrantLock源码"><a href="#ReentrantLock源码" class="headerlink" title="ReentrantLock源码"></a>ReentrantLock源码</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1648522090258-7893f919-517b-4a96-828b-15ff584a7edc.png#clientId=u09dcd781-17e0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=617&id=ufa514f81&margin=%5Bobject%20Object%5D&name=image.png&originHeight=617&originWidth=1050&originalType=binary&ratio=1&rotation=0&showTitle=false&size=53004&status=done&style=none&taskId=u1dc546fb-0fd9-44ef-a03a-585210a463b&title=&width=1050" alt="image.png"></p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates an instance of &#123;<span class="hljs-doctag">@code</span> ReentrantLock&#125;.</span><br><span class="hljs-comment"> * This is equivalent to using &#123;<span class="hljs-doctag">@code</span> ReentrantLock(false)&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">()</span> &#123;<br>    sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>默认是非公平锁</p><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Performs lock.  Try immediate barge, backing up to normal</span><br><span class="hljs-comment"> * acquire on failure.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//尝试将AbstractQueuedSynchronizer中的state从0改为1</span><br>    <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>        <span class="hljs-comment">//如果成功，就将加锁中的线程引用改为当前线程</span><br>        setExclusiveOwnerThread(Thread.currentThread());<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">//失败</span><br>        acquire(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp;<br>        <span class="hljs-comment">//将当前线程入队阻塞</span><br>        <span class="hljs-comment">//EXCLUSIVE 排他锁，同一时间只有一个线程占有</span><br>        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>        selfInterrupt();<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-keyword">return</span> nonfairTryAcquire(acquires);<br>&#125;+<br><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">nonfairTryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-comment">//获取当前线程</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>    <span class="hljs-comment">//此处放置在上述判断到现在的时候，存在锁释放</span><br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>        <span class="hljs-comment">//一个线程可重入加锁</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>        <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        setState(nextc);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//如果是没获取到锁的线程，会返回false</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    将node放入双向链表队列</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addWaiter</span><span class="hljs-params">(Node mode)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), mode);<br>    <span class="hljs-comment">// Try the fast path of enq; backup to full enq on failure</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span>) &#123;<br>        node.prev = pred;<br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            pred.next = node;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    enq(node);<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-comment">//再次尝试当前线程加锁</span><br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                <span class="hljs-comment">//将当前结点设置为头结点，对线程引用置空，让gc进行回收</span><br>                setHead(node);<br>                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                failed = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                如果加锁失败，会判断一下，是否需要将当前的线程挂起，阻塞等待</span><br><span class="hljs-comment">                如果需要的话，使用park操作挂起当前线程</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    一开始的节点默认初始为0</span><br><span class="hljs-comment">    经过一次之后设置为Node.SIGNAL</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> pred.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * This node has already set status asking a release</span><br><span class="hljs-comment">         * to signal it, so it can safely park.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Predecessor was cancelled. Skip over predecessors and</span><br><span class="hljs-comment">         * indicate retry.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            node.prev = pred = pred.prev;<br>        &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);<br>        pred.next = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span><br><span class="hljs-comment">         * need a signal, but don&#x27;t park yet.  Caller will need to</span><br><span class="hljs-comment">         * retry to make sure it cannot acquire before parking.</span><br><span class="hljs-comment">         */</span><br>        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">parkAndCheckInterrupt</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//LockSupport.park就是将线程挂起，必须有另外一个线程对当前线程unpark操作，唤醒挂起的线程</span><br>    LockSupport.park(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">return</span> Thread.interrupted();<br>&#125;<br></code></pre></td></tr></table></figure><p>LockSupport.park会挂起线程，直到其他线程唤醒</p><p>LockSupport.unpark()唤醒指定线程</p><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    sync.release(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;<br>    <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        free = <span class="hljs-literal">true</span>;<br>        setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>    &#125;<br>    setState(c);<br>    <span class="hljs-keyword">return</span> free;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="唤醒队头元素"><a href="#唤醒队头元素" class="headerlink" title="唤醒队头元素"></a>唤醒队头元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unparkSuccessor</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * If status is negative (i.e., possibly needing signal) try</span><br><span class="hljs-comment">     * to clear in anticipation of signalling.  It is OK if this</span><br><span class="hljs-comment">     * fails or if status is changed by waiting thread.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> node.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)<br>        compareAndSetWaitStatus(node, ws, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Thread to unpark is held in successor, which is normally</span><br><span class="hljs-comment">     * just the next node.  But if cancelled or apparently null,</span><br><span class="hljs-comment">     * traverse backwards from tail to find the actual</span><br><span class="hljs-comment">     * non-cancelled successor.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;<br>        s = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; t != <span class="hljs-literal">null</span> &amp;&amp; t != node; t = t.prev)<br>            <span class="hljs-keyword">if</span> (t.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                s = t;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span>)<br>        LockSupport.unpark(s.thread);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Node节点"><a href="#Node节点" class="headerlink" title="Node节点"></a>Node节点</h3><p>双向链表当做队列使用<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1648525842892-edd1ab31-3a84-440b-b453-f5680605975b.png#clientId=u09dcd781-17e0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=495&id=u57645499&margin=%5Bobject%20Object%5D&name=image.png&originHeight=495&originWidth=226&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15562&status=done&style=none&taskId=uaf012ae1-f312-48bc-a58b-55b65d01c20&title=&width=226" alt="image.png"><br>锁类型</p><ul><li>SHARED 共享锁</li><li>EXCLUSIVE 排他锁</li></ul><p>阻塞状态</p><ul><li>CANCELLED</li><li>SIGNAL</li><li>CONDITION</li><li>PROPAGATE</li></ul><p>指针</p><ul><li>prev 前一个节点</li><li>next 后一个节点</li></ul><h2 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h2><p>队列里面很多线程在排队，但是释放锁的时候，不是有序的获取锁，而是争抢锁。</p><h2 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h2><p>会按照先来后到的顺序，进行获取锁。</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Atomic类</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/Atomic%E7%B1%BB/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/Atomic%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="Atomic执行流程"><a href="#Atomic执行流程" class="headerlink" title="Atomic执行流程"></a>Atomic执行流程</h2><blockquote><p>多个线程同时执行i++,i初始为0</p></blockquote><ol><li>线程A去判断此时i是否等于0，发现是，就说明没有人改动过，就执行i++，将i改为1</li><li>线程B同时去判断此时i是否等于0，发现i变为1，说明有人改动过，就重新查询，并再次去比较。</li></ol><h2 id="Atomic底层原理"><a href="#Atomic底层原理" class="headerlink" title="Atomic底层原理"></a>Atomic底层原理</h2><p>Atomic原子类核心思想：CAS(compare and set)无锁化<br>每次尝试修改的时候，就比对一下有没有人修改过这个值，如果没有人修改，自己就修改，如果有人修改过，就重新查找最新的值，再次重复上面的过程。</p><h2 id="AtomicInteger源码"><a href="#AtomicInteger源码" class="headerlink" title="AtomicInteger源码"></a>AtomicInteger源码</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomicInteger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6214790243416807050L</span>;<br><br>    <span class="hljs-comment">// setup to use Unsafe.compareAndSwapInt for updates</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> Unsafe.getUnsafe();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> valueOffset;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            valueOffset = unsafe.objectFieldOffset<br>                (AtomicInteger.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(ex); &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new AtomicInteger with the given initial value.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> initialValue the initial value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AtomicInteger</span><span class="hljs-params">(<span class="hljs-type">int</span> initialValue)</span> &#123;<br>        value = initialValue;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new AtomicInteger with initial value &#123;<span class="hljs-doctag">@code</span> 0&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AtomicInteger</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Atomically sets the value to the given updated value</span><br><span class="hljs-comment">     * if the current value &#123;<span class="hljs-doctag">@code</span> ==&#125; the expected value.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expect the expected value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> update the new value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if successful. False return indicates that</span><br><span class="hljs-comment">     * the actual value was not equal to the expected value.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSet</span><span class="hljs-params">(<span class="hljs-type">int</span> expect, <span class="hljs-type">int</span> update)</span> &#123;<br>        <span class="hljs-keyword">return</span> unsafe.compareAndSwapInt(<span class="hljs-built_in">this</span>, valueOffset, expect, update);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Atomically sets the value to the given updated value</span><br><span class="hljs-comment">     * if the current value &#123;<span class="hljs-doctag">@code</span> ==&#125; the expected value.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;a href=&quot;package-summary.html#weakCompareAndSet&quot;&gt;May fail</span><br><span class="hljs-comment">     * spuriously and does not provide ordering guarantees&lt;/a&gt;, so is</span><br><span class="hljs-comment">     * only rarely an appropriate alternative to &#123;<span class="hljs-doctag">@code</span> compareAndSet&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expect the expected value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> update the new value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if successful</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">weakCompareAndSet</span><span class="hljs-params">(<span class="hljs-type">int</span> expect, <span class="hljs-type">int</span> update)</span> &#123;<br>        <span class="hljs-keyword">return</span> unsafe.compareAndSwapInt(<span class="hljs-built_in">this</span>, valueOffset, expect, update);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Atomically increments by one the current value.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the previous value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndIncrement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> unsafe.getAndAddInt(<span class="hljs-built_in">this</span>, valueOffset, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>volatile value</li><li>使用Unsafe类操作，执行CAS操作<h3 id="Unsafe类"><a href="#Unsafe类" class="headerlink" title="Unsafe类"></a>Unsafe类</h3>Unsafe类是JDK底层类，不允许实例化以及使用其中的方法。Unsafe封装了一些不安全的操作，指针相关的操作。<br>如果在其他地方调用Unsafe.getUnsafe()，会抛出异常。他根据类加载器去判断是否允许调用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-title function_">Unsafe</span><span class="hljs-params">()</span> &#123;<br>&#125;<br><br><span class="hljs-meta">@CallerSensitive</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Unsafe <span class="hljs-title function_">getUnsafe</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">var0</span> <span class="hljs-operator">=</span> Reflection.getCallerClass();<br>    <span class="hljs-keyword">if</span> (!VM.isSystemDomainLoader(var0.getClassLoader())) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>(<span class="hljs-string">&quot;Unsafe&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> theUnsafe;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="valueOffset"><a href="#valueOffset" class="headerlink" title="valueOffset"></a>valueOffset</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> valueOffset;<br><br><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        valueOffset = unsafe.objectFieldOffset<br>            (AtomicInteger.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(ex); &#125;<br>&#125;<br></code></pre></td></tr></table></figure>在类初始化的时候执行，valueOffset表示value这个字段在AtomicInteger类中的偏移量。</li></ul><h3 id="CAS操作"><a href="#CAS操作" class="headerlink" title="CAS操作"></a>CAS操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">unsafe.getAndAddInt(<span class="hljs-built_in">this</span>, valueOffset, -<span class="hljs-number">1</span>);   <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndAddInt</span><span class="hljs-params">(Object var1, <span class="hljs-type">long</span> var2, <span class="hljs-type">int</span> var4)</span> &#123;<br>    <span class="hljs-type">int</span> var5;<br>    <span class="hljs-keyword">do</span> &#123;<br>        var5 = <span class="hljs-built_in">this</span>.getIntVolatile(var1, var2);<br>    &#125; <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    <span class="hljs-keyword">return</span> var5;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>根据传入的类以及value偏移量获取目前的值var5</li><li>compareAndSwapInt，CAS操作，首先又获取了一遍上面的值，然后和var5比较，如果一致就交换，否则失败。如果成功就返回var5。(因为是getAndAdd)</li></ol><h3 id="CAS底层操作"><a href="#CAS底层操作" class="headerlink" title="CAS底层操作"></a>CAS底层操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSwapInt</span><span class="hljs-params">(Object var1, <span class="hljs-type">long</span> var2, <span class="hljs-type">int</span> var4, <span class="hljs-type">int</span> var5)</span>;<br></code></pre></td></tr></table></figure><p>底层使用了native方法，走的c代码，可以通过发送一些cpu指令，确保CAS的过程是原子性的。<br>以前的cpu会通过一些指令锁掉一小块内存，后来优化后，可以保证仅仅只有一个线程在同一时间可以对某块小内存的数据做CAS的操作。</p><h2 id="CAS缺点"><a href="#CAS缺点" class="headerlink" title="CAS缺点"></a>CAS缺点</h2><h3 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h3><blockquote><p>线程A获取的值为1<br>线程B操作进行+1<br>线程C操作进行-1<br>CPU切回线程A后，值还是1，但是已经不符合需要进行的操作了</p></blockquote><p>AtomicInteger最多的使用场景在于计数。AtomicStampedReference使用stamp可以解决ABA问题</p><h3 id="无限循环问题"><a href="#无限循环问题" class="headerlink" title="无限循环问题"></a>无限循环问题</h3><blockquote><p>如果存在大量线程进行操作，那么会有很大一部分线程一直在循环尝试</p></blockquote><p>JDK1.8引入了LongAdder来解决，实际是分段CAS的思路</p><h3 id="多变量的原子问题"><a href="#多变量的原子问题" class="headerlink" title="多变量的原子问题"></a>多变量的原子问题</h3><blockquote><p>AtomicInteger只能保证一个变量的原子性。</p></blockquote><p>如果是多个变量可以使用AtomicReference。这个是封装自定义对象的，多个变量可以放一个自定义对象里面，然后会检查对象的应用是不是一个。</p><h2 id="LongAdder"><a href="#LongAdder" class="headerlink" title="LongAdder"></a>LongAdder</h2><p>为了解决普通原子类一直自旋的问题。<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/12966419/1648450353522-9fd0ab3c-fbc7-4862-9daa-4f735c3eeb48.jpeg"></p><ol><li>当只有少数线程的时候，就共同访问一个base字段</li><li>当线程变多，就会分配一个cell数组，分配线程到不同的cell去访问。当一个线程对其分配的cell操作失败，就会分配到其他cell中。针对不同的cell分段加锁。</li><li>get最终值的时候，会对base和各个cell的值合并计算。因为最开始操作base，线程多起来之后才会操作cell。</li></ol>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>synchronized</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/synchronized/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/synchronized/</url>
    
    <content type="html"><![CDATA[<h2 id="基础概念理解"><a href="#基础概念理解" class="headerlink" title="基础概念理解"></a>基础概念理解</h2><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>Java对象（Object实例）结构包括三部分：对象头，对象体和对齐字节<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/202163/1648090211228-48dc2109-23fa-4d5b-987f-094fd3840673.jpeg#clientId=ua15888d1-f766-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=ud2ddd943&margin=%5Bobject%20Object%5D&name=java%E5%AF%B9%E8%B1%A1%E7%BB%93%E6%9E%84.jpg&originHeight=585&originWidth=957&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51989&status=done&style=none&taskId=ucacc36c5-54ea-482d-9994-0774d03d33d&title=" alt="java对象结构.jpg"><br>对象头包括三个字段</p><ul><li><strong>Mark Word</strong>（标记字），用于存储自身运行时的数据，例如GC标志位、哈希码、锁状态等信息。</li><li><strong>Class Pointer</strong>（类对象指针），用于存放方法区Class对象的地址，虚拟机通过这个指针来确定这个对象是哪个类的实例。</li><li><strong>Array Length</strong>（数组长度）。如果对象是一个Java数组，那么此字段必须有，用于记录数组长度的数据；如果对象不是一个Java数组，那么此字段不存在，所以这是一个可选字段。</li></ul><h4 id="打印对象头"><a href="#打印对象头" class="headerlink" title="打印对象头"></a>打印对象头</h4><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjdk.jol<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jol-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectLock</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">amount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//整型字段占用4字节</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increase</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            amount++;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ObjectLock</span> <span class="hljs-variable">objectLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectLock</span>();<br>        objectLock.increase();<br>        System.identityHashCode(objectLock);<br>        System.out.println(ClassLayout.parseInstance(objectLock).toPrintable());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://cdn.nlark.com/yuque/0/2022/png/202163/1648106882441-63b95515-1de8-4269-aff4-ea82cf98c143.png#clientId=u2bc1ef7a-8ddd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=199&id=u76969f33&margin=%5Bobject%20Object%5D&name=image.png&originHeight=398&originWidth=2668&originalType=binary&ratio=1&rotation=0&showTitle=false&size=99795&status=done&style=none&taskId=u791863c2-eae4-4fec-8ef0-456e54dbd6b&title=&width=1334" alt="image.png"></p><h3 id="Mark-Word"><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h3><p>Java内置锁的状态总共有4种，级别由低到高依次为：无锁、偏向锁、轻量级锁和重量级锁。并且4种状态会随着竞争的情况逐渐升级，而且是不可逆的过程，即不可降级，也就是说只能进行锁升级（从低级别到高级别）。</p><p>Java内置锁涉及很多重要信息，这些都存放在对象结构中，并且存放于对象头的Mark Word字段中。来看一下不同锁状态下的Mark Word字段结构。ps：目前主流的JVM都是64位，因此我们使用64位的Mark Word。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/202163/1648090980743-db5f1ca4-bd63-457a-9e5d-6743ca67cb80.png#clientId=ua15888d1-f766-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=226&id=u67dc1eb3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=452&originWidth=1500&originalType=binary&ratio=1&rotation=0&showTitle=false&size=162246&status=done&style=none&taskId=u128cf80c-7bf7-4cd5-b42f-6b226ec5eb3&title=&width=750" alt="image.png"><br>Mark Word解读：</p><ul><li><strong>lock</strong>：锁状态标记位，占两个二进制位，由于希望用尽可能少的二进制位表示尽可能多的信息，因此设置了lock标记。该标记的值不同，整个Mark Word表示的含义就不同。</li><li><strong>biased_lock</strong>：对象是否启用偏向锁标记，只占1个二进制位。为1时表示对象启用偏向锁，为0时表示对象没有偏向锁。lock和biased_lock两个标记位组合在一起共同表示Object实例处于什么样的锁状态。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/202163/1648091379986-95656e39-1ccb-4cfd-aa0d-712a30af97f8.png#clientId=ua15888d1-f766-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=250&id=uc35ea9d0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=500&originWidth=2550&originalType=binary&ratio=1&rotation=0&showTitle=false&size=132485&status=done&style=none&taskId=ue506036a-fef7-4935-8ea2-7b717ce9781&title=&width=1275" alt="image.png"></p><ul><li><strong>age：</strong>4位的Java对象分代年龄。在GC中，对象在Survivor区复制一次，年龄就增加1。当对象达到设定的阈值时，将会晋升到老年代。默认情况下，并行GC的年龄阈值为15，并发GC的年龄阈值为6。由于age只有4位，因此最大值为15，这就是-XX:MaxTenuringThreshold选项最大值为15的原因。</li><li><strong>identity_hashcode</strong>：31位的对象标识HashCode（哈希码）采用延迟加载技术，当调用Object.hashCode()方法或者System.identityHashCode()方法计算对象的HashCode后，其结果将被写到该对象头中。当对象被锁定时，该值会移动到Monitor（监视器）中。</li><li><strong>thread</strong>：54位的线程ID值为持有偏向锁的线程ID。</li><li><strong>epoch</strong>：偏向时间戳。</li><li><strong>ptr_to_lock_record</strong>：占62位，在轻量级锁的状态下指向栈帧中锁记录的指针。</li><li><strong>ptr_to_heavyweight_monitor</strong>：占62位，在重量级锁的状态下指向对象监视器的指针。<h2 id="synchronized底层原理"><a href="#synchronized底层原理" class="headerlink" title="synchronized底层原理"></a>synchronized底层原理</h2><div class="code-wrapper"><pre><code class="hljs">                                                                                                                                                                           如果用了synchronized关键字，在底层编译后，JVM指令中会有monitorenter和monitorexit指令。</code></pre></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">monitorenter<br><br><span class="hljs-comment">//synchronized包裹的代码逻辑</span><br><br>monitorexit<br></code></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/12966419/1648281340104-f2048fdc-2302-4493-b9bc-f02af6e4a0e7.jpeg"><br>每个对象都关联一个monitor，如果要对这个对象加锁，就必须获取这个对象关联的monitor的lock锁。<br>每个monitor中又会有一个计数器，从0开始。<h3 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h3>如果一个线程获取monitor锁，会先判断计数器是否为0。如果是0就获取锁，计数器+1。<h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(myObject) &#123;<br>    <span class="hljs-comment">// 一大堆的代码</span><br>    <span class="hljs-keyword">synchronized</span>(myObject) &#123;<br>        <span class="hljs-comment">// 一大堆的代码</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><ol><li><p>线程A第一个在synchronized那边，获取到了myObject对象的monitor锁，计数器+1，变为1。</p></li><li><p>线程A运行到第二个synchronized那边，再次获取myObject对象的monitor锁，计数器+1，变为2。</p></li><li><p>此时线程B运行到第一个synchronized，发现myObject对象的monitor锁不为0。线程B就会进入block阻塞，等待获取锁。</p></li><li><p>线程A执行完第二个synchronized，会有一个monitorexit指令。此时myObject对象的monitor锁的计数器-1，依次执行后，最后的计数器为0</p></li><li><p>阻塞的线程会尝试获取锁，但只有一个线程可以成功获取锁。</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleCheckSingleDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">DoubleCheckSingleDemo</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">DoubleCheckSingleDemo</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DoubleCheckSingleDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (DoubleCheckSingleDemo.class)&#123;<br>                <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleCheckSingleDemo</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取锁的线程A离开synchronized代码块的时候，instance会直接刷回主存</p></li><li><p>线程B获取锁的时候，其中的变量会强制从主存中获取</p></li><li><p>但是，此处还是要用volatile，如果volatile内部存在变量，可能存在指令重排后，在instance已经实例化，但是内部变量还未完成实例化的时候，线程B获取此对象使用导致空指针。<br>volatile修饰的变量会有内存屏障，可以保证其读写前后有内存屏障，不会存在上述问题。</p><h2 id="wait和notify的底层原理"><a href="#wait和notify的底层原理" class="headerlink" title="wait和notify的底层原理"></a>wait和notify的底层原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueue</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">private</span> LinkedList&lt;String&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(String element)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;进入了offer方法&quot;</span>);<br>            <span class="hljs-keyword">if</span>(queue.size() == MAX_SIZE)&#123;<br>                <span class="hljs-comment">//让线程进行阻塞，释放锁</span><br>                System.out.println(<span class="hljs-string">&quot;队列满了等待&quot;</span>);<br>                wait();<br>            &#125;<br>            queue.addLast(element);<br>            System.out.println(<span class="hljs-string">&quot;放入了一个元素&quot;</span>);<br>            notifyAll();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title function_">take</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(queue.size() == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//如果队列为0，就将锁释放，进入等待</span><br>                wait();<br>            &#125;<br>            <span class="hljs-comment">//别的线程可以从这里去take数据</span><br>            fist = queue.pop();<br>            System.out.println(<span class="hljs-string">&quot;弹出一个元素&quot;</span>);<br>            <span class="hljs-comment">//去唤醒当前在等待这个锁的那些线程</span><br>            notifyAll();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> fist;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>线程A获取到了锁，queue对象的monitor计数器+1，并且进入offer方法</p></li><li><p>发现队列满了，就进行等待，释放锁。queue对象的monitor计数器-1，同时将线程A放入wait set中。</p></li><li><p>由于释放了锁，线程B获取了锁，queue对象的monitor计数器+1，进入take方法</p></li><li><p>线程B获取元素，调用notifyAll,将queue对象的monitor的wait set中线程唤醒。</p></li></ol><h2 id="wait与notify注意事项"><a href="#wait与notify注意事项" class="headerlink" title="wait与notify注意事项"></a>wait与notify注意事项</h2><h3 id="1-wait与sleep的区别"><a href="#1-wait与sleep的区别" class="headerlink" title="1. wait与sleep的区别"></a>1. wait与sleep的区别</h3><p>wait会释放锁<br>sleep不会释放锁</p><h3 id="2-wait-与wait-timeout-的区别"><a href="#2-wait-与wait-timeout-的区别" class="headerlink" title="2. wait()与wait(timeout)的区别"></a>2. wait()与wait(timeout)的区别</h3><p>wait()必须有人notify唤醒<br>wait(timeout)，阻塞一段时间，然后自己唤醒，继续争抢锁</p><h3 id="3-notify与notifyAll的区别"><a href="#3-notify与notifyAll的区别" class="headerlink" title="3. notify与notifyAll的区别"></a>3. notify与notifyAll的区别</h3><p>notify唤醒block状态的一个线程<br>notifyAll唤醒block状态的所有线程</p><h3 id="4-其他事项"><a href="#4-其他事项" class="headerlink" title="4. 其他事项"></a>4. 其他事项</h3><ol><li>wait与notify必须在synchronized代码块中使用，因为必须是拥有monitor lock的线程才可以执行</li><li>必须对同一个对象实例进行加锁，wait，notify。这样他们操作的才是同一个对象实例里面的monitor相关的计数器和wait set。</li></ol><h2 id="EditLogDemo"><a href="#EditLogDemo" class="headerlink" title="EditLogDemo"></a>EditLogDemo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FSEditlog</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前递增的txid序列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">txidSeq</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 内存双缓冲区</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">DoubleBuffer</span> <span class="hljs-variable">editLogBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleBuffer</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前是否在将内存缓冲区中的数据刷入磁盘</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Boolean</span> <span class="hljs-variable">isSyncRunning</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前是否有线程正在等待刷新下一批 edits log到磁盘</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Boolean</span> <span class="hljs-variable">isWaitSync</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 同步到磁盘中的最大的txid</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Long</span> <span class="hljs-variable">syncMaxTxid</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每个线程维护自己的变量副本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ThreadLocal&lt;Long&gt; localTxid = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 记录日志</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logEdit</span><span class="hljs-params">(String content)</span>&#123;<br>        <span class="hljs-comment">//这里必须加锁</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            <span class="hljs-comment">//获取全局唯一递增的txid，代表了edits log的序号</span><br>            txidSeq++;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">txid</span> <span class="hljs-operator">=</span> txidSeq;<br>            localTxid.set(txid);<br><br>            <span class="hljs-comment">//构造一个edits log对象</span><br>            <span class="hljs-type">EditLog</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EditLog</span>(txid, content);<br>            <span class="hljs-comment">//将edits log写入内存缓冲中，而不是直接写入磁盘</span><br>            editLogBuffer.write(log);<br>        &#125;<br><br>        logSync();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将内存缓冲中的数据刷入磁盘文件中</span><br><span class="hljs-comment">     * 在这里尝试允许某一个线程一次性将内存缓冲中的数据刷入磁盘文件中</span><br><span class="hljs-comment">     * 相当于实现一个批量将内存缓冲数据刷磁盘的过程</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logSync</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//再次尝试加锁</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            <span class="hljs-comment">//如果当前有人在刷</span><br>            <span class="hljs-keyword">if</span>(isSyncRunning)&#123;<br>                <span class="hljs-comment">//进行一些逻辑判断</span><br>                <span class="hljs-type">Long</span> <span class="hljs-variable">txid</span> <span class="hljs-operator">=</span> localTxid.get();<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    如果有别的线程已经获取到了锁，并且刷入磁盘了，本次线程就不需要处理</span><br><span class="hljs-comment">                    加入某个线程正在吧1 2 3 4 5的数据刷入磁盘，那么此时maxTxid 是 5</span><br><span class="hljs-comment">                    如果另一个线程的txid是3，那么可以直接返回</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-keyword">if</span>(txid &lt;= syncMaxTxid)&#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    但是如果是大于5 的就需要等待5的那个线程执行完</span><br><span class="hljs-comment">                    同时释放锁</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-keyword">if</span>(isWaitSync)&#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                isWaitSync = <span class="hljs-literal">true</span>;<br><br>                <span class="hljs-keyword">while</span> (isSyncRunning)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        wait(<span class="hljs-number">2000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                isWaitSync = <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">//交换两块缓冲区</span><br>            editLogBuffer.setReadyToSync();<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                进行保存当前要同步到磁盘中去的最大txid</span><br><span class="hljs-comment">             */</span><br>            syncMaxTxid = editLogBuffer.getMaxTxid();<br>            <span class="hljs-comment">//设置正在进行同步的标志位</span><br>            isSyncRunning = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//开始同步内存缓冲的数据到磁盘文件里</span><br>        editLogBuffer.flush();<br><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            <span class="hljs-comment">//重置标志位</span><br>            isSyncRunning = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">//唤醒可能正在等待其他同步完的线程</span><br>            notifyAll();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代表了一个edits log</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EditLog</span>&#123;<br><br>        <span class="hljs-type">long</span> txid;<br>        String content;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">EditLog</span><span class="hljs-params">(<span class="hljs-type">long</span> txid, String content)</span> &#123;<br>            <span class="hljs-built_in">this</span>.txid = txid;<br>            <span class="hljs-built_in">this</span>.content = content;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 内存双缓冲</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleBuffer</span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 专门用来承载线程写入edits log</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> LinkedList&lt;EditLog&gt; currentBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">/***</span><br><span class="hljs-comment">         * 专门用来将数据同步到磁盘中去的一块缓冲</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> LinkedList&lt;EditLog&gt; syncBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 将edits log写到内存缓冲里面</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> log</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(EditLog log)</span>&#123;<br>            currentBuffer.add(log);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 交换两块缓冲区，为了同步内存数据到磁盘数据做准备</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReadyToSync</span><span class="hljs-params">()</span>&#123;<br>            LinkedList&lt;EditLog&gt; tmp = currentBuffer;<br>            currentBuffer = syncBuffer;<br>            syncBuffer = tmp;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 将syncBuffer缓冲区中的数据刷入磁盘</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flush</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">for</span> (EditLog editLog : syncBuffer) &#123;<br>                System.out.println(<span class="hljs-string">&quot;将edit log 写入磁盘：&quot;</span> + editLog);<br>            &#125;<br>            syncBuffer.clear();<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获取sync buffer最大的txid</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getMaxTxid</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> syncBuffer.getLast().txid;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>volatile</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/volatile/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/volatile/</url>
    
    <content type="html"><![CDATA[<h2 id="CPU缓存模型"><a href="#CPU缓存模型" class="headerlink" title="CPU缓存模型"></a>CPU缓存模型</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/12966419/1648190481301-50a66364-2d88-458e-819f-23e6bdce8e8f.jpeg"><br>多个线程读取主内存变量，导致性能变差，计算性能变差</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/12966419/1648190514096-b3294322-2399-469d-ad6e-3cd46832211e.jpeg"></p><h2 id="总线加锁机制"><a href="#总线加锁机制" class="headerlink" title="总线加锁机制"></a>总线加锁机制</h2><p>最开始的加锁机制，某个CPU如果要读取一个数据，会通过一个总线，对这个数据加一个锁，其他的CPU就没发去读和写这个数据，只有当这个CPU修改完之后，其他CPU可以读取到最新的数据。</p><p>这个会导致执行的串行化，多个CPU并发运行的时候，效率很差。</p><h2 id="MESI协议-缓存一致性协议"><a href="#MESI协议-缓存一致性协议" class="headerlink" title="MESI协议(缓存一致性协议)"></a>MESI协议(缓存一致性协议)</h2><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>M（Modified）</td><td>这行数据有效，数据被修改了，和内存中的数据不一致，数据只存在于本cache中</td></tr><tr><td>E（Exclusive）</td><td>这行数据有效，数据和内存中的数据一致，数据只存在于本cache中。</td></tr><tr><td>S（Shared）</td><td>这行数据有效，数据和内存中的数据一致，数据存在于很多cache中</td></tr><tr><td>I（Invalid）</td><td>这行数据无效</td></tr></tbody></table><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>基于CPU缓存模型来建立的Java内存模型，只不过Java的内存模型是标准化，屏蔽掉底层不同计算机的区别。<br>线程之间的共享变量存储在主存中，每个线程都有一个私有的工作内存，工作内存中存储了该线程用于读写共享变量的副本。</p><table><thead><tr><th>read</th><th>从主存中读取到的值写入工作内存</th></tr></thead><tbody><tr><td>load</td><td>将主存读取到的值写入工作内存</td></tr><tr><td>use</td><td>从工作内存读取数据来计算</td></tr><tr><td>assign</td><td>将计算好的值重新赋值到工作内存中</td></tr><tr><td>store</td><td>将工作内存数据写入主存</td></tr><tr><td>write</td><td>将store过去的变量赋值给主存中的变量</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/12966419/1648192365033-b280f9d9-7a08-4cd1-87c8-caa3f06ead04.jpeg"></p><h2 id="Java内存模型的并发特点"><a href="#Java内存模型的并发特点" class="headerlink" title="Java内存模型的并发特点"></a>Java内存模型的并发特点</h2><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>不能保证。<br>因为只有主内存中的数据，才是线程共享的区域。</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>不能保证。<br>对于一个操作，比如i++，多个线程同时执行的情况下，最终结果不能保证为2。多个线程在同时read，load为0的情况下，i++变为1，然后assign，stoer，write回去导致主存中的i变为1。</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>不能保证。<br>底层编译器为了提高代码的执行效率，会对代码进行指令重排。这样的话，就会导致我们代码执行是有顺序性问题的。</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>保证可见性，一定程度的有序性</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>添加volatile关键字以后，JVM底层在线程1工作内存计算完数据之后，会向CPU发送一条Lock为前缀的指令，该指令会让线程1工作内存的数据立即刷新到主内存中。通过MESI缓存一致性协议，其他线程同时会嗅探主内存中的数据，一旦发现数据被修改过了，会对工作内存的数据进行失效。这样的话，当线程2再次要使用变量i的数据，发现自己工作内存中的变量i已经失效了，此时就会重新从主内存中加载，就可以看到线程1更新的数据了。</p><h2 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h2><p>编译器、指令器可能对代码重排序，乱排，要守一定的规则，happens-before原则，只要符合happens-before的原则，那么就不能胡乱重排，如果不符合这些规则的话，那就可以自己排序</p><ul><li><strong>程序次序规则</strong></li></ul><p>一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作</p><ul><li><strong>锁定规则</strong></li></ul><p>一个unLock操作先行发生于后面对同一个锁的lock操作</p><ul><li><strong>volatile变量规则</strong></li></ul><p>对一个变量的写操作先行发生于后面对这个变量的读操作，volatile变量写，再是读，必须保证是先写，再读</p><ul><li><strong>传递规则</strong></li></ul><p>如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C</p><ul><li><strong>线程启动规则</strong></li></ul><p>Thread对象的start()方法先行发生于此线程的每个一个动作</p><ul><li><strong>线程中断规则</strong></li></ul><p>对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生</p><ul><li><strong>线程终结规则</strong></li></ul><p>线程中所有的操作都先行发生于线程的终止，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行</p><ul><li><strong>对象终结规则</strong></li></ul><p>一个对象的初始化完成先行发生于他的finalize()方法的开始</p><h2 id="Java屏障"><a href="#Java屏障" class="headerlink" title="Java屏障"></a>Java屏障</h2><ul><li>LoadLoad屏障</li></ul><p>Load1;LoadLoad;Load2，确保Load1数据的装载先鱼Load2后所有装载指令</p><ul><li>StoreStore屏障</li></ul><p>Store1;StoreStore;Store2,确保Store1的数据一定刷回主存，对其他cpu可见，先于Store2以及后续指令</p><ul><li>LoadStore屏障</li></ul><p>Load1;LoadStore;Store2,确保Load1指令的数据装载先于Store2以及后续指令</p><ul><li>StoreLoad屏障</li></ul><p>Store1;StoreLoad;Load2,确保Store1指令的数据一定刷回主存，对其他cpu可见，先于Load2以及后续指令的数据装载</p><h2 id="volatile底层原理"><a href="#volatile底层原理" class="headerlink" title="volatile底层原理"></a>volatile底层原理</h2><p>volatile底层本质是基于一些内存屏障来保证有序性的</p><ol><li><p>volatile的写操作</p><p> Volatile写操作前后，分别会添加storestore内存屏障，storeload内存屏障<br> 这样的话，volatile变量的写操作就不会和前面的写操作，和后面的读操作交换顺序了</p></li><li><p>volatile的读操作</p><p> 在volatile的读操作之后，会添加loadload、loadstore内存屏障<br> 这样的话，volatile的读操作就不会和后面的读写操作交换顺序了</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程基础知识</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="多线程本质"><a href="#多线程本质" class="headerlink" title="多线程本质"></a>多线程本质</h2><p>多线程并发运行的时候，本质是CPU在执行各个线程的代码，一个CPU有时间片算法，在多个线程之间切换。CPU执行每个线程的时间特别短，看起来是多个线程并发在运行。因此多线程的上限也与CPU核数有关。</p><h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><p>ThreadGroup就是线程组，可以将一堆线程加入一个线程组里，将其作为一个整体进行统一的管理和设置。</p><p>在Java里，每个线程都有一个父线程的概念。比如在main线程里创建了一个线程，那么main线程就是其父线程。<br>每个线程都必然属于一个线程组，在默认情况下，你创建一个线程没有指定线程组，那么就会属于父线程的线程组。main线程的线程组就是mian ThreadGroup。</p><p>线程组也有父线程组的概念，如果创建线程组的时候没有指定父线程组，其默认父线程组就是mian线程的线程组。</p><h2 id="基本API"><a href="#基本API" class="headerlink" title="基本API"></a>基本API</h2><p>ThreadGroup</p><table><thead><tr><th>enumerate()</th><th>复制线程组里的线程</th></tr></thead><tbody><tr><td>activeCount()</td><td>统计线程组里活跃的线程</td></tr><tr><td>interrupt()</td><td>打断所有线程</td></tr><tr><td>destroy()</td><td>一次性destroy所有线程</td></tr></tbody></table><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>设置线程优先级理论上可以让优先级高的线程先尽量多的执行。但是实际上需要根据CPU决定。<br>优先级级别为1-10之间。<br>ThreadGroup也可以设置优先级，线程优先级不能大于ThreadGroup的优先级。<br>默认的优先级是5。</p><h2 id="Thread源码"><a href="#Thread源码" class="headerlink" title="Thread源码"></a>Thread源码</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Initializes a Thread.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> g the Thread group</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target the object whose run() method gets called</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name the name of the new Thread</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stackSize the desired stack size for the new thread, or</span><br><span class="hljs-comment">     *        zero to indicate that this parameter is to be ignored.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> acc the AccessControlContext to inherit, or</span><br><span class="hljs-comment">     *            AccessController.getContext() if null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inheritThreadLocals if &#123;<span class="hljs-doctag">@code</span> true&#125;, inherit initial values for</span><br><span class="hljs-comment">     *            inheritable thread-locals from the constructing thread</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ThreadGroup g, Runnable target, String name,</span><br><span class="hljs-params">                      <span class="hljs-type">long</span> stackSize, AccessControlContext acc,</span><br><span class="hljs-params">                      <span class="hljs-type">boolean</span> inheritThreadLocals)</span> &#123;<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;name cannot be null&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.name = name;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> currentThread();<br>        <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">security</span> <span class="hljs-operator">=</span> System.getSecurityManager();<br>        <span class="hljs-keyword">if</span> (g == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">/* Determine if it&#x27;s an applet or not */</span><br><br>            <span class="hljs-comment">/* If there is a security manager, ask the security manager</span><br><span class="hljs-comment">               what to do. */</span><br>            <span class="hljs-keyword">if</span> (security != <span class="hljs-literal">null</span>) &#123;<br>                g = security.getThreadGroup();<br>            &#125;<br><br>            <span class="hljs-comment">/* If the security doesn&#x27;t have a strong opinion of the matter</span><br><span class="hljs-comment">               use the parent thread group. */</span><br>            <span class="hljs-keyword">if</span> (g == <span class="hljs-literal">null</span>) &#123;<br>                g = parent.getThreadGroup();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/* checkAccess regardless of whether or not threadgroup is</span><br><span class="hljs-comment">           explicitly passed in. */</span><br>        g.checkAccess();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Do we have the required permissions?</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (security != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (isCCLOverridden(getClass())) &#123;<br>                security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);<br>            &#125;<br>        &#125;<br><br>        g.addUnstarted();<br><br>        <span class="hljs-built_in">this</span>.group = g;<br>        <span class="hljs-built_in">this</span>.daemon = parent.isDaemon();<br>        <span class="hljs-built_in">this</span>.priority = parent.getPriority();<br>        <span class="hljs-keyword">if</span> (security == <span class="hljs-literal">null</span> || isCCLOverridden(parent.getClass()))<br>            <span class="hljs-built_in">this</span>.contextClassLoader = parent.getContextClassLoader();<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">this</span>.contextClassLoader = parent.contextClassLoader;<br>        <span class="hljs-built_in">this</span>.inheritedAccessControlContext =<br>                acc != <span class="hljs-literal">null</span> ? acc : AccessController.getContext();<br>        <span class="hljs-built_in">this</span>.target = target;<br>        setPriority(priority);<br>        <span class="hljs-keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="hljs-literal">null</span>)<br>            <span class="hljs-built_in">this</span>.inheritableThreadLocals =<br>                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);<br>        <span class="hljs-comment">/* Stash the specified stack size in case the VM cares */</span><br>        <span class="hljs-built_in">this</span>.stackSize = stackSize;<br><br>        <span class="hljs-comment">/* Set thread ID */</span><br>        tid = nextThreadID();<br>    &#125;<br></code></pre></td></tr></table></figure><ol><li>创建线程的就是父线程</li><li>如果没有指定ThreadGroup，那么默认为父线程的ThreadGroup</li><li>demon状态默认是父线程的daemon状态</li><li>优先级默认是父线程的优先级</li><li>如果没有指定线程名，默认是”Thread-0”的格式</li><li>线程id是全局递增的，从1开始</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * This method is not invoked for the main method thread or &quot;system&quot;</span><br><span class="hljs-comment">         * group threads created/set up by the VM. Any new functionality added</span><br><span class="hljs-comment">         * to this method in the future may have to also be added to the VM.</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * A zero status value corresponds to state &quot;NEW&quot;.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (threadStatus != <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalThreadStateException</span>();<br><br>        <span class="hljs-comment">/* Notify the group that this thread is about to be started</span><br><span class="hljs-comment">         * so that it can be added to the group&#x27;s list of threads</span><br><span class="hljs-comment">         * and the group&#x27;s unstarted count can be decremented. */</span><br>        group.add(<span class="hljs-built_in">this</span>);<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">started</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            start0();<br>            started = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (!started) &#123;<br>                    group.threadStartFailed(<span class="hljs-built_in">this</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable ignore) &#123;<br>                <span class="hljs-comment">/* do nothing. If start0 threw a Throwable then</span><br><span class="hljs-comment">                  it will be passed up the call stack */</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start0</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ol><li>一旦启动了线程之后，就不能重新启动和多次调用start方法。因为启动之后threadStatus就是非0状态，此时就不能重新调用。</li><li>启动线程之后，线程就会加入之前处理好的那个线程组中。</li><li>启动一个线程实际上走的native方法，实际启动一个线程。</li><li>一个线程启动之后会执行run()方法</li></ol><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>Thread.sleep()<br>指定等待多少毫秒。</p><p>JDK1.5之后引入TimeUnit类<br>TimeUnit.HOURS.sleep(1)<br>TimeUnit.MINUTES.sleep(5)<br>TimeUnit.SECONDS.sleep(30)<br>TimeUnit.MILLISECONDS.sleep(500)</p><h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><p>yield()方法可以尝试让CPU先执行其他线程，但是具体执行还是看CPU</p><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>main线程里面，如果开启了一个其他线程，这个时候一旦开启了其他线程之后，那么main线程如果对那个线程调用了join方法，那么就会导致main线程阻塞。会等待其他代码的代码逻辑执行结束了，那个线程执行完毕之后，main线程才会继续往下执行。</p><h2 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h2><p>interrupt打断一个线程，就是在修改那个线程里的一个interrupt的标志位，打断他以后，interrupt标志位就会变成true，所以在线程内部，可以根据这个标志位，isInterrupt()来判断标志位状态，是否需要继续运行。并不是打断之后直接终止线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()&#123;<br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>           <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>               <span class="hljs-keyword">if</span>(isInterrupted())&#123;<br>                   System.out.println(<span class="hljs-string">&quot;线程1在阻塞&quot;</span>);<br>               &#125;<span class="hljs-keyword">else</span> &#123;<br>                   System.out.println(<span class="hljs-string">&quot;线程1在执行&quot;</span>);<br>               &#125;<br>           &#125;<br>       &#125;<br>   &#125;;<br>   thread1.start();<br><br>   Thread.sleep(<span class="hljs-number">1000</span>);<br><br>   thread1.interrupt();<br></code></pre></td></tr></table></figure><p>interrupt还可以打断线程休眠状态，使其苏醒。因此可以和sleep组合使用。抛出InterruptException异常，使线程快速退出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        thread1.start();<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        thread1.setShouldRun(<span class="hljs-literal">false</span>);<br>        thread1.interrupt();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">Boolean</span> <span class="hljs-variable">shouldRun</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setShouldRun</span><span class="hljs-params">(Boolean shouldRun)</span> &#123;<br>            <span class="hljs-built_in">this</span>.shouldRun = shouldRun;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span> (shouldRun)&#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   System.out.println(<span class="hljs-string">&quot;线程1正在工作&quot;</span>);<br>                   Thread.sleep(<span class="hljs-number">1000</span>);<br>               &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>                    e.printStackTrace();<br>               &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>实际一个用法：<br>一些核心的工作线程，会涉及一个shutdown方法，在系统关闭的时候进行调用。<br>实际上工作线程在定时调度的时候，执行完就会进行休眠，此时需要尽快停止，就需要interrupt打断休眠。</p></blockquote><h2 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h2><p>让线程进行阻塞，并且获取的释放锁</p><h2 id="notify-x2F-notifyAll"><a href="#notify-x2F-notifyAll" class="headerlink" title="notify&#x2F;notifyAll"></a>notify&#x2F;notifyAll</h2><p>去唤醒当前在等待这个锁的线程，去重新尝试获取锁</p><h2 id="并发编程三个特性"><a href="#并发编程三个特性" class="headerlink" title="并发编程三个特性"></a>并发编程三个特性</h2><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>一个线程对共享变量的修改,另一个线程能够立刻看到。</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>一个不可再被分割的颗粒。原子性指的是一个或多个操作要么全部执行成功要么全部执行失败。</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>程序执行的顺序按照代码的先后顺序执行。</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合</title>
    <link href="/2022/05/14/%E6%BA%90%E7%A0%81/JDK/%E9%9B%86%E5%90%88/"/>
    <url>/2022/05/14/%E6%BA%90%E7%A0%81/JDK/%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * The array buffer into which the elements of the ArrayList are stored.</span><br><span class="hljs-comment">    * The capacity of the ArrayList is the length of this array buffer. Any</span><br><span class="hljs-comment">    * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="hljs-comment">    * will be expanded to DEFAULT_CAPACITY when the first element is added.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">transient</span> Object[] elementData; <span class="hljs-comment">// non-private to simplify nested class access</span><br></code></pre></td></tr></table></figure><p>ArrayList本身底层为数组实现。</p><h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-comment">//扩容机制</span><br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    rangeCheckForAdd(index);<br><br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    <span class="hljs-comment">//数组拷贝使用System拷贝</span><br>    System.arraycopy(elementData, index, elementData, index + <span class="hljs-number">1</span>,<br>                     size - index);<br>    elementData[index] = element;<br>    size++;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">//范围检查</span><br>    rangeCheck(index);<br><br>    <span class="hljs-keyword">return</span> elementData(index);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    rangeCheck(index);<br><br>    modCount++;<br>    <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementData(index);<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> size - index - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>        System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,<br>                         numMoved);<br>    elementData[--size] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// clear to let GC do its work</span><br><br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    modCount++;<br><br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        grow(minCapacity);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-comment">//扩容 1/2</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>缺点</p><ul><li>当数组打到临界值，就会进行数组扩容+元素拷贝。数组进行这种操作相对慢一点</li><li>在数组中间加一个元素，会导致数组元素全部往后位移</li></ul><p>优点</p><ul><li><p>数组实现随机读的效率很高</p><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><h2 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Pointer to first node.</span><br><span class="hljs-comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span><br><span class="hljs-comment"> *            (first.prev == null &amp;&amp; first.item != null)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Node&lt;E&gt; first;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Pointer to last node.</span><br><span class="hljs-comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span><br><span class="hljs-comment"> *            (last.next == null &amp;&amp; last.item != null)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Node&lt;E&gt; last;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Constructs an empty list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedList</span><span class="hljs-params">()</span> &#123;<br>&#125; <br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-built_in">this</span>.item = element;<br>        <span class="hljs-built_in">this</span>.next = next;<br>        <span class="hljs-built_in">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>记录了头尾指针的双向链表</p><h2 id="核心方法-1"><a href="#核心方法-1" class="headerlink" title="核心方法"></a>核心方法</h2><h3 id="add-1"><a href="#add-1" class="headerlink" title="add"></a>add</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">linkLast</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(l, e, <span class="hljs-literal">null</span>);<br>    last = newNode;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="get-1"><a href="#get-1" class="headerlink" title="get"></a>get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">Node&lt;E&gt; <span class="hljs-title function_">node</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// assert isElementIndex(index);</span><br><br>    <span class="hljs-keyword">if</span> (index &lt; (size &gt;&gt; <span class="hljs-number">1</span>)) &#123;<br>        Node&lt;E&gt; x = first;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++)<br>            x = x.next;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;E&gt; x = last;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">1</span>; i &gt; index; i--)<br>            x = x.prev;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据索引位置决定从尾部遍历还是头部遍历</p><h3 id="remove-1"><a href="#remove-1" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    checkElementIndex(index);<br>    <span class="hljs-keyword">return</span> unlink(node(index));<br>&#125;<br><br>E <span class="hljs-title function_">unlink</span><span class="hljs-params">(Node&lt;E&gt; x)</span> &#123;<br>    <span class="hljs-comment">// assert x != null;</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">E</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> x.item;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; next = x.next;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; prev = x.prev;<br><br>    <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<br>        first = next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        prev.next = next;<br>        x.prev = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>) &#123;<br>        last = prev;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        next.prev = prev;<br>        x.next = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    x.item = <span class="hljs-literal">null</span>;<br>    size--;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>&#125;<br></code></pre></td></tr></table></figure><p>先获取索引位置的元素，将元素指针直接移除。</p><h2 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h2><p>缺点</p></li><li><p>不适合随机位置读取</p></li></ul><p>优点</p><ul><li>插入删除节点很快</li></ul><h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><h2 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Vector</span>&lt;E&gt; &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector</span>&lt;E&gt;<br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable<br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The array buffer into which the components of the vector are</span><br><span class="hljs-comment">     * stored. The capacity of the vector is the length of this array buffer,</span><br><span class="hljs-comment">     * and is at least large enough to contain all the vector&#x27;s elements.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;Any array elements following the last element in the Vector are null.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@serial</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> Object[] elementData;<br>&#125;<br></code></pre></td></tr></table></figure><p>Stack继承了Vector，底层还是使用数组。</p><h2 id="核心方法-2"><a href="#核心方法-2" class="headerlink" title="核心方法"></a>核心方法</h2><h3 id="扩容-1"><a href="#扩容-1" class="headerlink" title="扩容"></a>扩容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="hljs-number">0</span>) ?<br>                                     capacityIncrement : oldCapacity);<br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>Vector每次扩容默认是2倍，默认情况下是直接扩容两倍，2倍</p><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span><br><span class="hljs-comment"> * (16) and the default load factor (0.75).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="hljs-comment">// all other fields defaulted</span><br>&#125;<br></code></pre></td></tr></table></figure><p>JDK 1.8以后，hashmap的数据结构是，数组 + 链表 + 红黑树<br>在最开始的时候，是存入数组，但是hash冲突之后，就会挂成链表，然后链表长度大于8以后，就将链表转为红黑树。</p><h2 id="核心方法-3"><a href="#核心方法-3" class="headerlink" title="核心方法"></a>核心方法</h2><h3 id="核心参数"><a href="#核心参数" class="headerlink" title="核心参数"></a>核心参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * The default initial capacity - MUST be a power of two.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * The maximum capacity, used if a higher value is implicitly specified</span><br><span class="hljs-comment">   * by either of the constructors with arguments.</span><br><span class="hljs-comment">   * MUST be a power of two &lt;= 1&lt;&lt;30.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAXIMUM_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * The load factor used when none specified in constructor.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;<br>      <span class="hljs-keyword">final</span> K key;<br>      V value;<br>      Node&lt;K,V&gt; next;<br><br>      Node(<span class="hljs-type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;<br>          <span class="hljs-built_in">this</span>.hash = hash;<br>          <span class="hljs-built_in">this</span>.key = key;<br>          <span class="hljs-built_in">this</span>.value = value;<br>          <span class="hljs-built_in">this</span>.next = next;<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * The table, initialized on first use, and resized as</span><br><span class="hljs-comment">   * necessary. When allocated, length is always a power of two.</span><br><span class="hljs-comment">   * (We also tolerate length zero in some operations to allow</span><br><span class="hljs-comment">   * bootstrapping mechanics that are currently not needed.)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * The number of key-value mappings contained in this map.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> size;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * The next size value at which to resize (capacity * load factor).</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@serial</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// (The javadoc description is true upon serialization.</span><br>  <span class="hljs-comment">// Additionally, if the table array has not been allocated, this</span><br>  <span class="hljs-comment">// field holds the initial array capacity, or zero signifying</span><br>  <span class="hljs-comment">// DEFAULT_INITIAL_CAPACITY.)</span><br>  <span class="hljs-type">int</span> threshold;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * The load factor for the hash table.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@serial</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> loadFactor;<br></code></pre></td></tr></table></figure><ul><li>DEFAULT_INITIAL_CAPACITY</li></ul><p>数组默认初始大小为16</p><ul><li>DEFAULT_LOAD_FACTOR</li></ul><p>负载因子为0.75，当元素个数达到数组容量*负载因子的时候，就会进行扩容。</p><ul><li>Node</li></ul><p>内部节点的数据结构</p><ul><li>table</li></ul><p>存储的数组</p><ul><li>size</li></ul><p>数组的大小</p><ul><li>threshold</li></ul><p>临界值。capacity * load factor<br>TODO 疑问</p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>将高16位和低16位进行一个异或运算。<br>保证在hash值的低16位里面，可以同时保留高16位以及低16位的特征，减少hash冲突</p><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Implements Map.put and related methods.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> hash hash for key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key the key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value the value to put</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> evict if false, the table is in creation mode.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> previous value, or null if none</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//hashCode,key,value,false,true</span><br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        i = (n - 1) &amp; hash</span><br><span class="hljs-comment">        hashmap优化数组初始值以及未来每次扩容的值都是2的n次方</span><br><span class="hljs-comment">        就可以保证hssh$数组.length实现取模的效果</span><br><span class="hljs-comment">        也就是通过(n - 1) &amp; hash将任意一个hash值定位到数组的某个index里</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        <span class="hljs-comment">//第一个分支：没有hash冲突的情况，直接挂在新node</span><br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-comment">//key完全一样进行val替换</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-comment">//key不一样，并且节点已经转为树节点，进行红黑树添加值</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-comment">//key不一样，并且节点还未转为红黑树，仅仅进行链表添加</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//变量链表</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">//此时的链表达到临界值，需要判断是否进行红黑树转变</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        <span class="hljs-comment">//数组扩容</span><br>        resize();<br>    <span class="hljs-comment">//扩展接口</span><br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Replaces all linked nodes in bin at index for given hash unless</span><br><span class="hljs-comment"> * table is too small, in which case resizes instead.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">treeifyBin</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> hash)</span> &#123;<br>    <span class="hljs-type">int</span> n, index; Node&lt;K,V&gt; e;<br>    <span class="hljs-comment">//转为树的条件还需要数组大小大于等于64</span><br>    <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<br>        resize();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br>        TreeNode&lt;K,V&gt; hd = <span class="hljs-literal">null</span>, tl = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">if</span> (tl == <span class="hljs-literal">null</span>)<br>                hd = p;<br>            <span class="hljs-keyword">else</span> &#123;<br>                p.prev = tl;<br>                tl.next = p;<br>            &#125;<br>            tl = p;<br>        &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> ((tab[index] = hd) != <span class="hljs-literal">null</span>)<br>            hd.treeify(tab);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>hash寻址 ： i &#x3D; (n - 1) &amp; hash</p><h3 id="扩容-2"><a href="#扩容-2" class="headerlink" title="扩容"></a>扩容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Initializes or doubles table size.  If null, allocates in</span><br><span class="hljs-comment"> * accord with initial capacity target held in field threshold.</span><br><span class="hljs-comment"> * Otherwise, because we are using power-of-two expansion, the</span><br><span class="hljs-comment"> * elements from each bin must either stay at same index, or move</span><br><span class="hljs-comment"> * with a power of two offset in the new table.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the table</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<br>    <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        &#125;<br>        <span class="hljs-comment">//newCap = oldCap &lt;&lt; 1直接进行2倍扩容</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>        newCap = oldThr;<br>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>        newCap = DEFAULT_INITIAL_CAPACITY;<br>        newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?<br>                  (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>    &#125;<br>    threshold = newThr;<br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap];<br>    table = newTab;<br>    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            扩容后将原本的节点重新进行hash计算放入新的table</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>            Node&lt;K,V&gt; e;<br>            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-literal">null</span>) &#123;<br>                oldTab[j] = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-literal">null</span>)<br>                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-built_in">this</span>, newTab, j, oldCap);<br>                <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span><br>                    Node&lt;K,V&gt; loHead = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;<br>                    Node&lt;K,V&gt; hiHead = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;<br>                    Node&lt;K,V&gt; next;<br>                    <span class="hljs-keyword">do</span> &#123;<br>                        next = e.next;<br>                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-literal">null</span>)<br>                                loHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                loTail.next = e;<br>                            loTail = e;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-literal">null</span>)<br>                                hiHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                hiTail.next = e;<br>                            hiTail = e;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-literal">null</span>) &#123;<br>                        loTail.next = <span class="hljs-literal">null</span>;<br>                        newTab[j] = loHead;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-literal">null</span>) &#123;<br>                        hiTail.next = <span class="hljs-literal">null</span>;<br>                        newTab[j + oldCap] = hiHead;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newTab;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h1><h2 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;K,V&gt;<br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;K,V&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;<br>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>.Node&lt;K,V&gt; &#123;<br>        Entry&lt;K,V&gt; before, after;<br>        Entry(<span class="hljs-type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;<br>            <span class="hljs-built_in">super</span>(hash, key, value, next);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The head (eldest) of the doubly linked list.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The tail (youngest) of the doubly linked list.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;<br>&#125;<br></code></pre></td></tr></table></figure><p>在hashMap的基础上维护了一份双向链表<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1649580111665-c39c165d-b2cf-40cc-a82b-225e25586f06.png#clientId=u27f12d00-391c-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc4a9e841&margin=%5Bobject%20Object%5D&name=image.png&originHeight=460&originWidth=920&originalType=url&ratio=1&rotation=0&showTitle=false&size=91090&status=done&style=none&taskId=uc2bb016a-4319-46c3-939c-b1e1ec4278f&title=" alt="image.png"></p><h1 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h1><h2 id="数据结构-5"><a href="#数据结构-5" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>    K key;<br>    V value;<br>    Entry&lt;K,V&gt; left;<br>    Entry&lt;K,V&gt; right;<br>    Entry&lt;K,V&gt; parent;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> BLACK;<br>&#125;<br></code></pre></td></tr></table></figure><p>底层直接基于红黑树的数据结构，按照key的自然顺序排序。</p><h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h1><p>底层直接基于HashMap的key实现。</p><h1 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h1><p>底层直接基于LinkedHashMap的key实现。</p><h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h1><p>底层直接基于TreeMap的key实现。</p><h1 id="fail-fast机制"><a href="#fail-fast机制" class="headerlink" title="fail fast机制"></a>fail fast机制</h1><p>ConcurrentModificationException，并发修改的异常，这个机制就叫做fail fast。</p><p>modCount用来实现fail fast机制。只要集合被修改了，modCount就会自增。<br>java集合包下的类，都是非线程安全的，所以说里面都设计了针对并发修改集合的问题</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zuul</title>
    <link href="/2022/05/13/%E6%BA%90%E7%A0%81/zuul/zuul/"/>
    <url>/2022/05/13/%E6%BA%90%E7%A0%81/zuul/zuul/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>zuul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud时效分析</title>
    <link href="/2022/05/12/%E6%BA%90%E7%A0%81/SpringCloud/SpringCloud%E6%97%B6%E6%95%88%E5%88%86%E6%9E%90/"/>
    <url>/2022/05/12/%E6%BA%90%E7%A0%81/SpringCloud/SpringCloud%E6%97%B6%E6%95%88%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一、服务注册中心"><a href="#一、服务注册中心" class="headerlink" title="一、服务注册中心"></a>一、服务注册中心</h1><h2 id="1-1-eureka-server的请求压力"><a href="#1-1-eureka-server的请求压力" class="headerlink" title="1.1 eureka server的请求压力"></a>1.1 eureka server的请求压力</h2><p>假设eureka server是双机部署，然后eureka server两个机器之间会进行注册，完成eureka server集群的识别和构造。eureka server的设计原则，是纯粹基于自己内存设计。<br>每一台eureka server机器，假设配置4核8G，部署eureka server每秒接收几百请求问题不大。<br>eureka server机器的压力来自于eureka client。eureka client每30s进行一次心跳请求，假设有100个服务，每个服务部署2个机器，就200个服务实例。30s可以接收200个心跳。每秒大概8-10个。大概使用此方法进行估算qps和服务压力。</p><h2 id="1-2-服务注册的时效性"><a href="#1-2-服务注册的时效性" class="headerlink" title="1.2 服务注册的时效性"></a>1.2 服务注册的时效性</h2><p>在spring cloud环境下，eureka client是在<code>spring-cloud-netflix-eureka-client</code>里面，会自动初始化一个DiscoveryClient，并且还有一个额外的注册类EurekaServiceRegistry。这个类负责在服务启动的时候，立马向eureka server发起注册请求。<br><code>spring-cloud-netflix-eureka-server</code>工程，实际上在启动的时候，就会完成eureka-server的初始化的流程，然后就让eureka core基于了jersey来提供了一些restful的http接口，供eureka client来访问和请求<br><code>eureka-core</code>工程里，resources包下，有一个ApplicationResource，里面有个addInstance()方法，是负责接收服务注册的请求</p><p>**服务注册的时效性应当是毫秒级。 **</p><p>验证方式：</p><ol><li>启动eureka server，启动的时候会在addInstance里面会先收到来自自身的注册请求，虽然不会进行注册。因为eureka server本身也是一个eureka client。</li><li>启动ServerA。在EurekaServiceRegistry先初始化，然后就会向eureka server进行注册。此处进行了代理，需要去真正请求的地方即DiscoveryCLient.register()中。</li><li>在client中发完请求会发现，直接在server中接收到注册请求。</li></ol><h2 id="1-3-服务发现的时效性"><a href="#1-3-服务发现的时效性" class="headerlink" title="1.3 服务发现的时效性"></a>1.3 服务发现的时效性</h2><h3 id="服务刚启动时的时效性"><a href="#服务刚启动时的时效性" class="headerlink" title="服务刚启动时的时效性"></a>服务刚启动时的时效性</h3><p>验证服务刚启动时，发现启发所有服务的时效性。</p><blockquote><p>场景：<br>先启动一个服务A的一台机器，然后启动服务B。服务B是依赖于服务A的。因此在源码中，服务B获取注册表的时候，是否可以得到服务A信息.</p></blockquote><p>服务B在启动的时候，会直接去抓取全量注册表，发送一个http请求到eureka server。<br><code>[Application [name=SERVICEA, isDirty=true, instances=[com.netflix.appinfo.InstanceInfo@a7d576d6], shuffledInstances=null, instancesMap=&#123;localhost:ServiceA:8080=com.netflix.appinfo.InstanceInfo@a7d576d6&#125;]]</code></p><p>服务刚启动的时候，立马发现其他所有服务的时效性是毫秒级。立马会发送一个请求，获取所有的注册表。</p><h3 id="获取增量的时效性"><a href="#获取增量的时效性" class="headerlink" title="获取增量的时效性"></a>获取增量的时效性</h3><p>&#x2F;&#x2F;TODO 服务注册的时候会重新清理ReadWriteCacheMap读写缓存？</p><ol><li>最开始只有服务A进行服务注册，注册表、ReadWriteCacheMap、ReadOnlyCacheMap依次复制服务A的实例信息。</li><li>服务B启动，全量拉取注册表的时候，会按ReadOnlyCacheMap、ReadWriteCacheMap、注册表的顺序获取注册表。</li><li>服务A的第二个实例启动。注册表中直接增加。然后ReadWriteCacheMap会清除缓存</li><li>服务B的30s定时拉取增量注册表，会从ReadOnlyCacheMap获取，而ReadOnlyCacheMap与ReadWriteCacheMap定时同步也需要30s的时间。因此会有两种情况<ol><li>ReadOnlyCacheMap未同步，使用过期数据给服务B获取。此时服务B的注册表会在下一轮更新为最新</li><li>ReadOnlyCacheMap已同步，服务B的注册表在此轮更新为最新</li></ol></li></ol><p>eureka服务发现是分钟级的时效性。<br>一般服务发现是在服务进行扩容的时候，扩容的时候1分钟是可以接收的</p><h2 id="1-4-服务心跳间隔"><a href="#1-4-服务心跳间隔" class="headerlink" title="1.4 服务心跳间隔"></a>1.4 服务心跳间隔</h2><p>任何服务在启动一段时间后，都会定时发送心跳通知，通知eureka server自己是存活状态。</p><p><code>spring-cloud-netflix-eureka-client</code>工程中<code>EurekaInstanceConfigBean</code>配置了默认发送心跳的时间30s。</p><p>eureka.client.leaseRenewalIntervalInSeconds &#x3D; 30</p><h2 id="1-5-服务故障自我感知的时效性"><a href="#1-5-服务故障自我感知的时效性" class="headerlink" title="1.5 服务故障自我感知的时效性"></a>1.5 服务故障自我感知的时效性</h2><p>在eureka server中，每隔60s执行一次evict task，去判断一下当前所有的服务实例，是否有服务实例出现故障。</p><p>eureka.server.evictionIntervalTimerInMs &#x3D; 60 * 1000</p><ol><li>获取一个补偿时间，为了避免EvictTask两次调度的时间超过了设置的60s</li><li>遍历注册表中所有的服务实例，然后调用Lease的isExpire方法，判断当前这个服务实例的租约是否到期。如果是故障的服务实例就放入一个列表。入股上次的心跳到现在间隔90s*2，3分钟，才会任务是故障了，</li><li>2个缓存map的同步误差30s，以及服务增量30s拉取一次。</li><li>以上时间合计最大为5分钟。</li></ol><p><strong>服务B感知服务A那台机器宕机了，时效性在5分钟以内，起码三四分钟</strong></p><h2 id="1-6-服务正常下线的时效性"><a href="#1-6-服务正常下线的时效性" class="headerlink" title="1.6 服务正常下线的时效性"></a>1.6 服务正常下线的时效性</h2><p>如果服务正常下线，执行DiscoveryClient的shutDown方法，此时其他服务感知到这个服务实例下线也是一分钟内</p><p>2个缓存map同步30s+服务拉取30s</p><h2 id="1-7-eureka-server自我保护的稳定性"><a href="#1-7-eureka-server自我保护的稳定性" class="headerlink" title="1.7 eureka server自我保护的稳定性"></a>1.7 eureka server自我保护的稳定性</h2><p>由于自我保护机制的代码中，期望心跳都是按照30s一次计算，因此不可以改变心跳时间配置。</p><p>自我保护机制的计算也统计不完全(缺少动作)，存在bug。因此不要启用此功能在线上。</p><h2 id="1-8-eureka-server集群的负载均衡"><a href="#1-8-eureka-server集群的负载均衡" class="headerlink" title="1.8 eureka server集群的负载均衡"></a>1.8 eureka server集群的负载均衡</h2><p>探究在eureka server集群环境中，各个服务注册或者发送心跳，是如何请求eureka server集群的。</p><ol><li>第一次注册和后序心跳都是走的8761的机器，推断是根据application.yml中配置的server集群第一个地址。</li><li>将8761停掉，然后观察服务心跳请求。发现在重试几次后，就会去请求8762的机器</li><li>重新启动8761，在观察后序心跳请求。发现始终请求8762的机器。</li></ol><p>结论：<strong>在client端会配置eureka server列表，配置的第一个就会优先访问。如果那个server宕机了，在重试之后会访问其他的eureka server。并且后续都是访问后边的那个server</strong></p><h2 id="1-9-eureka-server集群同步的时效性"><a href="#1-9-eureka-server集群同步的时效性" class="headerlink" title="1.9 eureka server集群同步的时效性"></a>1.9 eureka server集群同步的时效性</h2><p>eureka server集群环境中，其中一个机器接收到请求，之后会将请求转发给其他所有的机器。比如2个机器8761和8762,8761会将8762作为自己的peer nodes，在8761接收到请求之后，会发给8762。</p><ol><li>在接收到请求之后，会将集群数据同步任务放入acceptorQueue中，由AcceptorRunner后台线程处理，间隔10ms。</li><li>queue中会每隔500ms将注册、心跳、下线打包成batch一个批次。</li></ol><p><strong>eureka server集群同步的时效性，基本上是在1s内，几百毫秒都是正常的</strong></p><h1 id="二、服务调用"><a href="#二、服务调用" class="headerlink" title="二、服务调用"></a>二、服务调用</h1><p>ribbon + feign，主要是面向feign来做，ribbon作为feign底层依赖的机制来实现。</p><h2 id="2-1-ribbon-eureka服务发现与故障感知的时效性"><a href="#2-1-ribbon-eureka服务发现与故障感知的时效性" class="headerlink" title="2.1 ribbon + eureka服务发现与故障感知的时效性"></a>2.1 ribbon + eureka服务发现与故障感知的时效性</h2><p>eureka client感知其他服务上线了一个新的服务实例的时间，在一分钟内。eureka client刚知道其他服务实例宕机，在五分钟以内。</p><p>假如服务A访问服务B，服务B在一开始就一个机器。</p><p>某天服务B进行扩容，新增了一个机器。此时服务A本地的eureka client在一分钟感知到新增了一个服务B。ribbon的PollingServerListUpdater刚好是30s去刷新本地的eureka client的注册表到ribbon内部去。<br>也就是<strong>ribbon感知服务增加机器在1-2分钟之间。</strong></p><p><strong>同理感知服务故障在5-6分钟之间</strong></p><h2 id="2-2-ribbon的负载均衡算法"><a href="#2-2-ribbon的负载均衡算法" class="headerlink" title="2.2 ribbon的负载均衡算法"></a>2.2 ribbon的负载均衡算法</h2><p>在spring cloud环境下，使用ZoneAwareLoadBalancer机房感知负载均衡器。</p><p>如果多机房部署的话，比如在上海和北京，各部署了一部分机器在一个机房里。一个系统中，购物车有10个服务，库存有10个服务。在北京机房里，购物车服务放了5台机器，库存服务放了5台机器；在上海机房里，购物车服务也是5台机器，库存服务也是5台机器。</p><p>然后ZoneAwareLoadBalancer，比如说北京机房里的购物车服务，现在要访问库存服务，优先是同机房访问，北京机房的机器，尽可能就是优先访问自己北京机房里的库存服务的5台机器</p><p>那么就是在北京机房的库存服务的5台机器中进行负载均衡。</p><p>在不考虑机房的情况下，直接是使用普通的轮询算法。</p><h2 id="2-3-feign-ribbon的服务调用的超时和重试"><a href="#2-3-feign-ribbon的服务调用的超时和重试" class="headerlink" title="2.3 feign+ribbon的服务调用的超时和重试"></a>2.3 feign+ribbon的服务调用的超时和重试</h2><p>比如库存服务有2台机器，其中一台机器故障宕机了，如果要让依赖库存服务的购物车服务感知到，可能需要几分钟的时间，三四分钟，五六分钟，都有可能。</p><p>比如说在这几分钟的时间里面，ribbon内部的保存的库存服务的server list，还是2台机器，此时不断的请求过来，ribbon负载均衡算法还是会不断的将请求流量分发给库存服务已经宕机的那台机器。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs java">ribbon:<br># 连接一台机器的超时时间<br>ConnectTimeout: <span class="hljs-number">1000</span>     <br>    # 向一台机器发起请求的时间<br>ReadTimeout: <span class="hljs-number">1000</span><br>    # 是否所有操作异常开启重试<br>OkToRetryOnAllOperations: <span class="hljs-literal">true</span><br>    # 同一实例最大重试次数，不包括首次调用<br>MaxAutoRetries: <span class="hljs-number">1</span><br>    # 重试其他实例的最大重试次数，不包括首次所选的server<br>MaxAutoRetriesNextServer: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h1 id="三、服务网关"><a href="#三、服务网关" class="headerlink" title="三、服务网关"></a>三、服务网关</h1><h2 id="3-1-ribbon预加载"><a href="#3-1-ribbon预加载" class="headerlink" title="3.1 ribbon预加载"></a>3.1 ribbon预加载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">zuul:<br>ribbon:<br>eager-load:<br>enabled: <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><h2 id="3-2-zuul-ribbon-eureka感知服务上线和故障的时效性"><a href="#3-2-zuul-ribbon-eureka感知服务上线和故障的时效性" class="headerlink" title="3.2 zuul+ribbon+eureka感知服务上线和故障的时效性"></a>3.2 zuul+ribbon+eureka感知服务上线和故障的时效性</h2><p>zuul感知服务上线和ribbon一样，在1-2分钟之间。</p><p>感知服务宕机也是在5-6分钟。</p><p>假如某个服务宕机了，zuul由于整合了hystrix，hystrix会感知请求失败，直接走hystrix的降级逻辑。</p><h2 id="3-3-请求超时和重试"><a href="#3-3-请求超时和重试" class="headerlink" title="3.3 请求超时和重试"></a>3.3 请求超时和重试</h2><p>如果某个服务实例突然挂了，zuul在默认情况下无法处理这种情况。zuul会打印error日志，并返回一段异常的json串给前端。<br>默认情况下虽然使用了hystrix，但是没有降级策略，没办法做任何处理，只能把异常打印出来。因此需要设置最基本的重试策略。</p><p>zuul使用了hystrix+ribbon，因此超时需要考虑hystrix和ribbon，并且hystrix的超时要考虑ribbon的重试次数和单次超时时间。</p><p>hystrix整合了ribbon，因此hystrix的超时时间必须大于ribbon的超时时间，否则如果hystrix设置了超时1s,ribbon设置的市场是2s，那么ribbon其实还没超时，hystrix就显示超时了。<br><strong>hystrix的超时时长最好远大于ribbon超时时长，超时和重试都尽量以ribbon为主。</strong></p><p>hystrix的超时时间计算公式：<br>(ribbon.ConnetTimeout + ribbon.ReadTimeout) * (ribbon.MaxAutoRetries + 1) * (ribbon.MaxAutoRetriesNextServer + 1)</p><p>如果不配置ribbon的超时时间，默认的hystrix超时时间是4000ms。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.retry&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-retry&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br><br>zuul:<br>  retryable: <span class="hljs-literal">true</span><br><br>ribbon:<br>  ReadTimeout:<span class="hljs-number">1000</span><br>  ConnectTimeout:<span class="hljs-number">1000</span><br>  MaxAutoRetries:<span class="hljs-number">1</span><br>  MaxAutoRetriesNextServer:<span class="hljs-number">1</span><br><br>hystrix:<br>  command:<br>    <span class="hljs-keyword">default</span>:<br>      execution:<br>        isolation:<br>          thread:<br>            timeoutInMilliseconds: <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>正常情况下是用的：RibbonLoadBalancingHttpClient<br>但是如果将zuul.retrayable设置为true之后：RetryableRibbonLoadBalancingHttpClient</p><h1 id="四、整体流程图"><a href="#四、整体流程图" class="headerlink" title="四、整体流程图"></a>四、整体流程图</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12966419/1636558702891-1e9dd217-0a55-4319-aefc-17132f195395.png#clientId=u606da3d1-12b4-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=u9a898d79&margin=%5Bobject%20Object%5D&name=%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%94%B9%E9%80%A0%E4%B8%80%E6%9C%9F%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1%2810%29.png&originHeight=680&originWidth=1843&originalType=binary&ratio=1&rotation=0&showTitle=false&size=117241&status=done&style=none&taskId=u518509ac-1328-492a-88d3-520619b4b4f&title=" alt="电商系统微服务架构改造一期的详细设计(10).png"></p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring日志体系</title>
    <link href="/2022/05/11/%E6%BA%90%E7%A0%81/Spring/Spring%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB/"/>
    <url>/2022/05/11/%E6%BA%90%E7%A0%81/Spring/Spring%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring源码环境搭建</title>
    <link href="/2022/05/11/%E6%BA%90%E7%A0%81/Spring/Spring%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/05/11/%E6%BA%90%E7%A0%81/Spring/Spring%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Spring源码编译"><a href="#一、Spring源码编译" class="headerlink" title="一、Spring源码编译"></a>一、Spring源码编译</h1><p><a href="https://github.com/spring-projects/spring-framework">Spring-github</a><br>源码阅读思路</p><ol><li>从github上直接fork源码</li><li>在需要阅读的分支new一个自己的read分支</li><li>从自己的仓库分支下载到本地</li><li>后续笔记可以直接在源码上整理，push到自己分支</li></ol><h2 id="1-idea调整"><a href="#1-idea调整" class="headerlink" title="1. idea调整"></a>1. idea调整</h2><p>修改Gradle中的版本，使用IDEA<br>IDEA对源码编译做了一定处理<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12966419/1639222713087-73cba074-0b20-46b4-b881-dea5e1b1af8d.png#clientId=u5f8b2ec8-9482-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=259&id=ua8ff39a2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=259&originWidth=717&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19318&status=done&style=none&taskId=u363fed9a-2851-49bb-b12c-e2ae88c3b7f&title=&width=717" alt="image.png"></p><h2 id="2-模块创建"><a href="#2-模块创建" class="headerlink" title="2.  模块创建"></a>2.  模块创建</h2><p>在Spring项目中创建自己模块<code>spring-example</code>，并且编译跑通context获取bean</p><p>遇到的问题：</p><ul><li>kotlin的allWarningsAsErrors</li></ul><p>在build.gradle中找到allWarningsAsErrors选项，注释。</p><ul><li>core中的bean缺失</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12966419/1639223145139-8ca6f44b-a621-401b-98a0-39254bdc9dfb.png#clientId=u5f8b2ec8-9482-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=781&id=ue3828c5d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=781&originWidth=490&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45110&status=done&style=none&taskId=uc3f8f284-63e4-467b-8fb6-583cfa5c762&title=&width=490" alt="image.png"><br>运行这两个task</p><ul><li>XXXbean缺失</li></ul><p>其实在项目中存在此bean，但是却又提示此bean缺失。那么就在对应子项目中运行一遍test中的测试类(利用测试类启动需要初始化环境的原理)</p><h2 id="3-测试模块"><a href="#3-测试模块" class="headerlink" title="3. 测试模块"></a>3. 测试模块</h2><ol><li>在模块中引入此项目的context依赖<code>optional(project(&quot;:spring-context&quot;))</code></li><li>创建测试bean，在main方法中手动注入bean，并且通过context打印bean</li></ol><p>通过此步骤跑通前置准备工作。</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ribbon</title>
    <link href="/2022/05/10/%E6%BA%90%E7%A0%81/ribbon/ribbon/"/>
    <url>/2022/05/10/%E6%BA%90%E7%A0%81/ribbon/ribbon/</url>
    
    <content type="html"><![CDATA[<h1 id="一、寻找ribbon入口"><a href="#一、寻找ribbon入口" class="headerlink" title="一、寻找ribbon入口"></a>一、寻找ribbon入口</h1><p>ribbon初探，在RestTemplate用@LoadBalance注解标记，即可以使用负载均衡器进行服务调用。</p><p><strong>从LoadBalance入手</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/12966419/1635062334728-cef477c3-0772-4103-b939-643a95648fbd.png#clientId=u6c2c0c39-a399-4&from=paste&height=361&id=u2d477e93&margin=%5Bobject%20Object%5D&name=image.png&originHeight=361&originWidth=850&originalType=binary&ratio=1&size=66150&status=done&style=none&taskId=u04cd279e-e875-443f-bd25-1a1ee081343&width=850" alt="image.png"><br>发现LoadBalance是spring-cloud-commons项目中的注解。<br>spring如果和其他技术整合，特点是一定会有一个XXAutoConfiguration，去初始化整合技术关键类<br>从loadbalance包中寻找到两个配置文件<code>AsyncLoadBalancerAutoConfiguration</code>和 <code>LoadBalancerAutoConfiguration</code>，推测Async为后者的拓展，名字中看出是用于异步负载均衡</p><p><strong>LoadBalancerAutoConfiguration</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnClass(RestTemplate.class)</span><br><span class="hljs-meta">@ConditionalOnBean(LoadBalancerClient.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(LoadBalancerRetryProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoadBalancerAutoConfiguration</span> &#123;<br><br><span class="hljs-meta">@LoadBalanced</span><br><span class="hljs-meta">@Autowired(required = false)</span><br><span class="hljs-keyword">private</span> List&lt;RestTemplate&gt; restTemplates = Collections.emptyList();<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SmartInitializingSingleton <span class="hljs-title function_">loadBalancedRestTemplateInitializer</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-keyword">final</span> List&lt;RestTemplateCustomizer&gt; customizers)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartInitializingSingleton</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterSingletonsInstantiated</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (RestTemplate restTemplate : LoadBalancerAutoConfiguration.<span class="hljs-built_in">this</span>.restTemplates) &#123;<br><span class="hljs-keyword">for</span> (RestTemplateCustomizer customizer : customizers) &#123;<br>customizer.customize(restTemplate);<br>&#125;<br>&#125;<br>&#125;<br>&#125;;<br>&#125;<br><br><span class="hljs-meta">@Autowired(required = false)</span><br><span class="hljs-keyword">private</span> List&lt;LoadBalancerRequestTransformer&gt; transformers = Collections.emptyList();<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> LoadBalancerRequestFactory <span class="hljs-title function_">loadBalancerRequestFactory</span><span class="hljs-params">(</span><br><span class="hljs-params">LoadBalancerClient loadBalancerClient)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadBalancerRequestFactory</span>(loadBalancerClient, transformers);<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnMissingClass(&quot;org.springframework.retry.support.RetryTemplate&quot;)</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoadBalancerInterceptorConfig</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> LoadBalancerInterceptor <span class="hljs-title function_">ribbonInterceptor</span><span class="hljs-params">(</span><br><span class="hljs-params">LoadBalancerClient loadBalancerClient,</span><br><span class="hljs-params">LoadBalancerRequestFactory requestFactory)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadBalancerInterceptor</span>(loadBalancerClient, requestFactory);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> RestTemplateCustomizer <span class="hljs-title function_">restTemplateCustomizer</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-keyword">final</span> LoadBalancerInterceptor loadBalancerInterceptor)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplateCustomizer</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customize</span><span class="hljs-params">(RestTemplate restTemplate)</span> &#123;<br>List&lt;ClientHttpRequestInterceptor&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<br>restTemplate.getInterceptors());<br>list.add(loadBalancerInterceptor);<br>restTemplate.setInterceptors(list);<br>&#125;<br>&#125;;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnClass(RetryTemplate.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RetryAutoConfiguration</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> RetryTemplate <span class="hljs-title function_">retryTemplate</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">RetryTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RetryTemplate</span>();<br>template.setThrowLastExceptionOnExhausted(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">return</span> template;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> LoadBalancedRetryPolicyFactory <span class="hljs-title function_">loadBalancedRetryPolicyFactory</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadBalancedRetryPolicyFactory</span>.NeverRetryFactory();<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> LoadBalancedBackOffPolicyFactory <span class="hljs-title function_">loadBalancedBackOffPolicyFactory</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadBalancedBackOffPolicyFactory</span>.NoBackOffPolicyFactory();<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> LoadBalancedRetryListenerFactory <span class="hljs-title function_">loadBalancedRetryListenerFactory</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadBalancedRetryListenerFactory</span>.DefaultRetryListenerFactory();<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnClass(RetryTemplate.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RetryInterceptorAutoConfiguration</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> RetryLoadBalancerInterceptor <span class="hljs-title function_">ribbonInterceptor</span><span class="hljs-params">(</span><br><span class="hljs-params">LoadBalancerClient loadBalancerClient, LoadBalancerRetryProperties properties,</span><br><span class="hljs-params">LoadBalancedRetryPolicyFactory lbRetryPolicyFactory,</span><br><span class="hljs-params">LoadBalancerRequestFactory requestFactory,</span><br><span class="hljs-params">LoadBalancedBackOffPolicyFactory backOffPolicyFactory,</span><br><span class="hljs-params">LoadBalancedRetryListenerFactory retryListenerFactory)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RetryLoadBalancerInterceptor</span>(loadBalancerClient, properties,<br>lbRetryPolicyFactory, requestFactory, backOffPolicyFactory, retryListenerFactory);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> RestTemplateCustomizer <span class="hljs-title function_">restTemplateCustomizer</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-keyword">final</span> RetryLoadBalancerInterceptor loadBalancerInterceptor)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplateCustomizer</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customize</span><span class="hljs-params">(RestTemplate restTemplate)</span> &#123;<br>List&lt;ClientHttpRequestInterceptor&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<br>restTemplate.getInterceptors());<br>list.add(loadBalancerInterceptor);<br>restTemplate.setInterceptors(list);<br>&#125;<br>&#125;;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个配置文件中有几个值得注意的点</p><ol><li><code>List&lt;RestTemplate&gt; restTemplates</code>创建了一个空的RestTemplateList，推测自己初始化的restTemplate对象会放入这个list用于后边包装扩展</li><li><code>SmartInitializingSingleton</code>对上述的list进行了smart初始化</li><li><code>RestTemplateCustomizer</code>对RestTemplate设置了Interceptors</li><li>后边还出现一个RetryRestTemplate，看名字是和重试相关，目前只关注普通的</li></ol><h1 id="二、LoadBalancerInterceptor"><a href="#二、LoadBalancerInterceptor" class="headerlink" title="二、LoadBalancerInterceptor"></a>二、LoadBalancerInterceptor</h1><p>上面配置文件对RestTemplate设置了拦截器，然后就看一下拦截器是实现什么功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoadBalancerInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClientHttpRequestInterceptor</span> &#123;<br><br><span class="hljs-keyword">private</span> LoadBalancerClient loadBalancer;<br><span class="hljs-keyword">private</span> LoadBalancerRequestFactory requestFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LoadBalancerInterceptor</span><span class="hljs-params">(LoadBalancerClient loadBalancer, LoadBalancerRequestFactory requestFactory)</span> &#123;<br><span class="hljs-built_in">this</span>.loadBalancer = loadBalancer;<br><span class="hljs-built_in">this</span>.requestFactory = requestFactory;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LoadBalancerInterceptor</span><span class="hljs-params">(LoadBalancerClient loadBalancer)</span> &#123;<br><span class="hljs-comment">// for backwards compatibility</span><br><span class="hljs-built_in">this</span>(loadBalancer, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadBalancerRequestFactory</span>(loadBalancer));<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ClientHttpResponse <span class="hljs-title function_">intercept</span><span class="hljs-params">(<span class="hljs-keyword">final</span> HttpRequest request, <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] body,</span><br><span class="hljs-params"><span class="hljs-keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">URI</span> <span class="hljs-variable">originalUri</span> <span class="hljs-operator">=</span> request.getURI();<br><span class="hljs-type">String</span> <span class="hljs-variable">serviceName</span> <span class="hljs-operator">=</span> originalUri.getHost();<br>Assert.state(serviceName != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.loadBalancer.execute(serviceName, requestFactory.createRequest(request, body, execution));<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">创建请求的方法</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> LoadBalancerRequest&lt;ClientHttpResponse&gt; <span class="hljs-title function_">createRequest</span><span class="hljs-params">(<span class="hljs-keyword">final</span> HttpRequest request,</span><br><span class="hljs-params"><span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] body, <span class="hljs-keyword">final</span> ClientHttpRequestExecution execution)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadBalancerRequest</span>&lt;ClientHttpResponse&gt;() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ClientHttpResponse <span class="hljs-title function_">apply</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServiceInstance instance)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">HttpRequest</span> <span class="hljs-variable">serviceRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceRequestWrapper</span>(request, instance, loadBalancer);<br><span class="hljs-keyword">if</span> (transformers != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (LoadBalancerRequestTransformer transformer : transformers) &#123;<br>serviceRequest = transformer.transformRequest(serviceRequest, instance);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> execution.execute(serviceRequest, body);<br>&#125;<br><br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现<code>intercept</code>接口返回response，那么拦截器就是对请求处理之后，进行了请求获取了response。<br>推测：</p><ul><li>requestrequest中肯定包含原本请求连接<a href="http://servicea/sayHello">http://ServiceA/sayHello</a></li><li>bodybody中包含请需要的一些参数，比如json串</li><li>execution底层http通讯组件</li></ul><p>相当于不再调用RestTemplate原本的请求，而是使用intercept中的请求处理<br><a href="https://www.processon.com/view/link/61751bbc1efad44894f73dec">点击查看【processon】</a></p><h1 id="三、寻找loadBalancer初始化配置与对象"><a href="#三、寻找loadBalancer初始化配置与对象" class="headerlink" title="三、寻找loadBalancer初始化配置与对象"></a>三、寻找loadBalancer初始化配置与对象</h1><p>首先根据LoadBalancerClient接口，寻找实现类，得到执行的实际对象为RibbonLoadBalancerClient。<br>根据RibbonLoadBalancerClient所在<code>spring-cloud-netflix-core</code>包<code>org.springframework.cloud.netflix.ribbon</code>，在其中寻找configuration，看是否在哪个配置文件中初始化了此对象。<br>找到RibbonAutoConfiguration配置文件，其中初始化了client对象。</p><p>更复杂的分析，无法通过接口寻找到实现类的情况<br><a href="https://www.processon.com/view/link/617521dd1efad44894f748ee">点击查看【processon】</a></p><h1 id="四、获取LoadBalance"><a href="#四、获取LoadBalance" class="headerlink" title="四、获取LoadBalance"></a>四、获取LoadBalance</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">execute</span><span class="hljs-params">(String serviceId, LoadBalancerRequest&lt;T&gt; request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">ILoadBalancer</span> <span class="hljs-variable">loadBalancer</span> <span class="hljs-operator">=</span> getLoadBalancer(serviceId);<br><span class="hljs-type">Server</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> getServer(loadBalancer);<br><span class="hljs-keyword">if</span> (server == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;No instances available for &quot;</span> + serviceId);<br>&#125;<br><span class="hljs-type">RibbonServer</span> <span class="hljs-variable">ribbonServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RibbonServer</span>(serviceId, server, isSecure(server,<br>serviceId), serverIntrospector(serviceId).getMetadata(server));<br><br><span class="hljs-keyword">return</span> execute(serviceId, ribbonServer, request);<br>&#125;<br><br><span class="hljs-keyword">protected</span> ILoadBalancer <span class="hljs-title function_">getLoadBalancer</span><span class="hljs-params">(String serviceId)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.clientFactory.getLoadBalancer(serviceId);<br>&#125;<br></code></pre></td></tr></table></figure><p>整个执行方法，其中getLoadBalancer为根据serviceId获取对应的LoadBalance。</p><p>每个要调用的服务名称，都也对应着一个spring的ApplicationContext容器，ServiceA对应着一个独立的spring的ApplicationContext容器。<br>在SpringClientFactory里面，一个服务对应着一个独立的ApplicationContext，里面包含了自己这个服务独立的一堆组件。如果要获取一个服务对应的LoadBalance，其实就是在服务对应的ApplicationContext中获取LoadBalance。根据ILoadBalancer接口类型，获取接口对应的实例化bean。<br>默认得到的负载均衡器为：<code>ZoneAwareLoadBalancer</code></p><p>&#x2F;&#x2F;TODO 获取各自服务对应的ApplicationContext？每个服务不是单独部署，如何获取其他服务，还是这个是配置调用每个服务时需要使用的负载均衡器配置？</p><p><a href="https://www.processon.com/view/link/6175326a1e08537415f978ef">点击查看【processon】</a></p><h1 id="五、ZoneAwareLoadBalancer"><a href="#五、ZoneAwareLoadBalancer" class="headerlink" title="五、ZoneAwareLoadBalancer"></a>五、ZoneAwareLoadBalancer</h1><p>执行器后序直接从ZoneAwareLoadBalancer筛选得到了最终需要调用的服务。那么ZoneAwareLoadBalancer其中会存在一个ServerList，根据负载均衡算法筛选。<br><a href="https://www.processon.com/view/link/61753963e401fd6d2b12c513">点击查看【processon】</a></p><p><a href="https://www.processon.com/view/link/61753981e0b34d7894ecee3c">点击查看【processon】</a></p><h2 id="1-初始化serverList"><a href="#1-初始化serverList" class="headerlink" title="1.初始化serverList"></a>1.初始化serverList</h2><ol><li>在ZoneAwareLoadBalancer查找对象属性，发现在父类中存在volatile ServerList<T> serverListImpl，这个ServerList的初始化在构造方法中。</li><li>也就是在构造ZoneAwareLoadBalancer的时候传入</li><li>回到RibbonClientConfiguration中，发现ZoneAwareLoadBalancer构造的时候，ServerList是每个@bean注入的。</li><li>就在RibbonClientConfiguration的同级中发现一个ribbonServerList，这个就是默认的不在eureka环境中的ServerList</li><li>但是在eureka整合中的ServerList不在此处。推测应该是eureka和ribbon整合包的配置中应当存在。</li><li>在<code>spring-cloud-netflix-eureka-client</code>工程中发现，ribbon与eureka的整合在此处存在一个configuration：org.springframework.cloud.netflix.ribbon.eureka.EurekaRibbonClientConfiguration</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> ServerList&lt;?&gt; ribbonServerList(IClientConfig config, Provider&lt;EurekaClient&gt; eurekaClientProvider) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.propertiesFactory.isSet(ServerList.class, serviceId)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.propertiesFactory.get(ServerList.class, config, serviceId);<br>&#125;<br><span class="hljs-type">DiscoveryEnabledNIWSServerList</span> <span class="hljs-variable">discoveryServerList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DiscoveryEnabledNIWSServerList</span>(<br>config, eurekaClientProvider);<br><span class="hljs-type">DomainExtractingServerList</span> <span class="hljs-variable">serverList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DomainExtractingServerList</span>(<br>discoveryServerList, config, <span class="hljs-built_in">this</span>.approximateZoneFromHostname);<br><span class="hljs-keyword">return</span> serverList;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-初始拉取ServerList"><a href="#2-初始拉取ServerList" class="headerlink" title="2.初始拉取ServerList"></a>2.初始拉取ServerList</h2><p>回到ZoneAwareLoadBalancer，在其父类的构造方法中发现执行了一个初始化方法restOfInit()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicServerListLoadBalancer</span><span class="hljs-params">(IClientConfig clientConfig, IRule rule, IPing ping,</span><br><span class="hljs-params">                                        ServerList&lt;T&gt; serverList, ServerListFilter&lt;T&gt; filter,</span><br><span class="hljs-params">                                        ServerListUpdater serverListUpdater)</span> &#123;<br>       <span class="hljs-built_in">super</span>(clientConfig, rule, ping);<br>       <span class="hljs-built_in">this</span>.serverListImpl = serverList;<br>       <span class="hljs-built_in">this</span>.filter = filter;<br>       <span class="hljs-built_in">this</span>.serverListUpdater = serverListUpdater;<br>       <span class="hljs-keyword">if</span> (filter <span class="hljs-keyword">instanceof</span> AbstractServerListFilter) &#123;<br>           ((AbstractServerListFilter) filter).setLoadBalancerStats(getLoadBalancerStats());<br>       &#125;<br>       restOfInit(clientConfig);<br>   &#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">restOfInit</span><span class="hljs-params">(IClientConfig clientConfig)</span> &#123;<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">primeConnection</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.isEnablePrimingConnections();<br>       <span class="hljs-comment">// turn this off to avoid duplicated asynchronous priming done in BaseLoadBalancer.setServerList()</span><br>       <span class="hljs-built_in">this</span>.setEnablePrimingConnections(<span class="hljs-literal">false</span>);<br>       enableAndInitLearnNewServersFeature();<br><br>       updateListOfServers();<br>       <span class="hljs-keyword">if</span> (primeConnection &amp;&amp; <span class="hljs-built_in">this</span>.getPrimeConnections() != <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-built_in">this</span>.getPrimeConnections()<br>                   .primeConnections(getReachableServers());<br>       &#125;<br>       <span class="hljs-built_in">this</span>.setEnablePrimingConnections(primeConnection);<br>       LOGGER.info(<span class="hljs-string">&quot;DynamicServerListLoadBalancer for client &#123;&#125; initialized: &#123;&#125;&quot;</span>, clientConfig.getClientName(), <span class="hljs-built_in">this</span>.toString());<br>   &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enableAndInitLearnNewServersFeature</span><span class="hljs-params">()</span> &#123;<br>       LOGGER.info(<span class="hljs-string">&quot;Using serverListUpdater &#123;&#125;&quot;</span>, serverListUpdater.getClass().getSimpleName());<br>       serverListUpdater.start(updateAction);<br>   &#125;<br></code></pre></td></tr></table></figure><p>enableAndInitLearnNewServersFeature,看名字大概是启用和初始化学习新服务实例。<br>这个serverListUpdater，又是在<code>RibbonClientConfiguration</code>配置文件中找到，为<code>PollingServerListUpdater</code>。<br><code>PollingServerListUpdater</code>中实际执行的方法也为updateListOfServers。创建的是默认一秒钟之后执行，每隔30s执行，从eureka client刷新注册表到自己ribbon的LoadBalancer中。</p><p>updateListOfServers，就是更新serverList。com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList#getUpdatedListOfServers。获取eureka client中的注册表</p><h1 id="六、通过负载均衡算法获取服务"><a href="#六、通过负载均衡算法获取服务" class="headerlink" title="六、通过负载均衡算法获取服务"></a>六、通过负载均衡算法获取服务</h1><p>ZoneAwareLoadBalancer调用chooseServer，其实是基于父类BaseLoadBalancer的方法，封装了自身的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Server <span class="hljs-title function_">chooseServer</span><span class="hljs-params">(Object key)</span> &#123;<br>       <span class="hljs-keyword">if</span> (counter == <span class="hljs-literal">null</span>) &#123;<br>           counter = createCounter();<br>       &#125;<br>       counter.increment();<br>       <span class="hljs-keyword">if</span> (rule == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-keyword">return</span> rule.choose(key);<br>           &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>               logger.warn(<span class="hljs-string">&quot;LoadBalancer [&#123;&#125;]:  Error choosing server for key &#123;&#125;&quot;</span>, name, key, e);<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>           &#125;<br>       &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>可以看到是直接基于IRule的choose方法<br>IRule中默认实现的是RoundRobinRule轮训算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Server <span class="hljs-title function_">choose</span><span class="hljs-params">(ILoadBalancer lb, Object key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (lb == <span class="hljs-literal">null</span>) &#123;<br>            log.warn(<span class="hljs-string">&quot;no load balancer&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">Server</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (server == <span class="hljs-literal">null</span> &amp;&amp; count++ &lt; <span class="hljs-number">10</span>) &#123;<br>            List&lt;Server&gt; reachableServers = lb.getReachableServers();<br>            List&lt;Server&gt; allServers = lb.getAllServers();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">upCount</span> <span class="hljs-operator">=</span> reachableServers.size();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">serverCount</span> <span class="hljs-operator">=</span> allServers.size();<br><br>            <span class="hljs-keyword">if</span> ((upCount == <span class="hljs-number">0</span>) || (serverCount == <span class="hljs-number">0</span>)) &#123;<br>                log.warn(<span class="hljs-string">&quot;No up servers available from load balancer: &quot;</span> + lb);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">nextServerIndex</span> <span class="hljs-operator">=</span> incrementAndGetModulo(serverCount);<br>            server = allServers.get(nextServerIndex);<br><br>            <span class="hljs-keyword">if</span> (server == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">/* Transient. */</span><br>                Thread.yield();<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;<br>                <span class="hljs-keyword">return</span> (server);<br>            &#125;<br><br>            <span class="hljs-comment">// Next.</span><br>            server = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-number">10</span>) &#123;<br>            log.warn(<span class="hljs-string">&quot;No available alive servers after 10 tries from load balancer: &quot;</span><br>                    + lb);<br>        &#125;<br>        <span class="hljs-keyword">return</span> server;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Inspired by the implementation of &#123;<span class="hljs-doctag">@link</span> AtomicInteger#incrementAndGet()&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> modulo The modulo to bound the value of the counter.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The next value.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">incrementAndGetModulo</span><span class="hljs-params">(<span class="hljs-type">int</span> modulo)</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> nextServerCyclicCounter.get();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> (current + <span class="hljs-number">1</span>) % modulo;<br>            <span class="hljs-keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next))<br>                <span class="hljs-keyword">return</span> next;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>ribbon与eureka整合的时候使用ZoneAvoidanceRule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PredicateBasedRule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClientConfigEnabledRoundRobinRule</span> &#123;<br>   <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Method that provides an instance of &#123;<span class="hljs-doctag">@link</span> AbstractServerPredicate&#125; to be used by this class.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> AbstractServerPredicate <span class="hljs-title function_">getPredicate</span><span class="hljs-params">()</span>;<br>        <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get a server by calling &#123;<span class="hljs-doctag">@link</span> AbstractServerPredicate#chooseRandomlyAfterFiltering(java.util.List, Object)&#125;.</span><br><span class="hljs-comment">     * The performance for this method is O(n) where n is number of servers to be filtered.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Server <span class="hljs-title function_">choose</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">ILoadBalancer</span> <span class="hljs-variable">lb</span> <span class="hljs-operator">=</span> getLoadBalancer();<br>        Optional&lt;Server&gt; server = getPredicate().chooseRoundRobinAfterFiltering(lb.getAllServers(), key);<br>        <span class="hljs-keyword">if</span> (server.isPresent()) &#123;<br>            <span class="hljs-keyword">return</span> server.get();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;       <br>    &#125;<br>&#125;<br><br>    <span class="hljs-keyword">public</span> Optional&lt;Server&gt; <span class="hljs-title function_">chooseRoundRobinAfterFiltering</span><span class="hljs-params">(List&lt;Server&gt; servers, Object loadBalancerKey)</span> &#123;<br>        List&lt;Server&gt; eligible = getEligibleServers(servers, loadBalancerKey);<br>        <span class="hljs-keyword">if</span> (eligible.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> Optional.absent();<br>        &#125;<br>        <span class="hljs-keyword">return</span> Optional.of(eligible.get(incrementAndGetModulo(eligible.size())));<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Referenced from RoundRobinRule</span><br><span class="hljs-comment">     * Inspired by the implementation of &#123;<span class="hljs-doctag">@link</span> AtomicInteger#incrementAndGet()&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> modulo The modulo to bound the value of the counter.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The next value.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">incrementAndGetModulo</span><span class="hljs-params">(<span class="hljs-type">int</span> modulo)</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> nextIndex.get();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> (current + <span class="hljs-number">1</span>) % modulo;<br>            <span class="hljs-keyword">if</span> (nextIndex.compareAndSet(current, next) &amp;&amp; current &lt; modulo)<br>                <span class="hljs-keyword">return</span> current;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="七、对server发起网络请求"><a href="#七、对server发起网络请求" class="headerlink" title="七、对server发起网络请求"></a>七、对server发起网络请求</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12966419/1635089596994-80321c33-852c-437a-a81e-52f609ab7689.png#clientId=u6c2c0c39-a399-4&from=paste&height=732&id=uc0df4aba&margin=%5Bobject%20Object%5D&name=image.png&originHeight=732&originWidth=988&originalType=binary&ratio=1&size=69394&status=done&style=none&taskId=u57a6d18a-8281-4aff-90ba-f0fe77263ae&width=988" alt="image.png"><br>首先requestFactory.createRequest(request, body, execution)对原生request封装，创建一个匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> LoadBalancerRequest&lt;ClientHttpResponse&gt; <span class="hljs-title function_">createRequest</span><span class="hljs-params">(<span class="hljs-keyword">final</span> HttpRequest request,</span><br><span class="hljs-params"><span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] body, <span class="hljs-keyword">final</span> ClientHttpRequestExecution execution)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadBalancerRequest</span>&lt;ClientHttpResponse&gt;() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ClientHttpResponse <span class="hljs-title function_">apply</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServiceInstance instance)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">HttpRequest</span> <span class="hljs-variable">serviceRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceRequestWrapper</span>(request, instance, loadBalancer);<br><span class="hljs-keyword">if</span> (transformers != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (LoadBalancerRequestTransformer transformer : transformers) &#123;<br>serviceRequest = transformer.transformRequest(serviceRequest, instance);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> execution.execute(serviceRequest, body);<br>&#125;<br><br>&#125;;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceRequestWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpRequestWrapper</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServiceInstance instance;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LoadBalancerClient loadBalancer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ServiceRequestWrapper</span><span class="hljs-params">(HttpRequest request, ServiceInstance instance,</span><br><span class="hljs-params"> LoadBalancerClient loadBalancer)</span> &#123;<br><span class="hljs-built_in">super</span>(request);<br><span class="hljs-built_in">this</span>.instance = instance;<br><span class="hljs-built_in">this</span>.loadBalancer = loadBalancer;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> URI <span class="hljs-title function_">getURI</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.loadBalancer.reconstructURI(<br><span class="hljs-built_in">this</span>.instance, getRequest().getURI());<br><span class="hljs-keyword">return</span> uri;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将request用ServiceRequestWrapper包装一层出来，同时对uri做了处理。<br>底层是使用了spring mvc进行通讯，但是获取uri的方法已经变了，根据传入的LoadBalance替换原本的service。</p><h1 id="八、spring整合后的ping机制"><a href="#八、spring整合后的ping机制" class="headerlink" title="八、spring整合后的ping机制"></a>八、spring整合后的ping机制</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> IPing <span class="hljs-title function_">ribbonPing</span><span class="hljs-params">(IClientConfig config)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.propertiesFactory.isSet(IPing.class, serviceId)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.propertiesFactory.get(IPing.class, config, serviceId);<br>&#125;<br><span class="hljs-type">NIWSDiscoveryPing</span> <span class="hljs-variable">ping</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NIWSDiscoveryPing</span>();<br>ping.initWithNiwsConfig(config);<br><span class="hljs-keyword">return</span> ping;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NIWSDiscoveryPing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractLoadBalancerPing</span> &#123;<br>        <br><span class="hljs-type">BaseLoadBalancer</span> <span class="hljs-variable">lb</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">NIWSDiscoveryPing</span><span class="hljs-params">()</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> BaseLoadBalancer <span class="hljs-title function_">getLb</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> lb;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Non IPing interface method - only set this if you care about the &quot;newServers Feature&quot;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> lb</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLb</span><span class="hljs-params">(BaseLoadBalancer lb)</span> &#123;<br><span class="hljs-built_in">this</span>.lb = lb;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAlive</span><span class="hljs-params">(Server server)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isAlive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (server!=<span class="hljs-literal">null</span> &amp;&amp; server <span class="hljs-keyword">instanceof</span> DiscoveryEnabledServer)&#123;<br>            <span class="hljs-type">DiscoveryEnabledServer</span> <span class="hljs-variable">dServer</span> <span class="hljs-operator">=</span> (DiscoveryEnabledServer)server;            <br>            <span class="hljs-type">InstanceInfo</span> <span class="hljs-variable">instanceInfo</span> <span class="hljs-operator">=</span> dServer.getInstanceInfo();<br>            <span class="hljs-keyword">if</span> (instanceInfo!=<span class="hljs-literal">null</span>)&#123;                <br>                <span class="hljs-type">InstanceStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> instanceInfo.getStatus();<br>                <span class="hljs-keyword">if</span> (status!=<span class="hljs-literal">null</span>)&#123;<br>                    isAlive = status.equals(InstanceStatus.UP);<br>                &#125;<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">return</span> isAlive;<br>&#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initWithNiwsConfig</span><span class="hljs-params">(</span><br><span class="hljs-params">                IClientConfig clientConfig)</span> &#123;<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>RibbonClientConfiguration中注册的是DummyPing，但是实现的通讯方法为空。<br>但是与eureka整合之后，在EurekaRibbonClientConfiguration中注册了一个NIWSDiscoveryPing。</p><p>Spring Cloud环境下，默认IPing组件不生效，只做简单的判断。因为集成了eureka。eureka自己有故障发现和服务实例摘除机制。在服务发生故障的时候，eureka server会发现然后摘除这个服务实例。eureka client会得到一个通知。eureka client本地的ribbon会每隔30s自动从eureka client本地获取注册表。</p><p>调用ping的地方：BaseLoadBalancer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">void</span> <span class="hljs-title function_">setupPingTask</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">if</span> (canSkipPing()) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (lbTimer != <span class="hljs-literal">null</span>) &#123;<br>           lbTimer.cancel();<br>       &#125;<br>       lbTimer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShutdownEnabledTimer</span>(<span class="hljs-string">&quot;NFLoadBalancer-PingTimer-&quot;</span> + name,<br>                                          <span class="hljs-literal">true</span>);<br>       lbTimer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PingTask</span>(), <span class="hljs-number">0</span>, pingIntervalSeconds * <span class="hljs-number">1000</span>);<br>       forceQuickPing();<br>   &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPingInterval</span><span class="hljs-params">(<span class="hljs-type">int</span> pingIntervalSeconds)</span> &#123;<br>       <span class="hljs-keyword">if</span> (pingIntervalSeconds &lt; <span class="hljs-number">1</span>) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br><br>       <span class="hljs-built_in">this</span>.pingIntervalSeconds = pingIntervalSeconds;<br>       <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>           logger.debug(<span class="hljs-string">&quot;LoadBalancer [&#123;&#125;]:  pingIntervalSeconds set to &#123;&#125;&quot;</span>,<br>           name, <span class="hljs-built_in">this</span>.pingIntervalSeconds);<br>       &#125;<br>       setupPingTask(); <span class="hljs-comment">// since ping data changed</span><br>   &#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">initWithConfig</span><span class="hljs-params">(IClientConfig clientConfig, IRule rule, IPing ping)</span> &#123;<br>       <span class="hljs-built_in">this</span>.config = clientConfig;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">clientName</span> <span class="hljs-operator">=</span> clientConfig.getClientName();<br>       <span class="hljs-built_in">this</span>.name = clientName;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">pingIntervalTime</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;&quot;</span><br>               + clientConfig.getProperty(<br>                       CommonClientConfigKey.NFLoadBalancerPingInterval,<br>                       Integer.parseInt(<span class="hljs-string">&quot;30&quot;</span>)));<br>       <span class="hljs-type">int</span> <span class="hljs-variable">maxTotalPingTime</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;&quot;</span><br>               + clientConfig.getProperty(<br>                       CommonClientConfigKey.NFLoadBalancerMaxTotalPingTime,<br>                       Integer.parseInt(<span class="hljs-string">&quot;2&quot;</span>)));<br><br>       setPingInterval(pingIntervalTime);<br>       setMaxTotalPingTime(maxTotalPingTime);<br><br>       <span class="hljs-comment">// cross associate with each other</span><br>       <span class="hljs-comment">// i.e. Rule,Ping meet your container LB</span><br>       <span class="hljs-comment">// LB, these are your Ping and Rule guys ...</span><br>       setRule(rule);<br>       setPing(ping);<br>       setLoadBalancerStats(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadBalancerStats</span>(clientName));<br>       rule.setLoadBalancer(<span class="hljs-built_in">this</span>);<br>       <span class="hljs-keyword">if</span> (ping <span class="hljs-keyword">instanceof</span> AbstractLoadBalancerPing) &#123;<br>           ((AbstractLoadBalancerPing) ping).setLoadBalancer(<span class="hljs-built_in">this</span>);<br>       &#125;<br>       logger.info(<span class="hljs-string">&quot;Client: &#123;&#125; instantiated a LoadBalancer: &#123;&#125;&quot;</span>, name, <span class="hljs-built_in">this</span>);<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">enablePrimeConnections</span> <span class="hljs-operator">=</span> clientConfig.get(<br>               CommonClientConfigKey.EnablePrimeConnections, DefaultClientConfigImpl.DEFAULT_ENABLE_PRIME_CONNECTIONS);<br><br>       <span class="hljs-keyword">if</span> (enablePrimeConnections) &#123;<br>           <span class="hljs-built_in">this</span>.setEnablePrimingConnections(<span class="hljs-literal">true</span>);<br>           <span class="hljs-type">PrimeConnections</span> <span class="hljs-variable">primeConnections</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimeConnections</span>(<br>                   <span class="hljs-built_in">this</span>.getName(), clientConfig);<br>           <span class="hljs-built_in">this</span>.setPrimeConnections(primeConnections);<br>       &#125;<br>       init();<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>特别注意pingIntervalSeconds，虽然在初始化的时候是10，但是在init方法中对这个值重新赋值，取的配置文件中的参数</p><h1 id="九、负载均衡算法"><a href="#九、负载均衡算法" class="headerlink" title="九、负载均衡算法"></a>九、负载均衡算法</h1><ul><li>RoundRobinRule</li></ul><p>系统内置的默认负载均衡规范，直接round robin轮询，从一堆server list中，不断的轮询选择出来一个server，每个server平摊到的这个请求，基本上是平均的</p><ul><li>AvailabilityFilteringRule</li></ul><p>这个rule就是会考察服务器的可用性<br>如果3次连接失败，就会等待30秒后再次访问；如果不断失败，那么等待时间会不断边长<br>如果某个服务器的并发请求太高了，那么会绕过去，不再访问</p><ul><li>WeightedResponseTimeRule</li></ul><p>带着权重的，每个服务器可以有权重，权重越高优先访问，如果某个服务器响应时间比较长，那么权重就会降低，减少访问</p><ul><li>ZoneAvoidanceRule</li></ul><p>根据机房和服务器来进行负载均衡，说白了，就是机房的意思，看了源码就是知道了，这个就是所谓的spring cloud ribbon环境中的默认的Rule</p><ul><li>BestAvailableRule</li></ul><p>忽略那些请求失败的服务器，然后尽量找并发比较低的服务器来请求</p><ul><li>RandomRule</li></ul><p>随机找一个服务器，尽量将流量分散在各个服务器上</p><ul><li>RetryRule</li></ul><p>可以重试，就是通过round robin找到的服务器请求失败，可以重新找一个服务器</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ribbon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hystrix</title>
    <link href="/2022/05/09/%E6%BA%90%E7%A0%81/hystrix/hystrix/"/>
    <url>/2022/05/09/%E6%BA%90%E7%A0%81/hystrix/hystrix/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hystrix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>feign</title>
    <link href="/2022/05/08/%E6%BA%90%E7%A0%81/feign/feign/"/>
    <url>/2022/05/08/%E6%BA%90%E7%A0%81/feign/feign/</url>
    
    <content type="html"><![CDATA[<h1 id="一、寻找扫描-FeignClient入口"><a href="#一、寻找扫描-FeignClient入口" class="headerlink" title="一、寻找扫描@FeignClient入口"></a>一、寻找扫描@FeignClient入口</h1><p><a href="https://www.processon.com/view/link/61764aff0e3e7416bde39d7c">点击查看【processon】</a><br>feign对我们暴露的注解就两个</p><ul><li>Application启动类的<code>@EnableFeignClients</code>注解</li><li>自定义接口上面的<code>@FeignClient</code>注解</li></ul><h2 id="FeignClient"><a href="#FeignClient" class="headerlink" title="@FeignClient"></a>@FeignClient</h2><blockquote><p><em>Annotation for interfaces declaring that a REST client with that interface should be<br>created (e.g. for autowiring into another component). If ribbon is available it will be<br>used to load balance the backend requests, and the load balancer can be configured<br>using a <code>@RibbonClient</code> with the same name (i.e. value) as the feign client.</em></p></blockquote><p>此接口会创建一个REST client(发送restful请求的客户端)，然后可以将整个REST client注入其他的组件(比如ServiceBController)。如果启用了ribbon的话，就会采用负载均衡的方式进行http请求。可以用@RibbonClient标注一个配置类，在那个配置类里面可以定义自己ribbon的ILoadBalance。</p><ul><li>value(name)要调用的服务名称</li><li>url如果不用ribbon，就不用负载均衡，用url指定请求的地址</li><li>decode404用404代替抛出FeignException</li><li>configuration指定一个配置类，可以在里面自定义自己的Encoder、Decoder、Contract</li><li>fallback…等回调方法</li></ul><h2 id="EnableFeignClients"><a href="#EnableFeignClients" class="headerlink" title="@EnableFeignClients"></a>@EnableFeignClients</h2><p>扫描标注了@FeignClient注解的接口，其中包含一些参数来指明扫描哪些包下面的类。<br>在上面@Import(FeignClientsRegistrar.class)，引入了FeignClientsRegistrar组件。</p><h2 id="FeignClientsRegistrar"><a href="#FeignClientsRegistrar" class="headerlink" title="@FeignClientsRegistrar"></a>@FeignClientsRegistrar</h2><p>推测此组件为FeignClients的注册器。<br>其实现了4个接口ImportBeanDefinitionRegistrar,ResourceLoaderAware, BeanClassLoaderAware, EnvironmentAware<br>ImportBeanDefinitionRegistrar用于注册bean，剩余的实现了Aware接口，用于设置变量</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata metadata,</span><br><span class="hljs-params">BeanDefinitionRegistry registry)</span> &#123;<br>registerDefaultConfiguration(metadata, registry);<br>registerFeignClients(metadata, registry);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="registerDefaultConfiguration"><a href="#registerDefaultConfiguration" class="headerlink" title="registerDefaultConfiguration()"></a>registerDefaultConfiguration()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerDefaultConfiguration</span><span class="hljs-params">(AnnotationMetadata metadata,</span><br><span class="hljs-params">BeanDefinitionRegistry registry)</span> &#123;<br>Map&lt;String, Object&gt; defaultAttrs = metadata<br>.getAnnotationAttributes(EnableFeignClients.class.getName(), <span class="hljs-literal">true</span>);<br><br><span class="hljs-keyword">if</span> (defaultAttrs != <span class="hljs-literal">null</span> &amp;&amp; defaultAttrs.containsKey(<span class="hljs-string">&quot;defaultConfiguration&quot;</span>)) &#123;<br>String name;<br><span class="hljs-keyword">if</span> (metadata.hasEnclosingClass()) &#123;<br>name = <span class="hljs-string">&quot;default.&quot;</span> + metadata.getEnclosingClassName();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>name = <span class="hljs-string">&quot;default.&quot;</span> + metadata.getClassName();<br>&#125;<br>registerClientConfiguration(registry, name,<br>defaultAttrs.get(<span class="hljs-string">&quot;defaultConfiguration&quot;</span>));<br>&#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerClientConfiguration</span><span class="hljs-params">(BeanDefinitionRegistry registry, Object name,</span><br><span class="hljs-params">Object configuration)</span> &#123;<br><span class="hljs-type">BeanDefinitionBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> BeanDefinitionBuilder<br>.genericBeanDefinition(FeignClientSpecification.class);<br>builder.addConstructorArgValue(name);<br>builder.addConstructorArgValue(configuration);<br>registry.registerBeanDefinition(<br>name + <span class="hljs-string">&quot;.&quot;</span> + FeignClientSpecification.class.getSimpleName(),<br>builder.getBeanDefinition());<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>获取EnableFeignClients注解的属性值</li><li>获取启动类的全限定名:default.com.kris.service.ServiceBApplication</li><li>基于上面两个属性往BeanDefinicitonRegistry注册</li></ol><h2 id="registerFeignClients"><a href="#registerFeignClients" class="headerlink" title="registerFeignClients()"></a>registerFeignClients()</h2><p>&#x2F;&#x2F;TODO debug一下这边的包扫描<br><a href="https://www.processon.com/view/link/6176c21ff346fb01b90e04f4">点击查看【processon】</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerFeignClients</span><span class="hljs-params">(AnnotationMetadata metadata,</span><br><span class="hljs-params">BeanDefinitionRegistry registry)</span> &#123;<br><span class="hljs-type">ClassPathScanningCandidateComponentProvider</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> getScanner();<br>scanner.setResourceLoader(<span class="hljs-built_in">this</span>.resourceLoader);<br><br>Set&lt;String&gt; basePackages;<br><br>Map&lt;String, Object&gt; attrs = metadata<br>.getAnnotationAttributes(EnableFeignClients.class.getName());<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这个在设置需要扫描那一个注解出来</span><br><span class="hljs-comment">        */</span><br><span class="hljs-type">AnnotationTypeFilter</span> <span class="hljs-variable">annotationTypeFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeFilter</span>(<br>FeignClient.class);<br><span class="hljs-keyword">final</span> Class&lt;?&gt;[] clients = attrs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span><br>: (Class&lt;?&gt;[]) attrs.get(<span class="hljs-string">&quot;clients&quot;</span>);<br><span class="hljs-keyword">if</span> (clients == <span class="hljs-literal">null</span> || clients.length == <span class="hljs-number">0</span>) &#123;<br>scanner.addIncludeFilter(annotationTypeFilter);<br>basePackages = getBasePackages(metadata);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">final</span> Set&lt;String&gt; clientClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>basePackages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (Class&lt;?&gt; clazz : clients) &#123;<br>basePackages.add(ClassUtils.getPackageName(clazz));<br>clientClasses.add(clazz.getCanonicalName());<br>&#125;<br><span class="hljs-type">AbstractClassTestingTypeFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbstractClassTestingTypeFilter</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">match</span><span class="hljs-params">(ClassMetadata metadata)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">cleaned</span> <span class="hljs-operator">=</span> metadata.getClassName().replaceAll(<span class="hljs-string">&quot;\\$&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);<br><span class="hljs-keyword">return</span> clientClasses.contains(cleaned);<br>&#125;<br>&#125;;<br>scanner.addIncludeFilter(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">AllTypeFilter</span>(Arrays.asList(filter, annotationTypeFilter)));<br>&#125;<br><br><span class="hljs-keyword">for</span> (String basePackage : basePackages) &#123;<br>Set&lt;BeanDefinition&gt; candidateComponents = scanner<br>.findCandidateComponents(basePackage);<br><span class="hljs-keyword">for</span> (BeanDefinition candidateComponent : candidateComponents) &#123;<br><span class="hljs-keyword">if</span> (candidateComponent <span class="hljs-keyword">instanceof</span> AnnotatedBeanDefinition) &#123;<br><span class="hljs-comment">// verify annotated class is an interface</span><br><span class="hljs-type">AnnotatedBeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> (AnnotatedBeanDefinition) candidateComponent;<br><span class="hljs-type">AnnotationMetadata</span> <span class="hljs-variable">annotationMetadata</span> <span class="hljs-operator">=</span> beanDefinition.getMetadata();<br>Assert.isTrue(annotationMetadata.isInterface(),<br><span class="hljs-string">&quot;@FeignClient can only be specified on an interface&quot;</span>);<br><br>Map&lt;String, Object&gt; attributes = annotationMetadata<br>.getAnnotationAttributes(<br>FeignClient.class.getCanonicalName());<br><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> getClientName(attributes);<br>registerClientConfiguration(registry, name,<br>attributes.get(<span class="hljs-string">&quot;configuration&quot;</span>));<br><br>registerFeignClient(registry, annotationMetadata, attributes);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerFeignClient</span><span class="hljs-params">(BeanDefinitionRegistry registry,</span><br><span class="hljs-params">AnnotationMetadata annotationMetadata, Map&lt;String, Object&gt; attributes)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> annotationMetadata.getClassName();<br><span class="hljs-type">BeanDefinitionBuilder</span> <span class="hljs-variable">definition</span> <span class="hljs-operator">=</span> BeanDefinitionBuilder<br>.genericBeanDefinition(FeignClientFactoryBean.class);<br>validate(attributes);<br>definition.addPropertyValue(<span class="hljs-string">&quot;url&quot;</span>, getUrl(attributes));<br>definition.addPropertyValue(<span class="hljs-string">&quot;path&quot;</span>, getPath(attributes));<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> getName(attributes);<br>definition.addPropertyValue(<span class="hljs-string">&quot;name&quot;</span>, name);<br>definition.addPropertyValue(<span class="hljs-string">&quot;type&quot;</span>, className);<br>definition.addPropertyValue(<span class="hljs-string">&quot;decode404&quot;</span>, attributes.get(<span class="hljs-string">&quot;decode404&quot;</span>));<br>definition.addPropertyValue(<span class="hljs-string">&quot;fallback&quot;</span>, attributes.get(<span class="hljs-string">&quot;fallback&quot;</span>));<br>definition.addPropertyValue(<span class="hljs-string">&quot;fallbackFactory&quot;</span>, attributes.get(<span class="hljs-string">&quot;fallbackFactory&quot;</span>));<br>definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">alias</span> <span class="hljs-operator">=</span> name + <span class="hljs-string">&quot;FeignClient&quot;</span>;<br><span class="hljs-type">AbstractBeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> definition.getBeanDefinition();<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">primary</span> <span class="hljs-operator">=</span> (Boolean)attributes.get(<span class="hljs-string">&quot;primary&quot;</span>); <span class="hljs-comment">// has a default, won&#x27;t be null</span><br><br>beanDefinition.setPrimary(primary);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">qualifier</span> <span class="hljs-operator">=</span> getQualifier(attributes);<br><span class="hljs-keyword">if</span> (StringUtils.hasText(qualifier)) &#123;<br>alias = qualifier;<br>&#125;<br><br><span class="hljs-type">BeanDefinitionHolder</span> <span class="hljs-variable">holder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionHolder</span>(beanDefinition, className,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; alias &#125;);<br>BeanDefinitionReaderUtils.registerBeanDefinition(holder, registry);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>获取scanner，重写了<code>isCandidateComponent</code>方法，用于判断是否是需要扫描的类</li><li>获取EnableFeignClients注解属性</li><li>对scanner设置一堆属性，比如filter。这部分和spring相关，spring内的注解扫描写法大都一样</li><li>EnableFeignClients中如果没有设置扫描包，就会使用默认路径</li><li><code>candidateComponent instanceof AnnotatedBeanDefinition</code>用于判断组件是否bean注解标记</li><li>获取@FeignClient写的属性，因为其中也可以配置别的配置类和属性</li><li>进行服务注册</li></ol><h2 id="registerFeignClient"><a href="#registerFeignClient" class="headerlink" title="registerFeignClient"></a>registerFeignClient</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerFeignClient</span><span class="hljs-params">(BeanDefinitionRegistry registry,</span><br><span class="hljs-params">AnnotationMetadata annotationMetadata, Map&lt;String, Object&gt; attributes)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> annotationMetadata.getClassName();<br><span class="hljs-type">BeanDefinitionBuilder</span> <span class="hljs-variable">definition</span> <span class="hljs-operator">=</span> BeanDefinitionBuilder<br>.genericBeanDefinition(FeignClientFactoryBean.class);<br>validate(attributes);<br>definition.addPropertyValue(<span class="hljs-string">&quot;url&quot;</span>, getUrl(attributes));<br>definition.addPropertyValue(<span class="hljs-string">&quot;path&quot;</span>, getPath(attributes));<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> getName(attributes);<br>definition.addPropertyValue(<span class="hljs-string">&quot;name&quot;</span>, name);<br>definition.addPropertyValue(<span class="hljs-string">&quot;type&quot;</span>, className);<br>definition.addPropertyValue(<span class="hljs-string">&quot;decode404&quot;</span>, attributes.get(<span class="hljs-string">&quot;decode404&quot;</span>));<br>definition.addPropertyValue(<span class="hljs-string">&quot;fallback&quot;</span>, attributes.get(<span class="hljs-string">&quot;fallback&quot;</span>));<br>definition.addPropertyValue(<span class="hljs-string">&quot;fallbackFactory&quot;</span>, attributes.get(<span class="hljs-string">&quot;fallbackFactory&quot;</span>));<br>definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">alias</span> <span class="hljs-operator">=</span> name + <span class="hljs-string">&quot;FeignClient&quot;</span>;<br><span class="hljs-type">AbstractBeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> definition.getBeanDefinition();<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">primary</span> <span class="hljs-operator">=</span> (Boolean)attributes.get(<span class="hljs-string">&quot;primary&quot;</span>); <span class="hljs-comment">// has a default, won&#x27;t be null</span><br><br>beanDefinition.setPrimary(primary);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">qualifier</span> <span class="hljs-operator">=</span> getQualifier(attributes);<br><span class="hljs-keyword">if</span> (StringUtils.hasText(qualifier)) &#123;<br>alias = qualifier;<br>&#125;<br><br><span class="hljs-type">BeanDefinitionHolder</span> <span class="hljs-variable">holder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionHolder</span>(beanDefinition, className,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; alias &#125;);<br>BeanDefinitionReaderUtils.registerBeanDefinition(holder, registry);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里进来的就是各个@FeignClient标记的类<br>此处就是将注解中所有的属性设置到FeignClientFactoryBean的工厂中，然后创建了一个AbstractBeanDefinition。注册到了一个BeanDefinitionRegistry中。</p><h1 id="二、Feign动态代理构造"><a href="#二、Feign动态代理构造" class="headerlink" title="二、Feign动态代理构造"></a>二、Feign动态代理构造</h1><p><a href="https://www.processon.com/view/link/6176d1bd7d9c08459fb1f304">点击查看【processon】</a></p><h2 id="FeignClientFactoryBean"><a href="#FeignClientFactoryBean" class="headerlink" title="FeignClientFactoryBean"></a>FeignClientFactoryBean</h2><p>扫描@FeignClient注解形成BeanDefinition，后面在spring初始化的时候，会去构造一个原生的feign的FeignClient，然后基于这个构造一个对应service的动态代理。<br>那么此处会存在一个方法给外界调用，包含生成一个动态代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">FeignContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> applicationContext.getBean(FeignContext.class);<br>Feign.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> feign(context);<br><br><span class="hljs-keyword">if</span> (!StringUtils.hasText(<span class="hljs-built_in">this</span>.url)) &#123;<br>String url;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.name.startsWith(<span class="hljs-string">&quot;http&quot;</span>)) &#123;<br>url = <span class="hljs-string">&quot;http://&quot;</span> + <span class="hljs-built_in">this</span>.name;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>url = <span class="hljs-built_in">this</span>.name;<br>&#125;<br>url += cleanPath();<br><span class="hljs-keyword">return</span> loadBalance(builder, context, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HardCodedTarget</span>&lt;&gt;(<span class="hljs-built_in">this</span>.type,<br><span class="hljs-built_in">this</span>.name, url));<br>&#125;<br><span class="hljs-keyword">if</span> (StringUtils.hasText(<span class="hljs-built_in">this</span>.url) &amp;&amp; !<span class="hljs-built_in">this</span>.url.startsWith(<span class="hljs-string">&quot;http&quot;</span>)) &#123;<br><span class="hljs-built_in">this</span>.url = <span class="hljs-string">&quot;http://&quot;</span> + <span class="hljs-built_in">this</span>.url;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.url + cleanPath();<br><span class="hljs-type">Client</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> getOptional(context, Client.class);<br><span class="hljs-keyword">if</span> (client != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (client <span class="hljs-keyword">instanceof</span> LoadBalancerFeignClient) &#123;<br><span class="hljs-comment">// not lod balancing because we have a url,</span><br><span class="hljs-comment">// but ribbon is on the classpath, so unwrap</span><br>client = ((LoadBalancerFeignClient)client).getDelegate();<br>&#125;<br>builder.client(client);<br>&#125;<br><span class="hljs-type">Targeter</span> <span class="hljs-variable">targeter</span> <span class="hljs-operator">=</span> get(context, Targeter.class);<br><span class="hljs-keyword">return</span> targeter.target(<span class="hljs-built_in">this</span>, builder, context, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HardCodedTarget</span>&lt;&gt;(<br><span class="hljs-built_in">this</span>.type, <span class="hljs-built_in">this</span>.name, url));<br>&#125;<br><br><span class="hljs-keyword">protected</span> Feign.Builder <span class="hljs-title function_">feign</span><span class="hljs-params">(FeignContext context)</span> &#123;<br><span class="hljs-type">FeignLoggerFactory</span> <span class="hljs-variable">loggerFactory</span> <span class="hljs-operator">=</span> get(context, FeignLoggerFactory.class);<br><span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> loggerFactory.create(<span class="hljs-built_in">this</span>.type);<br><br><span class="hljs-comment">// @formatter:off</span><br>Feign.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> get(context, Feign.Builder.class)<br><span class="hljs-comment">// required values</span><br>.logger(logger)<br>.encoder(get(context, Encoder.class))<br>.decoder(get(context, Decoder.class))<br>.contract(get(context, Contract.class));<br><span class="hljs-comment">// @formatter:on</span><br><br>configureFeign(context, builder);<br><br><span class="hljs-keyword">return</span> builder;<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureFeign</span><span class="hljs-params">(FeignContext context, Feign.Builder builder)</span> &#123;<br><span class="hljs-type">FeignClientProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> applicationContext.getBean(FeignClientProperties.class);<br><span class="hljs-keyword">if</span> (properties != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (properties.isDefaultToProperties()) &#123;<br>configureUsingConfiguration(context, builder);<br>configureUsingProperties(properties.getConfig().get(properties.getDefaultConfig()), builder);<br>configureUsingProperties(properties.getConfig().get(<span class="hljs-built_in">this</span>.name), builder);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>configureUsingProperties(properties.getConfig().get(properties.getDefaultConfig()), builder);<br>configureUsingProperties(properties.getConfig().get(<span class="hljs-built_in">this</span>.name), builder);<br>configureUsingConfiguration(context, builder);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>configureUsingConfiguration(context, builder);<br>&#125;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">target</span><span class="hljs-params">(FeignClientFactoryBean factory, Feign.Builder feign, FeignContext context,</span><br><span class="hljs-params">Target.HardCodedTarget&lt;T&gt; target)</span> &#123;<br><span class="hljs-keyword">return</span> feign.target(target);<br>&#125;<br><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">target</span><span class="hljs-params">(Target&lt;T&gt; target)</span> &#123;<br>     <span class="hljs-keyword">return</span> build().newInstance(target);<br>   &#125;<br><br><span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">newInstance</span><span class="hljs-params">(Target&lt;T&gt; target)</span> &#123;<br>       Map&lt;String, MethodHandler&gt; nameToHandler = targetToHandlersByName.apply(target);<br>       Map&lt;Method, MethodHandler&gt; methodToHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;Method, MethodHandler&gt;();<br>       List&lt;DefaultMethodHandler&gt; defaultMethodHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;DefaultMethodHandler&gt;();<br><br>       <span class="hljs-keyword">for</span> (Method method : target.type().getMethods()) &#123;<br>         <span class="hljs-keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;<br>           <span class="hljs-keyword">continue</span>;<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Util.isDefault(method)) &#123;<br>           <span class="hljs-type">DefaultMethodHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMethodHandler</span>(method);<br>           defaultMethodHandlers.add(handler);<br>           methodToHandler.put(method, handler);<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>           methodToHandler.put(method, nameToHandler.get(Feign.configKey(target.type(), method)));<br>         &#125;<br>       &#125;<br>       <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> factory.create(target, methodToHandler);<br>       <span class="hljs-type">T</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (T) Proxy.newProxyInstance(target.type().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]&#123;target.type()&#125;, handler);<br><br>       <span class="hljs-keyword">for</span>(DefaultMethodHandler defaultMethodHandler : defaultMethodHandlers) &#123;<br>         defaultMethodHandler.bindTo(proxy);<br>       &#125;<br>       <span class="hljs-keyword">return</span> proxy;<br>     &#125;<br></code></pre></td></tr></table></figure><ol><li>获取当前feign的上下文，与ribbon一样，每个feign都有自己的上下文环境</li><li>通过上下文获取Feign.Builder<ol><li>从FeignContext中获取组件：Logger、Encoder、Decoder、Contract</li><li>对上面传过来的组件设置默认值，存在一个优先级。</li></ol></li><li>根据是否配置url来构建需要调用的url</li><li>构造一个HardCodedTarget，包含了接口类型（com.zhss.service.ServiceAClient）、服务名称（ServiceA）、url地址（<a href="http://servicea),跟feign.builder、feigncontext,一起,传入了loadbalance()方法里去/">http://ServiceA），跟Feign.Builder、FeignContext，一起，传入了loadBalance()方法里去</a><ol><li>从context中获取了Client，需要寻找此处client接口的实现类<ol><li>在Client接口中看其实现类，此处引入了2个：Default和LoadBalancerFeignClient。</li><li>在<code>spring-cloud-netflix-core</code>下面DefaultFeignLoadBalancedConfiguration找到了一个LoadBalancerFeignClient</li></ol></li><li>从context获取了Targeter，寻找Targeter接口的实现类<ol><li>在Targeter中寻找实现类：DefaultTargeter和HystrixTargeter。在没有启用hystrix的情况下是使用的default</li></ol></li></ol></li><li><code>feign.ReflectiveFeign#newInstance</code>执行其中方法<ol><li>得到传入target的名字及其方法处理器的map</li><li>将上面的map转为Method对应其处理器的map</li><li>生成动态代理对象</li><li>给原来的方法处理器绑定代理</li></ol></li></ol><h2 id="基于动态代理的请求处理"><a href="#基于动态代理的请求处理" class="headerlink" title="基于动态代理的请求处理"></a>基于动态代理的请求处理</h2><p><a href="https://www.processon.com/view/link/61796dda5653bb7318dafd64">点击查看【processon】</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, MethodHandler&gt; <span class="hljs-title function_">apply</span><span class="hljs-params">(Target key)</span> &#123;<br>      List&lt;MethodMetadata&gt; metadata = contract.parseAndValidatateMetadata(key.type());<br>      Map&lt;String, MethodHandler&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;String, MethodHandler&gt;();<br>      <span class="hljs-keyword">for</span> (MethodMetadata md : metadata) &#123;<br>        BuildTemplateByResolvingArgs buildTemplate;<br>        <span class="hljs-keyword">if</span> (!md.formParams().isEmpty() &amp;&amp; md.template().bodyTemplate() == <span class="hljs-literal">null</span>) &#123;<br>          buildTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuildFormEncodedTemplateFromArgs</span>(md, encoder);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (md.bodyIndex() != <span class="hljs-literal">null</span>) &#123;<br>          buildTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuildEncodedTemplateFromArgs</span>(md, encoder);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          buildTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuildTemplateByResolvingArgs</span>(md);<br>        &#125;<br>        result.put(md.configKey(),<br>                   factory.create(key, md, buildTemplate, options, decoder, errorDecoder));<br>      &#125;<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>targetToHandlersByName.apply(target)</code>这一段解析可以看看，为ServiceAClient接口进行解析，并为每个方法创建了handler。<br>在targetToHandlersByName中的apply，将其组件都会由InvocationHandlerFactory生成，需要传入所需要的组件。</p><p>由于使用了动态代理机制，所以在方法执行的时候肯定会执行一个invoke。因此在调试的时候需要在invoke里面打断点。</p><h1 id="三、feign的请求处理流程"><a href="#三、feign的请求处理流程" class="headerlink" title="三、feign的请求处理流程"></a>三、feign的请求处理流程</h1><p><a href="https://www.processon.com/view/link/61797263f346fb01b914af3a">点击查看【processon】</a></p><h2 id="LoadBalancerFeignClient"><a href="#LoadBalancerFeignClient" class="headerlink" title="LoadBalancerFeignClient"></a>LoadBalancerFeignClient</h2><p>在基于feign调用方法dispatch.get(method).invoke(args)之后实际执行了feign.InvocationHandlerFactory.MethodHandler#invoke接口。此处又使用的是SynchronousMethodHandler处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object[] argv)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-type">RequestTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> buildTemplateFromArgs.create(argv);<br>    <span class="hljs-type">Retryer</span> <span class="hljs-variable">retryer</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.retryer.clone();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> executeAndDecode(template);<br>      &#125; <span class="hljs-keyword">catch</span> (RetryableException e) &#123;<br>        retryer.continueOrPropagate(e);<br>        <span class="hljs-keyword">if</span> (logLevel != Logger.Level.NONE) &#123;<br>          logger.logRetry(metadata.configKey(), logLevel);<br>        &#125;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  Object <span class="hljs-title function_">executeAndDecode</span><span class="hljs-params">(RequestTemplate template)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> targetRequest(template);<br><br>    <span class="hljs-keyword">if</span> (logLevel != Logger.Level.NONE) &#123;<br>      logger.logRequest(metadata.configKey(), logLevel, request);<br>    &#125;<br><br>    Response response;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.nanoTime();<br>    <span class="hljs-keyword">try</span> &#123;<br>      response = client.execute(request, options);<br>     ....<br>  &#125;<br></code></pre></td></tr></table></figure><p>发现此处又调用了传入client的execute方法。那么值钱在configuration里面配置的client就是LoadBalancerFeignClient，最终回到了LoadBalancerFeignClient的execute方法去进行请求的调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Response <span class="hljs-title function_">execute</span><span class="hljs-params">(Request request, Request.Options options)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">URI</span> <span class="hljs-variable">asUri</span> <span class="hljs-operator">=</span> URI.create(request.url());<br><span class="hljs-type">String</span> <span class="hljs-variable">clientName</span> <span class="hljs-operator">=</span> asUri.getHost();<br><span class="hljs-type">URI</span> <span class="hljs-variable">uriWithoutHost</span> <span class="hljs-operator">=</span> cleanUrl(request.url(), clientName);<br>FeignLoadBalancer.<span class="hljs-type">RibbonRequest</span> <span class="hljs-variable">ribbonRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FeignLoadBalancer</span>.RibbonRequest(<br><span class="hljs-built_in">this</span>.delegate, request, uriWithoutHost);<br><br><span class="hljs-type">IClientConfig</span> <span class="hljs-variable">requestConfig</span> <span class="hljs-operator">=</span> getClientConfig(options, clientName);<br><span class="hljs-keyword">return</span> lbClient(clientName).executeWithLoadBalancer(ribbonRequest,<br>requestConfig).toResponse();<br>&#125;<br><span class="hljs-keyword">catch</span> (ClientException e) &#123;<br><span class="hljs-type">IOException</span> <span class="hljs-variable">io</span> <span class="hljs-operator">=</span> findIOException(e);<br><span class="hljs-keyword">if</span> (io != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> io;<br>&#125;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> FeignLoadBalancer <span class="hljs-title function_">lbClient</span><span class="hljs-params">(String clientName)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.lbClientFactory.create(clientName);<br>&#125;<br><br><span class="hljs-keyword">public</span> FeignLoadBalancer <span class="hljs-title function_">create</span><span class="hljs-params">(String clientName)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cache.containsKey(clientName)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.cache.get(clientName);<br>&#125;<br><span class="hljs-type">IClientConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.factory.getClientConfig(clientName);<br><span class="hljs-type">ILoadBalancer</span> <span class="hljs-variable">lb</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.factory.getLoadBalancer(clientName);<br><span class="hljs-type">ServerIntrospector</span> <span class="hljs-variable">serverIntrospector</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.factory.getInstance(clientName, ServerIntrospector.class);<br><span class="hljs-type">FeignLoadBalancer</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> enableRetry ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">RetryableFeignLoadBalancer</span>(lb, config, serverIntrospector,<br>loadBalancedRetryPolicyFactory, loadBalancedBackOffPolicyFactory, loadBalancedRetryListenerFactory) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">FeignLoadBalancer</span>(lb, config, serverIntrospector);<br><span class="hljs-built_in">this</span>.cache.put(clientName, client);<br><span class="hljs-keyword">return</span> client;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>获取request里面的url和clientName，创建了一个url</li><li>基于此url创建了一个ribbon请求</li><li>创建了一个IclientConfig</li><li>根据服务名获取对应FeignLoadBalancer。通过CachingSpringLoadBalancerFactory，将ILoadBalancer和IClientConfig传入构造了一个FeignLoadBalancer。</li></ol><p>在spring boot启动，要去获取一个ribbon的ILoadBalancer的时候，会去获取到那个服务对应的一个独立的spring容器，从这个容器里面去获取对应的独立的ZoneAwareLoadBalancer，人家自己里面就有DomainExtractingServerList，DomainExtractingServerList这个东西自己会去eureka的注册表里去抓取服务对应的注册表，server list。</p><h2 id="请求的执行"><a href="#请求的执行" class="headerlink" title="请求的执行"></a>请求的执行</h2><p>此处的代码使用了RXJava框架，因此很多回调和command。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">executeWithLoadBalancer</span><span class="hljs-params">(<span class="hljs-keyword">final</span> S request, <span class="hljs-keyword">final</span> IClientConfig requestConfig)</span> <span class="hljs-keyword">throws</span> ClientException &#123;<br>        LoadBalancerCommand&lt;T&gt; command = buildLoadBalancerCommand(request, requestConfig);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> command.submit(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerOperation</span>&lt;T&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Observable&lt;T&gt; <span class="hljs-title function_">call</span><span class="hljs-params">(Server server)</span> &#123;<br>                        <span class="hljs-type">URI</span> <span class="hljs-variable">finalUri</span> <span class="hljs-operator">=</span> reconstructURIWithServer(server, request.getUri());<br>                        <span class="hljs-type">S</span> <span class="hljs-variable">requestForServer</span> <span class="hljs-operator">=</span> (S) request.replaceUri(finalUri);<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-keyword">return</span> Observable.just(AbstractLoadBalancerAwareClient.<span class="hljs-built_in">this</span>.execute(requestForServer, requestConfig));<br>                        &#125; <br>                        <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                            <span class="hljs-keyword">return</span> Observable.error(e);<br>                        &#125;<br>                    &#125;<br>                &#125;)<br>                .toBlocking()<br>                .single();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-type">Throwable</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> e.getCause();<br>            <span class="hljs-keyword">if</span> (t <span class="hljs-keyword">instanceof</span> ClientException) &#123;<br>                <span class="hljs-keyword">throw</span> (ClientException) t;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientException</span>(e);<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br></code></pre></td></tr></table></figure><p>跟到执行请求方法中发现此处创建了一个LoadBalanceCommand，然后submit。在其中又创建了一个内部类，回调方法就是直接对筛选出来的server请求了。因此在submit方法中肯定会有一个地方根据ribbon进行服务筛选</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Observable&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerOperation&lt;T&gt; operation)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutionInfoContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionInfoContext</span>();<br>        <br>        <span class="hljs-keyword">if</span> (listenerInvoker != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                listenerInvoker.onExecutionStart();<br>            &#125; <span class="hljs-keyword">catch</span> (AbortExecutionException e) &#123;<br>                <span class="hljs-keyword">return</span> Observable.error(e);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxRetrysSame</span> <span class="hljs-operator">=</span> retryHandler.getMaxRetriesOnSameServer();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxRetrysNext</span> <span class="hljs-operator">=</span> retryHandler.getMaxRetriesOnNextServer();<br><br>        <span class="hljs-comment">// Use the load balancer</span><br>        Observable&lt;T&gt; o = <br>                (server == <span class="hljs-literal">null</span> ? selectServer() : Observable.just(server))<br>                .concatMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Func1</span>&lt;Server, Observable&lt;T&gt;&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-comment">// Called for each server being selected</span><br>                    <span class="hljs-keyword">public</span> Observable&lt;T&gt; <span class="hljs-title function_">call</span><span class="hljs-params">(Server server)</span> &#123;<br>                        context.setServer(server);<br>                        <span class="hljs-keyword">final</span> <span class="hljs-type">ServerStats</span> <span class="hljs-variable">stats</span> <span class="hljs-operator">=</span> loadBalancerContext.getServerStats(server);<br>                        <br>                        <span class="hljs-comment">// Called for each attempt and retry</span><br>                        Observable&lt;T&gt; o = Observable<br>                                .just(server)<br>                                .concatMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Func1</span>&lt;Server, Observable&lt;T&gt;&gt;() &#123;<br>                                    <span class="hljs-meta">@Override</span><br>                                    <span class="hljs-keyword">public</span> Observable&lt;T&gt; <span class="hljs-title function_">call</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Server server)</span> &#123;<br>                                        context.incAttemptCount();<br>                                        loadBalancerContext.noteOpenConnection(stats);<br>                                        <br>                                        <span class="hljs-keyword">if</span> (listenerInvoker != <span class="hljs-literal">null</span>) &#123;<br>                                            <span class="hljs-keyword">try</span> &#123;<br>                                                listenerInvoker.onStartWithServer(context.toExecutionInfo());<br>                                            &#125; <span class="hljs-keyword">catch</span> (AbortExecutionException e) &#123;<br>                                                <span class="hljs-keyword">return</span> Observable.error(e);<br>                                            &#125;<br>                                        &#125;<br>                                        <br>                                        <span class="hljs-keyword">final</span> <span class="hljs-type">Stopwatch</span> <span class="hljs-variable">tracer</span> <span class="hljs-operator">=</span> loadBalancerContext.getExecuteTracer().start();<br>                                        <br>                                        <span class="hljs-keyword">return</span> operation.call(server).doOnEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>&lt;T&gt;() &#123;<br>                                            <span class="hljs-keyword">private</span> T entity;<br>                                            <span class="hljs-meta">@Override</span><br>                                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCompleted</span><span class="hljs-params">()</span> &#123;<br>                                                recordStats(tracer, stats, entity, <span class="hljs-literal">null</span>);<br>                                                <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> What to do if onNext or onError are never called?</span><br>                                            &#125;<br><br>                                            <span class="hljs-meta">@Override</span><br>                                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Throwable e)</span> &#123;<br>                                                recordStats(tracer, stats, <span class="hljs-literal">null</span>, e);<br>                                                logger.debug(<span class="hljs-string">&quot;Got error &#123;&#125; when executed on server &#123;&#125;&quot;</span>, e, server);<br>                                                <span class="hljs-keyword">if</span> (listenerInvoker != <span class="hljs-literal">null</span>) &#123;<br>                                                    listenerInvoker.onExceptionWithServer(e, context.toExecutionInfo());<br>                                                &#125;<br>                                            &#125;<br><br>                                            <span class="hljs-meta">@Override</span><br>                                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNext</span><span class="hljs-params">(T entity)</span> &#123;<br>                                                <span class="hljs-built_in">this</span>.entity = entity;<br>                                                <span class="hljs-keyword">if</span> (listenerInvoker != <span class="hljs-literal">null</span>) &#123;<br>                                                    listenerInvoker.onExecutionSuccess(entity, context.toExecutionInfo());<br>                                                &#125;<br>                                            &#125;                            <br>                                            <br>                                            <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recordStats</span><span class="hljs-params">(Stopwatch tracer, ServerStats stats, Object entity, Throwable exception)</span> &#123;<br>                                                tracer.stop();<br>                                                loadBalancerContext.noteRequestCompletion(stats, entity, exception, tracer.getDuration(TimeUnit.MILLISECONDS), retryHandler);<br>                                            &#125;<br>                                        &#125;);<br>                                    &#125;<br>                                &#125;);<br>                        <br>                        <span class="hljs-keyword">if</span> (maxRetrysSame &gt; <span class="hljs-number">0</span>) <br>                            o = o.retry(retryPolicy(maxRetrysSame, <span class="hljs-literal">true</span>));<br>                        <span class="hljs-keyword">return</span> o;<br>                    &#125;<br>                &#125;);<br>            <br>        <span class="hljs-keyword">if</span> (maxRetrysNext &gt; <span class="hljs-number">0</span> &amp;&amp; server == <span class="hljs-literal">null</span>) <br>            o = o.retry(retryPolicy(maxRetrysNext, <span class="hljs-literal">false</span>));<br>        <br>        <span class="hljs-keyword">return</span> o.onErrorResumeNext(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Func1</span>&lt;Throwable, Observable&lt;T&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Observable&lt;T&gt; <span class="hljs-title function_">call</span><span class="hljs-params">(Throwable e)</span> &#123;<br>                <span class="hljs-keyword">if</span> (context.getAttemptCount() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (maxRetrysNext &gt; <span class="hljs-number">0</span> &amp;&amp; context.getServerAttemptCount() == (maxRetrysNext + <span class="hljs-number">1</span>)) &#123;<br>                        e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientException</span>(ClientException.ErrorType.NUMBEROF_RETRIES_NEXTSERVER_EXCEEDED,<br>                                <span class="hljs-string">&quot;Number of retries on next server exceeded max &quot;</span> + maxRetrysNext<br>                                + <span class="hljs-string">&quot; retries, while making a call for: &quot;</span> + context.getServer(), e);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (maxRetrysSame &gt; <span class="hljs-number">0</span> &amp;&amp; context.getAttemptCount() == (maxRetrysSame + <span class="hljs-number">1</span>)) &#123;<br>                        e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientException</span>(ClientException.ErrorType.NUMBEROF_RETRIES_EXEEDED,<br>                                <span class="hljs-string">&quot;Number of retries exceeded max &quot;</span> + maxRetrysSame<br>                                + <span class="hljs-string">&quot; retries, while making a call for: &quot;</span> + context.getServer(), e);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (listenerInvoker != <span class="hljs-literal">null</span>) &#123;<br>                    listenerInvoker.onExecutionFailed(e, context.toFinalExecutionInfo());<br>                &#125;<br>                <span class="hljs-keyword">return</span> Observable.error(e);<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><p>在上面的回调之前发现了一个方法selectServer，就是对服务进行筛选</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Observable&lt;Server&gt; <span class="hljs-title function_">selectServer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Observable.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnSubscribe</span>&lt;Server&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-built_in">super</span> Server&gt; next)</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">Server</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> loadBalancerContext.getServerFromLoadBalancer(loadBalancerURI, loadBalancerKey);   <br>                    next.onNext(server);<br>                    next.onCompleted();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    next.onError(e);<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="解析响应"><a href="#解析响应" class="headerlink" title="解析响应"></a>解析响应</h2><p>回到SynchronousMethodHandler中，在生成request请求之后，返回的response在此处会进行解析。即使用组件传入的decoder进行解析。</p><h1 id="四、连接超时与失败重试"><a href="#四、连接超时与失败重试" class="headerlink" title="四、连接超时与失败重试"></a>四、连接超时与失败重试</h1><p>FeignLoadBalancer.getRequestSpecificRetryHandler()方法中，就会读取你配置的几个参数：OkToRetryOnAllOperations、MaxAutoRetries、MaxAutoRetriesNextServer。<br>LoadBalancerCommand.submit()方法中，也就是在执行请求逻辑的时候，读取RetryHandler中配置的参数，会根据请求的情况，是否报错，是否报异常，进行重试的控制。<br>FeignLoadBalancer.execute()，发送实际的http请求的时候，就会传入你设置的超时的参数<br>retry:enabled，其实是控制之前有一个组件，叫做Retryer，默认是NoRetryer，但是如果启用了那个参数之后，就会打开这个重试，会使用一个支持重试的Retryer，Retryer在两个地方有使用<br>SynchronousMethodHandler.invoke()方法里面，如果抛了异常的话，也会默认根据Retryer进行重试</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring整合eureka</title>
    <link href="/2022/05/07/%E6%BA%90%E7%A0%81/eureka/spring%E6%95%B4%E5%90%88eureka/"/>
    <url>/2022/05/07/%E6%BA%90%E7%A0%81/eureka/spring%E6%95%B4%E5%90%88eureka/</url>
    
    <content type="html"><![CDATA[<h1 id="一、eureka-server端整合"><a href="#一、eureka-server端整合" class="headerlink" title="一、eureka server端整合"></a>一、eureka server端整合</h1><ol><li>eureka server注解为<code>@EnableEurekaServer</code>，其中引入<code>EurekaServerMarkerConfiguration</code>，其又依赖于<code>EurekaServerAutoConfiguration</code>。</li><li>其中初始化了bean：<code>EurekaServerConfigBean</code>,实现了<code>EurekaServerConfig</code>接口，将默认参数可以按yml中配置替换</li><li>在<code>EurekaServerAutoConfiguration</code>中又引入了<code>EurekaServerInitializerConfiguration</code>作为初始化配置。在此处会启动一个线程去调用<code>EurekaServerBootstrap</code>原生初始化方法</li></ol><h1 id="二、eureka-client端整合"><a href="#二、eureka-client端整合" class="headerlink" title="二、eureka client端整合"></a>二、eureka client端整合</h1>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eureka server集群</title>
    <link href="/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka-server%E9%9B%86%E7%BE%A4/"/>
    <url>/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka-server%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="一、注册表同步以及高可用"><a href="#一、注册表同步以及高可用" class="headerlink" title="一、注册表同步以及高可用"></a>一、注册表同步以及高可用</h1><h2 id="1-流程图"><a href="#1-流程图" class="headerlink" title="1.流程图"></a>1.流程图</h2><p><a href="https://www.processon.com/view/link/6170334863768961e9dc2a1d">点击查看【processon】</a></p><h2 id="2-说明"><a href="#2-说明" class="headerlink" title="2.说明"></a>2.说明</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></div></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initEurekaServerContext</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   ...<br>       serverContext.initialize();<br>       <br>       <span class="hljs-type">int</span> <span class="hljs-variable">registryCount</span> <span class="hljs-operator">=</span> registry.syncUp();<br>   ...<br>   &#125;<br><br><span class="hljs-meta">@PostConstruct</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       logger.info(<span class="hljs-string">&quot;Initializing ...&quot;</span>);<br>       peerEurekaNodes.start();<br>       registry.init(peerEurekaNodes);<br>       logger.info(<span class="hljs-string">&quot;Initialized&quot;</span>);<br>   &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>       taskExecutor = Executors.newSingleThreadScheduledExecutor(<br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactory</span>() &#123;<br>                   <span class="hljs-meta">@Override</span><br>                   <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>                       <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r, <span class="hljs-string">&quot;Eureka-PeerNodesUpdater&quot;</span>);<br>                       thread.setDaemon(<span class="hljs-literal">true</span>);<br>                       <span class="hljs-keyword">return</span> thread;<br>                   &#125;<br>               &#125;<br>       );<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//根据eureka server地址  更新集群信息</span><br>           updatePeerEurekaNodes(resolvePeerUrls());<br>           <span class="hljs-type">Runnable</span> <span class="hljs-variable">peersUpdateTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>               <span class="hljs-meta">@Override</span><br>               <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                   <span class="hljs-keyword">try</span> &#123;<br>                       updatePeerEurekaNodes(resolvePeerUrls());<br>                   &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                       logger.error(<span class="hljs-string">&quot;Cannot update the replica Nodes&quot;</span>, e);<br>                   &#125;<br><br>               &#125;<br>           &#125;;<br>           <span class="hljs-comment">//默认10分钟</span><br>           taskExecutor.scheduleWithFixedDelay(<br>                   peersUpdateTask,<br>                   serverConfig.getPeerEurekaNodesUpdateIntervalMs(),<br>                   serverConfig.getPeerEurekaNodesUpdateIntervalMs(),<br>                   TimeUnit.MILLISECONDS<br>           );<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(e);<br>       &#125;<br>       <span class="hljs-keyword">for</span> (PeerEurekaNode node : peerEurekaNodes) &#123;<br>           logger.info(<span class="hljs-string">&quot;Replica node URL:  &quot;</span> + node.getServiceUrl());<br>       &#125;<br>   &#125;<br><br><br><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">syncUp</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">// Copy entire entry from neighboring DS node</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>       <span class="hljs-comment">//((i &lt; serverConfig.getRegistrySyncRetries()) &amp;&amp; (count == 0)) 重试机制</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ((i &lt; serverConfig.getRegistrySyncRetries()) &amp;&amp; (count == <span class="hljs-number">0</span>)); i++) &#123;<br>           <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   <span class="hljs-comment">/*</span><br><span class="hljs-comment">                       如果第一次没有在自己本地的eureka  client中获取注册表</span><br><span class="hljs-comment">                       说明自己本地的eureka client还没有从任何其他的eureka server上获取注册表</span><br><span class="hljs-comment">                       所以此时重置，等待30s</span><br><span class="hljs-comment">                    */</span><br>                   Thread.sleep(serverConfig.getRegistrySyncRetryWaitMs());<br>               &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                   logger.warn(<span class="hljs-string">&quot;Interrupted during registry transfer..&quot;</span>);<br>                   <span class="hljs-keyword">break</span>;<br>               &#125;<br>           &#125;<br>           <span class="hljs-comment">//将自己作为client 去 其他 server拉取注册表</span><br>           <span class="hljs-type">Applications</span> <span class="hljs-variable">apps</span> <span class="hljs-operator">=</span> eurekaClient.getApplications();<br>           <span class="hljs-keyword">for</span> (Application app : apps.getRegisteredApplications()) &#123;<br>               <span class="hljs-keyword">for</span> (InstanceInfo instance : app.getInstances()) &#123;<br>                   <span class="hljs-keyword">try</span> &#123;<br>                       <span class="hljs-keyword">if</span> (isRegisterable(instance)) &#123;<br>                           register(instance, instance.getLeaseInfo().getDurationInSecs(), <span class="hljs-literal">true</span>);<br>                           count++;<br>                       &#125;<br>                   &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                       logger.error(<span class="hljs-string">&quot;During DS init copy&quot;</span>, t);<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> count;<br>   &#125;<br><br><br><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-keyword">final</span> InstanceInfo info, <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> isReplication)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">leaseDuration</span> <span class="hljs-operator">=</span> Lease.DEFAULT_DURATION_IN_SECS;<br>       <span class="hljs-keyword">if</span> (info.getLeaseInfo() != <span class="hljs-literal">null</span> &amp;&amp; info.getLeaseInfo().getDurationInSecs() &gt; <span class="hljs-number">0</span>) &#123;<br>           leaseDuration = info.getLeaseInfo().getDurationInSecs();<br>       &#125;<br>       <span class="hljs-comment">//注册</span><br>       <span class="hljs-built_in">super</span>.register(info, leaseDuration, isReplication);<br>       <span class="hljs-comment">//同步信息给其他集群</span><br>       replicateToPeers(Action.Register, info.getAppName(), info.getId(), info, <span class="hljs-literal">null</span>, isReplication);<br>   &#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replicateToPeers</span><span class="hljs-params">(Action action, String appName, String id,</span><br><span class="hljs-params">                                 InstanceInfo info <span class="hljs-comment">/* optional */</span>,</span><br><span class="hljs-params">                                 InstanceStatus newStatus <span class="hljs-comment">/* optional */</span>, <span class="hljs-type">boolean</span> isReplication)</span> &#123;<br>       <span class="hljs-comment">//client 找 server 进行注册，isReplication 为 false</span><br>       <span class="hljs-type">Stopwatch</span> <span class="hljs-variable">tracer</span> <span class="hljs-operator">=</span> action.getTimer().start();<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">if</span> (isReplication) &#123;<br>               numberOfReplicationsLastMin.increment();<br>           &#125;<br>           <span class="hljs-comment">// If it is a replication already, do not replicate again as this will create a poison replication</span><br>           <span class="hljs-keyword">if</span> (peerEurekaNodes == Collections.EMPTY_LIST || isReplication) &#123;<br>               <span class="hljs-keyword">return</span>;<br>           &#125;<br><br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) &#123;<br>               <span class="hljs-comment">// If the url represents this host, do not replicate to yourself.</span><br>               <span class="hljs-keyword">if</span> (peerEurekaNodes.isThisMyUrl(node.getServiceUrl())) &#123;<br>                   <span class="hljs-keyword">continue</span>;<br>               &#125;<br>               replicateInstanceActionsToPeers(action, appName, id, info, newStatus, node);<br>           &#125;<br>       &#125; <span class="hljs-keyword">finally</span> &#123;<br>           tracer.stop();<br>       &#125;<br>   &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replicateInstanceActionsToPeers</span><span class="hljs-params">(Action action, String appName,</span><br><span class="hljs-params">                                                String id, InstanceInfo info, InstanceStatus newStatus,</span><br><span class="hljs-params">                                                PeerEurekaNode node)</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-type">InstanceInfo</span> <span class="hljs-variable">infoFromRegistry</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>           CurrentRequestVersion.set(Version.V2);<br>           <span class="hljs-keyword">switch</span> (action) &#123;<br>               <span class="hljs-keyword">case</span> Cancel:<br>                   node.cancel(appName, id);<br>                   <span class="hljs-keyword">break</span>;<br>               <span class="hljs-keyword">case</span> Heartbeat:<br>                   <span class="hljs-type">InstanceStatus</span> <span class="hljs-variable">overriddenStatus</span> <span class="hljs-operator">=</span> overriddenInstanceStatusMap.get(id);<br>                   infoFromRegistry = getInstanceByAppAndId(appName, id, <span class="hljs-literal">false</span>);<br>                   node.heartbeat(appName, id, infoFromRegistry, overriddenStatus, <span class="hljs-literal">false</span>);<br>                   <span class="hljs-keyword">break</span>;<br>               <span class="hljs-keyword">case</span> Register:<br>                   node.register(info);<br>                   <span class="hljs-keyword">break</span>;<br>               <span class="hljs-keyword">case</span> StatusUpdate:<br>                   infoFromRegistry = getInstanceByAppAndId(appName, id, <span class="hljs-literal">false</span>);<br>                   node.statusUpdate(appName, id, newStatus, infoFromRegistry);<br>                   <span class="hljs-keyword">break</span>;<br>               <span class="hljs-keyword">case</span> DeleteStatusOverride:<br>                   infoFromRegistry = getInstanceByAppAndId(appName, id, <span class="hljs-literal">false</span>);<br>                   node.deleteStatusOverride(appName, id, infoFromRegistry);<br>                   <span class="hljs-keyword">break</span>;<br>           &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>           logger.error(<span class="hljs-string">&quot;Cannot replicate information to &#123;&#125; for action &#123;&#125;&quot;</span>, node.getServiceUrl(), action.name(), t);<br>       &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure><ol><li>在EurekaBootStrap中的PeerEurekaNodes，初始化eureka server集群信息的初始化<ol><li>解析配置文件中其他eureka server的url地址，基于url地址构造一个个PeerEurekaNode，每个PeerEurekaNode代表了一个eureka server。</li><li>启动一个后台线程，默认10分钟运行一次，去基于配置文件中的url去刷新eureka server列表</li></ol></li><li>registry.syncUp 从相邻的eureka节点拷贝注册信息<ol><li>当前的eureka server会将自己作为一个eureka client从任何一个其他的eureka server拉取注册表过来放在自己本地，作为初始的注册表。</li></ol></li><li>注册、下线、故障、心跳<ol><li>已注册为例，client会发送http请求在server端，调用addInstance方法。</li><li>除了正常注册流程，还会同步信息给其他集群</li><li>如果是某台eureka client来找eureka server进行注册，isReplication是false，此时会给其他所有的你配置的eureka server都同步这个注册请求，此时一定会基于jersey，调用其他所有的eureka server的restful接口，去执行这个服务实例的注册的请求。eureka-core-jersey2的工程，ReplicationHttpClient，此时同步注册请求给其他eureka server的时候，一定会将isReplication设置为true，这个东西可以确保说什么呢，其他eureka server接到这个同步的请求，仅仅在自己本地执行，不会再次向其他的eureka server去进行注册</li></ol></li></ol><h1 id="二、基于三层队列的批处理机制"><a href="#二、基于三层队列的批处理机制" class="headerlink" title="二、基于三层队列的批处理机制"></a>二、基于三层队列的批处理机制</h1><p>1.流程图<br><a href="https://www.processon.com/view/link/617033f80e3e747d1c8deced">点击查看【processon】</a><br>集群同步机制优点</p><ol><li>client可以找任何一个server发送请求，这个server会将请求同步到其他所有的server上。但是其他的server接收到请求仅会在自己本地执行，不会再次同步</li><li>数据同步的异步处理机制：使用三个队列，第一个队列纯写入；第二个队列用来根据时间和大小拆分队列；第三个队列用来放批处理任务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;ID, T&gt; TaskDispatcher&lt;ID, T&gt; <span class="hljs-title function_">createBatchingTaskDispatcher</span><span class="hljs-params">(String id,</span><br><span class="hljs-params">                                                                             <span class="hljs-type">int</span> maxBufferSize,</span><br><span class="hljs-params">                                                                             <span class="hljs-type">int</span> workloadSize,</span><br><span class="hljs-params">                                                                             <span class="hljs-type">int</span> workerCount,</span><br><span class="hljs-params">                                                                             <span class="hljs-type">long</span> maxBatchingDelay,</span><br><span class="hljs-params">                                                                             <span class="hljs-type">long</span> congestionRetryDelayMs,</span><br><span class="hljs-params">                                                                             <span class="hljs-type">long</span> networkFailureRetryMs,</span><br><span class="hljs-params">                                                                             TaskProcessor&lt;T&gt; taskProcessor)</span> &#123;<br>        <span class="hljs-keyword">final</span> AcceptorExecutor&lt;ID, T&gt; acceptorExecutor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AcceptorExecutor</span>&lt;&gt;(<br>                id, maxBufferSize, workloadSize, maxBatchingDelay, congestionRetryDelayMs, networkFailureRetryMs<br>        );<br>        <span class="hljs-keyword">final</span> TaskExecutors&lt;ID, T&gt; taskExecutor = TaskExecutors.batchExecutors(id, workerCount, taskProcessor, acceptorExecutor);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskDispatcher</span>&lt;ID, T&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(ID id, T task, <span class="hljs-type">long</span> expiryTime)</span> &#123;<br>                acceptorExecutor.process(id, task, expiryTime);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>                acceptorExecutor.shutdown();<br>                taskExecutor.shutdown();<br>            &#125;<br>        &#125;;<br>    &#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AcceptorExecutor</span>&lt;ID, T&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(AcceptorExecutor.class);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> maxBufferSize;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> maxBatchingSize;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> maxBatchingDelay;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicBoolean</span> <span class="hljs-variable">isShutdown</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicBoolean</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BlockingQueue&lt;TaskHolder&lt;ID, T&gt;&gt; acceptorQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BlockingDeque&lt;TaskHolder&lt;ID, T&gt;&gt; reprocessQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Thread acceptorThread;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;ID, TaskHolder&lt;ID, T&gt;&gt; pendingTasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Deque&lt;ID&gt; processingOrder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Semaphore</span> <span class="hljs-variable">singleItemWorkRequests</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BlockingQueue&lt;TaskHolder&lt;ID, T&gt;&gt; singleItemWorkQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Semaphore</span> <span class="hljs-variable">batchWorkRequests</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BlockingQueue&lt;List&lt;TaskHolder&lt;ID, T&gt;&gt;&gt; batchWorkQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TrafficShaper trafficShaper;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Metrics</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Monitor(name = METRIC_REPLICATION_PREFIX + &quot;acceptedTasks&quot;, description = &quot;Number of accepted tasks&quot;, type = DataSourceType.COUNTER)</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> acceptedTasks;<br><br>    <span class="hljs-meta">@Monitor(name = METRIC_REPLICATION_PREFIX + &quot;replayedTasks&quot;, description = &quot;Number of replayedTasks tasks&quot;, type = DataSourceType.COUNTER)</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> replayedTasks;<br><br>    <span class="hljs-meta">@Monitor(name = METRIC_REPLICATION_PREFIX + &quot;expiredTasks&quot;, description = &quot;Number of expired tasks&quot;, type = DataSourceType.COUNTER)</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> expiredTasks;<br><br>    <span class="hljs-meta">@Monitor(name = METRIC_REPLICATION_PREFIX + &quot;overriddenTasks&quot;, description = &quot;Number of overridden tasks&quot;, type = DataSourceType.COUNTER)</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> overriddenTasks;<br><br>    <span class="hljs-meta">@Monitor(name = METRIC_REPLICATION_PREFIX + &quot;queueOverflows&quot;, description = &quot;Number of queue overflows&quot;, type = DataSourceType.COUNTER)</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> queueOverflows;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Timer batchSizeMetric;<br><br>    AcceptorExecutor(String id,<br>                     <span class="hljs-type">int</span> maxBufferSize,<br>                     <span class="hljs-type">int</span> maxBatchingSize,<br>                     <span class="hljs-type">long</span> maxBatchingDelay,<br>                     <span class="hljs-type">long</span> congestionRetryDelayMs,<br>                     <span class="hljs-type">long</span> networkFailureRetryMs) &#123;<br>        <span class="hljs-built_in">this</span>.maxBufferSize = maxBufferSize;<br>        <span class="hljs-built_in">this</span>.maxBatchingSize = maxBatchingSize;<br>        <span class="hljs-built_in">this</span>.maxBatchingDelay = maxBatchingDelay;<br>        <span class="hljs-built_in">this</span>.trafficShaper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrafficShaper</span>(congestionRetryDelayMs, networkFailureRetryMs);<br><br>        <span class="hljs-type">ThreadGroup</span> <span class="hljs-variable">threadGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadGroup</span>(<span class="hljs-string">&quot;eurekaTaskExecutors&quot;</span>);<br>        <span class="hljs-built_in">this</span>.acceptorThread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(threadGroup, <span class="hljs-keyword">new</span> <span class="hljs-title class_">AcceptorRunner</span>(), <span class="hljs-string">&quot;TaskAcceptor-&quot;</span> + id);<br>        <span class="hljs-built_in">this</span>.acceptorThread.setDaemon(<span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">this</span>.acceptorThread.start();<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[] percentiles = &#123;<span class="hljs-number">50.0</span>, <span class="hljs-number">95.0</span>, <span class="hljs-number">99.0</span>, <span class="hljs-number">99.5</span>&#125;;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StatsConfig</span> <span class="hljs-variable">statsConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StatsConfig</span>.Builder()<br>                .withSampleSize(<span class="hljs-number">1000</span>)<br>                .withPercentiles(percentiles)<br>                .withPublishStdDev(<span class="hljs-literal">true</span>)<br>                .build();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">MonitorConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> MonitorConfig.builder(METRIC_REPLICATION_PREFIX + <span class="hljs-string">&quot;batchSize&quot;</span>).build();<br>        <span class="hljs-built_in">this</span>.batchSizeMetric = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StatsTimer</span>(config, statsConfig);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Monitors.registerObject(id, <span class="hljs-built_in">this</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            logger.warn(<span class="hljs-string">&quot;Cannot register servo monitor for this object&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(ID id, T task, <span class="hljs-type">long</span> expiryTime)</span> &#123;<br>        acceptorQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskHolder</span>&lt;ID, T&gt;(id, task, expiryTime));<br>        acceptedTasks++;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reprocess</span><span class="hljs-params">(List&lt;TaskHolder&lt;ID, T&gt;&gt; holders, ProcessingResult processingResult)</span> &#123;<br>        reprocessQueue.addAll(holders);<br>        replayedTasks += holders.size();<br>        trafficShaper.registerFailure(processingResult);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reprocess</span><span class="hljs-params">(TaskHolder&lt;ID, T&gt; taskHolder, ProcessingResult processingResult)</span> &#123;<br>        reprocessQueue.add(taskHolder);<br>        replayedTasks++;<br>        trafficShaper.registerFailure(processingResult);<br>    &#125;<br><br>    BlockingQueue&lt;TaskHolder&lt;ID, T&gt;&gt; <span class="hljs-title function_">requestWorkItem</span><span class="hljs-params">()</span> &#123;<br>        singleItemWorkRequests.release();<br>        <span class="hljs-keyword">return</span> singleItemWorkQueue;<br>    &#125;<br><br>    BlockingQueue&lt;List&lt;TaskHolder&lt;ID, T&gt;&gt;&gt; <span class="hljs-title function_">requestWorkItems</span><span class="hljs-params">()</span> &#123;<br>        batchWorkRequests.release();<br>        <span class="hljs-keyword">return</span> batchWorkQueue;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isShutdown.compareAndSet(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)) &#123;<br>            acceptorThread.interrupt();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Monitor(name = METRIC_REPLICATION_PREFIX + &quot;acceptorQueueSize&quot;, description = &quot;Number of tasks waiting in the acceptor queue&quot;, type = DataSourceType.GAUGE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getAcceptorQueueSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> acceptorQueue.size();<br>    &#125;<br><br>    <span class="hljs-meta">@Monitor(name = METRIC_REPLICATION_PREFIX + &quot;reprocessQueueSize&quot;, description = &quot;Number of tasks waiting in the reprocess queue&quot;, type = DataSourceType.GAUGE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getReprocessQueueSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> reprocessQueue.size();<br>    &#125;<br><br>    <span class="hljs-meta">@Monitor(name = METRIC_REPLICATION_PREFIX + &quot;queueSize&quot;, description = &quot;Task queue size&quot;, type = DataSourceType.GAUGE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getQueueSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pendingTasks.size();<br>    &#125;<br><br>    <span class="hljs-meta">@Monitor(name = METRIC_REPLICATION_PREFIX + &quot;pendingJobRequests&quot;, description = &quot;Number of worker threads awaiting job assignment&quot;, type = DataSourceType.GAUGE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getPendingJobRequests</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> singleItemWorkRequests.availablePermits() + batchWorkRequests.availablePermits();<br>    &#125;<br><br>    <span class="hljs-meta">@Monitor(name = METRIC_REPLICATION_PREFIX + &quot;availableJobs&quot;, description = &quot;Number of jobs ready to be taken by the workers&quot;, type = DataSourceType.GAUGE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">workerTaskQueueSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> singleItemWorkQueue.size() + batchWorkQueue.size();<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">AcceptorRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">scheduleTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (!isShutdown.get()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    drainInputQueues();<br><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">totalItems</span> <span class="hljs-operator">=</span> processingOrder.size();<br><br>                    <span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                    <span class="hljs-keyword">if</span> (scheduleTime &lt; now) &#123;<br>                        scheduleTime = now + trafficShaper.transmissionDelay();<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (scheduleTime &lt;= now) &#123;<br>                        assignBatchWork();<br>                        assignSingleItemWork();<br>                    &#125;<br><br>                    <span class="hljs-comment">// If no worker is requesting data or there is a delay injected by the traffic shaper,</span><br>                    <span class="hljs-comment">// sleep for some time to avoid tight loop.</span><br>                    <span class="hljs-keyword">if</span> (totalItems == processingOrder.size()) &#123;<br>                        Thread.sleep(<span class="hljs-number">10</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException ex) &#123;<br>                    <span class="hljs-comment">// Ignore</span><br>                &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                    <span class="hljs-comment">// Safe-guard, so we never exit this loop in an uncontrolled way.</span><br>                    logger.warn(<span class="hljs-string">&quot;Discovery AcceptorThread error&quot;</span>, e);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> pendingTasks.size() &gt;= maxBufferSize;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drainInputQueues</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">do</span> &#123;<br>                drainReprocessQueue();<br>                drainAcceptorQueue();<br><br>                <span class="hljs-keyword">if</span> (!isShutdown.get()) &#123;<br>                    <span class="hljs-comment">// If all queues are empty, block for a while on the acceptor queue</span><br>                    <span class="hljs-keyword">if</span> (reprocessQueue.isEmpty() &amp;&amp; acceptorQueue.isEmpty() &amp;&amp; pendingTasks.isEmpty()) &#123;<br>                        TaskHolder&lt;ID, T&gt; taskHolder = acceptorQueue.poll(<span class="hljs-number">10</span>, TimeUnit.MILLISECONDS);<br>                        <span class="hljs-keyword">if</span> (taskHolder != <span class="hljs-literal">null</span>) &#123;<br>                            appendTaskHolder(taskHolder);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">while</span> (!reprocessQueue.isEmpty() || !acceptorQueue.isEmpty() || pendingTasks.isEmpty());<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drainAcceptorQueue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span> (!acceptorQueue.isEmpty()) &#123;<br>                appendTaskHolder(acceptorQueue.poll());<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drainReprocessQueue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-keyword">while</span> (!reprocessQueue.isEmpty() &amp;&amp; !isFull()) &#123;<br>                TaskHolder&lt;ID, T&gt; taskHolder = reprocessQueue.pollLast();<br>                <span class="hljs-type">ID</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> taskHolder.getId();<br>                <span class="hljs-keyword">if</span> (taskHolder.getExpiryTime() &lt;= now) &#123;<br>                    expiredTasks++;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pendingTasks.containsKey(id)) &#123;<br>                    overriddenTasks++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    pendingTasks.put(id, taskHolder);<br>                    processingOrder.addFirst(id);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (isFull()) &#123;<br>                queueOverflows += reprocessQueue.size();<br>                reprocessQueue.clear();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendTaskHolder</span><span class="hljs-params">(TaskHolder&lt;ID, T&gt; taskHolder)</span> &#123;<br>            <span class="hljs-keyword">if</span> (isFull()) &#123;<br>                pendingTasks.remove(processingOrder.poll());<br>                queueOverflows++;<br>            &#125;<br>            TaskHolder&lt;ID, T&gt; previousTask = pendingTasks.put(taskHolder.getId(), taskHolder);<br>            <span class="hljs-keyword">if</span> (previousTask == <span class="hljs-literal">null</span>) &#123;<br>                processingOrder.add(taskHolder.getId());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                overriddenTasks++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">assignSingleItemWork</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!processingOrder.isEmpty()) &#123;<br>                <span class="hljs-keyword">if</span> (singleItemWorkRequests.tryAcquire(<span class="hljs-number">1</span>)) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                    <span class="hljs-keyword">while</span> (!processingOrder.isEmpty()) &#123;<br>                        <span class="hljs-type">ID</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> processingOrder.poll();<br>                        TaskHolder&lt;ID, T&gt; holder = pendingTasks.remove(id);<br>                        <span class="hljs-keyword">if</span> (holder.getExpiryTime() &gt; now) &#123;<br>                            singleItemWorkQueue.add(holder);<br>                            <span class="hljs-keyword">return</span>;<br>                        &#125;<br>                        expiredTasks++;<br>                    &#125;<br>                    singleItemWorkRequests.release();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">assignBatchWork</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (hasEnoughTasksForNextBatch()) &#123;<br>                <span class="hljs-keyword">if</span> (batchWorkRequests.tryAcquire(<span class="hljs-number">1</span>)) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> Math.min(maxBatchingSize, processingOrder.size());<br>                    List&lt;TaskHolder&lt;ID, T&gt;&gt; holders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(len);<br>                    <span class="hljs-keyword">while</span> (holders.size() &lt; len &amp;&amp; !processingOrder.isEmpty()) &#123;<br>                        <span class="hljs-type">ID</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> processingOrder.poll();<br>                        TaskHolder&lt;ID, T&gt; holder = pendingTasks.remove(id);<br>                        <span class="hljs-keyword">if</span> (holder.getExpiryTime() &gt; now) &#123;<br>                            holders.add(holder);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            expiredTasks++;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (holders.isEmpty()) &#123;<br>                        batchWorkRequests.release();<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        batchSizeMetric.record(holders.size(), TimeUnit.MILLISECONDS);<br>                        batchWorkQueue.add(holders);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasEnoughTasksForNextBatch</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (processingOrder.isEmpty()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (pendingTasks.size() &gt;= maxBufferSize) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            TaskHolder&lt;ID, T&gt; nextHolder = pendingTasks.get(processingOrder.peek());<br>            <span class="hljs-type">long</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - nextHolder.getSubmitTimestamp();<br>            <span class="hljs-keyword">return</span> delay &gt;= maxBatchingDelay;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eureka服务续约与下线机制</title>
    <link href="/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka%E6%9C%8D%E5%8A%A1%E7%BB%AD%E7%BA%A6%E4%B8%8E%E4%B8%8B%E7%BA%BF%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka%E6%9C%8D%E5%8A%A1%E7%BB%AD%E7%BA%A6%E4%B8%8E%E4%B8%8B%E7%BA%BF%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、eureka心跳机制"><a href="#一、eureka心跳机制" class="headerlink" title="一、eureka心跳机制"></a>一、eureka心跳机制</h1><h2 id="1-入口"><a href="#1-入口" class="headerlink" title="1.入口"></a>1.入口</h2><p>在初始化调度任务的时候，初始化了一个心跳任务</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">renewalIntervalInSecs</span> <span class="hljs-operator">=</span> instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();<br>           <span class="hljs-type">int</span> <span class="hljs-variable">expBackOffBound</span> <span class="hljs-operator">=</span> clientConfig.getHeartbeatExecutorExponentialBackOffBound();<br>           logger.info(<span class="hljs-string">&quot;Starting heartbeat executor: &quot;</span> + <span class="hljs-string">&quot;renew interval is: &quot;</span> + renewalIntervalInSecs);<br><br>           <span class="hljs-comment">// Heartbeat timer</span><br>           scheduler.schedule(<br>                   <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimedSupervisorTask</span>(<br>                           <span class="hljs-string">&quot;heartbeat&quot;</span>,<br>                           scheduler,<br>                           heartbeatExecutor,<br>                           renewalIntervalInSecs,<br>                           TimeUnit.SECONDS,<br>                           expBackOffBound,<br>                           <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeartbeatThread</span>()<br>                   ),<br>                   renewalIntervalInSecs, TimeUnit.SECONDS);<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeartbeatThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>           <span class="hljs-keyword">if</span> (renew()) &#123;<br>               lastSuccessfulHeartbeatTimestamp = System.currentTimeMillis();<br>           &#125;<br>       &#125;<br>   &#125;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">renew</span><span class="hljs-params">()</span> &#123;<br>       EurekaHttpResponse&lt;InstanceInfo&gt; httpResponse;<br>       <span class="hljs-keyword">try</span> &#123;<br>           httpResponse = eurekaTransport.registrationClient.sendHeartBeat(instanceInfo.getAppName(), instanceInfo.getId(), instanceInfo, <span class="hljs-literal">null</span>);<br>           logger.debug(<span class="hljs-string">&quot;&#123;&#125; - Heartbeat status: &#123;&#125;&quot;</span>, PREFIX + appPathIdentifier, httpResponse.getStatusCode());<br>           <span class="hljs-keyword">if</span> (httpResponse.getStatusCode() == <span class="hljs-number">404</span>) &#123;<br>               REREGISTER_COUNTER.increment();<br>               logger.info(<span class="hljs-string">&quot;&#123;&#125; - Re-registering apps/&#123;&#125;&quot;</span>, PREFIX + appPathIdentifier, instanceInfo.getAppName());<br>               <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> instanceInfo.setIsDirtyWithTime();<br>               <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> register();<br>               <span class="hljs-keyword">if</span> (success) &#123;<br>                   instanceInfo.unsetIsDirty(timestamp);<br>               &#125;<br>               <span class="hljs-keyword">return</span> success;<br>           &#125;<br>           <span class="hljs-keyword">return</span> httpResponse.getStatusCode() == <span class="hljs-number">200</span>;<br>       &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>           logger.error(<span class="hljs-string">&quot;&#123;&#125; - was unable to send heartbeat!&quot;</span>, PREFIX + appPathIdentifier, e);<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-jersey查找请求流程"><a href="#2-jersey查找请求流程" class="headerlink" title="2.jersey查找请求流程"></a>2.jersey查找请求流程</h2><p>在eureka client端发送请求，走的是EurekaHttpClient的sendHeartbeat()方法，<a href="http://localhost:8080/v2/apps/ServiceA/i-000000-1%EF%BC%8C%E8%B5%B0%E7%9A%84%E6%98%AFPUT%E8%AF%B7%E6%B1%82">http://localhost:8080/v2/apps/ServiceA/i-000000-1，走的是PUT请求</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ApplicationsResource</span><br><span class="hljs-meta">@Path(&quot;&#123;appId&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> ApplicationResource <span class="hljs-title function_">getApplicationResource</span><span class="hljs-params">(</span><br><span class="hljs-params">           <span class="hljs-meta">@PathParam(&quot;version&quot;)</span> String version,</span><br><span class="hljs-params">           <span class="hljs-meta">@PathParam(&quot;appId&quot;)</span> String appId)</span> &#123;<br>       CurrentRequestVersion.set(Version.toEnum(version));<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationResource</span>(appId, serverConfig, registry);<br>   &#125;<br><br><span class="hljs-comment">//ApplicationResource</span><br><span class="hljs-meta">@Path(&quot;&#123;id&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> InstanceResource <span class="hljs-title function_">getInstanceInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathParam(&quot;id&quot;)</span> String id)</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstanceResource</span>(<span class="hljs-built_in">this</span>, id, serverConfig, registry);<br>   &#125;<br><br><span class="hljs-comment">//InstanceResource</span><br><span class="hljs-meta">@PUT</span><br>   <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">renewLease</span><span class="hljs-params">(</span><br><span class="hljs-params">           <span class="hljs-meta">@HeaderParam(PeerEurekaNode.HEADER_REPLICATION)</span> String isReplication,</span><br><span class="hljs-params">           <span class="hljs-meta">@QueryParam(&quot;overriddenstatus&quot;)</span> String overriddenStatus,</span><br><span class="hljs-params">           <span class="hljs-meta">@QueryParam(&quot;status&quot;)</span> String status,</span><br><span class="hljs-params">           <span class="hljs-meta">@QueryParam(&quot;lastDirtyTimestamp&quot;)</span> String lastDirtyTimestamp)</span> &#123;<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">isFromReplicaNode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;true&quot;</span>.equals(isReplication);<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> registry.renew(app.getName(), id, isFromReplicaNode);<br><br>       <span class="hljs-comment">// Not found in the registry, immediately ask for a register</span><br>       <span class="hljs-keyword">if</span> (!isSuccess) &#123;<br>           logger.warn(<span class="hljs-string">&quot;Not Found (Renew): &#123;&#125; - &#123;&#125;&quot;</span>, app.getName(), id);<br>           <span class="hljs-keyword">return</span> Response.status(Status.NOT_FOUND).build();<br>       &#125;<br>       <span class="hljs-comment">// Check if we need to sync based on dirty time stamp, the client</span><br>       <span class="hljs-comment">// instance might have changed some value</span><br>       <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>       <span class="hljs-keyword">if</span> (lastDirtyTimestamp != <span class="hljs-literal">null</span> &amp;&amp; serverConfig.shouldSyncWhenTimestampDiffers()) &#123;<br>           response = <span class="hljs-built_in">this</span>.validateDirtyTimestamp(Long.valueOf(lastDirtyTimestamp), isFromReplicaNode);<br>           <span class="hljs-comment">// Store the overridden status since the validation found out the node that replicates wins</span><br>           <span class="hljs-keyword">if</span> (response.getStatus() == Response.Status.NOT_FOUND.getStatusCode()<br>                   &amp;&amp; (overriddenStatus != <span class="hljs-literal">null</span>)<br>                   &amp;&amp; !(InstanceStatus.UNKNOWN.name().equals(overriddenStatus))<br>                   &amp;&amp; isFromReplicaNode) &#123;<br>               registry.storeOverriddenStatusIfRequired(app.getAppName(), id, InstanceStatus.valueOf(overriddenStatus));<br>           &#125;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           response = Response.ok().build();<br>       &#125;<br>       logger.debug(<span class="hljs-string">&quot;Found (Renew): &#123;&#125; - &#123;&#125;; reply status=&#123;&#125;&quot;</span> + app.getName(), id, response.getStatus());<br>       <span class="hljs-keyword">return</span> response;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="3-更新心跳时间"><a href="#3-更新心跳时间" class="headerlink" title="3.更新心跳时间"></a>3.更新心跳时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">renew</span><span class="hljs-params">(String appName, String id, <span class="hljs-type">boolean</span> isReplication)</span> &#123;<br>       RENEW.increment(isReplication);<br>       Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; gMap = registry.get(appName);<br>       Lease&lt;InstanceInfo&gt; leaseToRenew = <span class="hljs-literal">null</span>;<br>       <span class="hljs-keyword">if</span> (gMap != <span class="hljs-literal">null</span>) &#123;<br>           leaseToRenew = gMap.get(id);<br>       &#125;<br>       <span class="hljs-keyword">if</span> (leaseToRenew == <span class="hljs-literal">null</span>) &#123;<br>           RENEW_NOT_FOUND.increment(isReplication);<br>           logger.warn(<span class="hljs-string">&quot;DS: Registry: lease doesn&#x27;t exist, registering resource: &#123;&#125; - &#123;&#125;&quot;</span>, appName, id);<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-type">InstanceInfo</span> <span class="hljs-variable">instanceInfo</span> <span class="hljs-operator">=</span> leaseToRenew.getHolder();<br>           <span class="hljs-keyword">if</span> (instanceInfo != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-comment">// touchASGCache(instanceInfo.getASGName());</span><br>               <span class="hljs-type">InstanceStatus</span> <span class="hljs-variable">overriddenInstanceStatus</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getOverriddenInstanceStatus(<br>                       instanceInfo, leaseToRenew, isReplication);<br>               <span class="hljs-keyword">if</span> (overriddenInstanceStatus == InstanceStatus.UNKNOWN) &#123;<br>                   logger.info(<span class="hljs-string">&quot;Instance status UNKNOWN possibly due to deleted override for instance &#123;&#125;&quot;</span><br>                           + <span class="hljs-string">&quot;; re-register required&quot;</span>, instanceInfo.getId());<br>                   RENEW_NOT_FOUND.increment(isReplication);<br>                   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>               &#125;<br>               <span class="hljs-keyword">if</span> (!instanceInfo.getStatus().equals(overriddenInstanceStatus)) &#123;<br>                   Object[] args = &#123;<br>                           instanceInfo.getStatus().name(),<br>                           instanceInfo.getOverriddenStatus().name(),<br>                           instanceInfo.getId()<br>                   &#125;;<br>                   logger.info(<br>                           <span class="hljs-string">&quot;The instance status &#123;&#125; is different from overridden instance status &#123;&#125; for instance &#123;&#125;. &quot;</span><br>                                   + <span class="hljs-string">&quot;Hence setting the status to overridden status&quot;</span>, args);<br>                   instanceInfo.setStatusWithoutDirty(overriddenInstanceStatus);<br>               &#125;<br>           &#125;<br>           renewsLastMin.increment();<br>           leaseToRenew.renew();<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>   &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Renew the lease, use renewal duration if it was specified by the</span><br><span class="hljs-comment">    * associated &#123;<span class="hljs-doctag">@link</span> T&#125; during registration, otherwise default duration is</span><br><span class="hljs-comment">    * &#123;<span class="hljs-doctag">@link</span> #DEFAULT_DURATION_IN_SECS&#125;.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">renew</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">//DEFAULT_DURATION_IN_SECS = 90</span><br>       lastUpdateTimestamp = System.currentTimeMillis() + duration;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="4-心跳机制整体流程"><a href="#4-心跳机制整体流程" class="headerlink" title="4.心跳机制整体流程"></a>4.心跳机制整体流程</h2><ol><li>DiscoveryClient初始化的时候，会调度定时任务，其中一个就是心跳机制的调度任务HeartbeatThread</li><li>HeartbeatThread默认30发送一次心跳</li><li>发送心跳的时候会去请求server端，<a href="http://localhost:8080/v2/apps/ServiceA/i-000000-1%EF%BC%8C%E8%B5%B0%E7%9A%84%E6%98%AFput%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%9C%80%E5%90%8E%E6%8C%87%E5%90%91renewLease%E6%96%B9%E6%B3%95">http://localhost:8080/v2/apps/ServiceA/i-000000-1，走的是put请求，最后指向renewLease方法</a></li><li>通过注册表的renew方法，完成服务续约。实际调用为AbstractInstanceRegistry的renew方法</li><li>从注册表的map中根据服务实例和实例id，获取一个Lease<InstanceInfo>，更新lastUpdateTimestamp时间戳每次续约就会更新这个时间戳</li></ol><h1 id="二、服务下线与实例摘除机制"><a href="#二、服务下线与实例摘除机制" class="headerlink" title="二、服务下线与实例摘除机制"></a>二、服务下线与实例摘除机制</h1><p>入口：在EurekaClient接口中存在一个shutdown()接口，表示服务下线。具体实现在DiscoveryClient中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Shuts down Eureka Client. Also sends a deregistration request to the</span><br><span class="hljs-comment">    * eureka server.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PreDestroy</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">if</span> (isShutdown.compareAndSet(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)) &#123;<br>           logger.info(<span class="hljs-string">&quot;Shutting down DiscoveryClient ...&quot;</span>);<br><br>           <span class="hljs-keyword">if</span> (statusChangeListener != <span class="hljs-literal">null</span> &amp;&amp; applicationInfoManager != <span class="hljs-literal">null</span>) &#123;<br>               applicationInfoManager.unregisterStatusChangeListener(statusChangeListener.getId());<br>           &#125;<br><br>           <span class="hljs-comment">//将线程池都关闭，释放资源，停止运行的线程</span><br>           cancelScheduledTasks();<br><br>           <span class="hljs-comment">// If APPINFO was registered</span><br>           <span class="hljs-keyword">if</span> (applicationInfoManager != <span class="hljs-literal">null</span> &amp;&amp; clientConfig.shouldRegisterWithEureka()) &#123;<br>               <span class="hljs-comment">//将服务实例状态设置为DOWN</span><br>               applicationInfoManager.setInstanceStatus(InstanceStatus.DOWN);<br>               <span class="hljs-comment">//取消注册</span><br>               unregister();<br>           &#125;<br><br>           <span class="hljs-keyword">if</span> (eurekaTransport != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-comment">//关闭网络通信组件</span><br>               eurekaTransport.shutdown();<br>           &#125;<br><br>           <span class="hljs-comment">//关闭监听器</span><br>           heartbeatStalenessMonitor.shutdown();<br>           registryStalenessMonitor.shutdown();<br><br>           logger.info(<span class="hljs-string">&quot;Completed shut down of DiscoveryClient&quot;</span>);<br>       &#125;<br>   &#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">unregister</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">// It can be null if shouldRegisterWithEureka == false</span><br>       <span class="hljs-keyword">if</span>(eurekaTransport != <span class="hljs-literal">null</span> &amp;&amp; eurekaTransport.registrationClient != <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               logger.info(<span class="hljs-string">&quot;Unregistering ...&quot;</span>);<br>               EurekaHttpResponse&lt;Void&gt; httpResponse = eurekaTransport.registrationClient.cancel(instanceInfo.getAppName(), instanceInfo.getId());<br>               logger.info(PREFIX + appPathIdentifier + <span class="hljs-string">&quot; - deregister  status: &quot;</span> + httpResponse.getStatusCode());<br>           &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>               logger.error(PREFIX + appPathIdentifier + <span class="hljs-string">&quot; - de-registration failed&quot;</span> + e.getMessage(), e);<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DELETE</span><br>   <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">cancelLease</span><span class="hljs-params">(</span><br><span class="hljs-params">           <span class="hljs-meta">@HeaderParam(PeerEurekaNode.HEADER_REPLICATION)</span> String isReplication)</span> &#123;<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> registry.cancel(app.getName(), id,<br>               <span class="hljs-string">&quot;true&quot;</span>.equals(isReplication));<br><br>       <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>           logger.debug(<span class="hljs-string">&quot;Found (Cancel): &quot;</span> + app.getName() + <span class="hljs-string">&quot; - &quot;</span> + id);<br>           <span class="hljs-keyword">return</span> Response.ok().build();<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           logger.info(<span class="hljs-string">&quot;Not Found (Cancel): &quot;</span> + app.getName() + <span class="hljs-string">&quot; - &quot;</span> + id);<br>           <span class="hljs-keyword">return</span> Response.status(Status.NOT_FOUND).build();<br>       &#125;<br>   &#125;<br><br><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String appName, <span class="hljs-keyword">final</span> String id,</span><br><span class="hljs-params">                         <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> isReplication)</span> &#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">super</span>.cancel(appName, id, isReplication)) &#123;<br>           replicateToPeers(Action.Cancel, appName, id, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, isReplication);<br>           <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>               <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.expectedNumberOfRenewsPerMin &gt; <span class="hljs-number">0</span>) &#123;<br>                   <span class="hljs-comment">// Since the client wants to cancel it, reduce the threshold (1 for 30 seconds, 2 for a minute)</span><br>                   <span class="hljs-built_in">this</span>.expectedNumberOfRenewsPerMin = <span class="hljs-built_in">this</span>.expectedNumberOfRenewsPerMin - <span class="hljs-number">2</span>;<br>                   <span class="hljs-built_in">this</span>.numberOfRenewsPerMinThreshold =<br>                           (<span class="hljs-type">int</span>) (<span class="hljs-built_in">this</span>.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Cancels the registration of an instance.</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * &lt;p&gt;</span><br><span class="hljs-comment">    * This is normally invoked by a client when it shuts down informing the</span><br><span class="hljs-comment">    * server to remove the instance from traffic.</span><br><span class="hljs-comment">    * &lt;/p&gt;</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> appName the application name of the application.</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id the unique identifier of the instance.</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> isReplication true if this is a replication event from other nodes, false</span><br><span class="hljs-comment">    *                      otherwise.</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> true if the instance was removed from the &#123;<span class="hljs-doctag">@link</span> AbstractInstanceRegistry&#125; successfully, false otherwise.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(String appName, String id, <span class="hljs-type">boolean</span> isReplication)</span> &#123;<br>       <span class="hljs-keyword">return</span> internalCancel(appName, id, isReplication);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * &#123;<span class="hljs-doctag">@link</span> #cancel(String, String, boolean)&#125; method is overridden by &#123;<span class="hljs-doctag">@link</span> PeerAwareInstanceRegistry&#125;, so each</span><br><span class="hljs-comment">    * cancel request is replicated to the peers. This is however not desired for expires which would be counted</span><br><span class="hljs-comment">    * in the remote peers as valid cancellations, so self preservation mode would not kick-in.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">internalCancel</span><span class="hljs-params">(String appName, String id, <span class="hljs-type">boolean</span> isReplication)</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           read.lock();<br>           CANCEL.increment(isReplication);<br>           <br>           <span class="hljs-comment">//从内存的map结构的注册表中间服务实例移除</span><br>           Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; gMap = registry.get(appName);<br>           Lease&lt;InstanceInfo&gt; leaseToCancel = <span class="hljs-literal">null</span>;<br>           <span class="hljs-keyword">if</span> (gMap != <span class="hljs-literal">null</span>) &#123;<br>               leaseToCancel = gMap.remove(id);<br>           &#125;<br><br>           <span class="hljs-comment">//将服务实例放入最近下线的队列</span><br>           <span class="hljs-keyword">synchronized</span> (recentCanceledQueue) &#123;<br>               recentCanceledQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;Long, String&gt;(System.currentTimeMillis(), appName + <span class="hljs-string">&quot;(&quot;</span> + id + <span class="hljs-string">&quot;)&quot;</span>));<br>           &#125;<br>           <span class="hljs-type">InstanceStatus</span> <span class="hljs-variable">instanceStatus</span> <span class="hljs-operator">=</span> overriddenInstanceStatusMap.remove(id);<br>           <span class="hljs-keyword">if</span> (instanceStatus != <span class="hljs-literal">null</span>) &#123;<br>               logger.debug(<span class="hljs-string">&quot;Removed instance id &#123;&#125; from the overridden map which has value &#123;&#125;&quot;</span>, id, instanceStatus.name());<br>           &#125;<br>           <span class="hljs-keyword">if</span> (leaseToCancel == <span class="hljs-literal">null</span>) &#123;<br>               CANCEL_NOT_FOUND.increment(isReplication);<br>               logger.warn(<span class="hljs-string">&quot;DS: Registry: cancel failed because Lease is not registered for: &#123;&#125;/&#123;&#125;&quot;</span>, appName, id);<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>           &#125;<br><br>           <span class="hljs-comment">//核心方法</span><br>           leaseToCancel.cancel();<br>           <span class="hljs-type">InstanceInfo</span> <span class="hljs-variable">instanceInfo</span> <span class="hljs-operator">=</span> leaseToCancel.getHolder();<br>           <span class="hljs-type">String</span> <span class="hljs-variable">vip</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">svip</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>           <span class="hljs-keyword">if</span> (instanceInfo != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-comment">//将服务实例信息放入最近下线的队列</span><br>               instanceInfo.setActionType(ActionType.DELETED);<br>               recentlyChangedQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RecentlyChangedItem</span>(leaseToCancel));<br>               <span class="hljs-comment">//设置最近一次变更时间戳</span><br>               instanceInfo.setLastUpdatedTimestamp();<br>               vip = instanceInfo.getVIPAddress();<br>               svip = instanceInfo.getSecureVipAddress();<br>               <span class="hljs-comment">/*</span><br><span class="hljs-comment">                   服务的注册、下线、服务摘除，都代表了这个服务实例变化了，都会将自己放入最近改变的队列中去</span><br><span class="hljs-comment">                   这个最近改变的队列，只会保留最近三分钟的服务实例</span><br><span class="hljs-comment">                   所以eureka client拉取增量注册表的时候，就是拉取最近三分钟有变化的服务实例的注册表</span><br><span class="hljs-comment">                */</span><br>           &#125;<br>           <span class="hljs-comment">//过期注册表缓存</span><br>           invalidateCache(appName, vip, svip);<br>           logger.info(<span class="hljs-string">&quot;Cancelled instance &#123;&#125;/&#123;&#125; (replication=&#123;&#125;)&quot;</span>, appName, id, isReplication);<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>       &#125; <span class="hljs-keyword">finally</span> &#123;<br>           read.unlock();<br>       &#125;<br>   &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Cancels the lease by updating the eviction time.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">if</span> (evictionTimestamp &lt;= <span class="hljs-number">0</span>) &#123;<br>           evictionTimestamp = System.currentTimeMillis();<br>       &#125;<br>   &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invalidateCache</span><span class="hljs-params">(String appName, <span class="hljs-meta">@Nullable</span> String vipAddress, <span class="hljs-meta">@Nullable</span> String secureVipAddress)</span> &#123;<br>       <span class="hljs-comment">// invalidate cache</span><br>       responseCache.invalidate(appName, vipAddress, secureVipAddress);<br>   &#125;<br></code></pre></td></tr></table></figure><p>流程</p><ol><li>在DiscoveryClient的shutdown()方法是入口方法</li><li>在状态变更监听器中移除</li><li>关闭线程池，释放资源，停止运行的线程</li><li>将服务实例状态设置为DOWN</li><li>取消注册。发送<a href="http://localhost:8080/v2/apps/ServiceA/i-00000-1%EF%BC%8Cdelete%E8%AF%B7%E6%B1%82">http://localhost:8080/v2/apps/ServiceA/i-00000-1，delete请求</a></li><li>将服务实例从eureka server的map结构的注册表中移除</li><li>调用Lease的cancel()方法，记录evictionTimestamp。就是服务实例被清除掉，服务实例下线的时间戳</li><li>将服务实例放入最近变化的队列中，让所有的eureka client下次拉取增量注册表的时候，可以拉取到这个服务实例的下线</li><li>服务实例变更之后，将缓存清理掉从readWriteCacheMap中清理掉</li><li>定时过期每隔30s，将readWriteCacheMap和readOnlyCacheMap进行同步</li><li>后面eureka client拉取增量注册表的时候，发现readOnlyCacheMap里没有，会找readWriteCacheMap，也没有就会从注册表抓取增量注册表，此时就会将上面那个recentChangedQueue中的记录返回</li></ol><p><a href="https://www.processon.com/view/link/616ee8160791295e162ce917">点击查看【processon】</a></p><h1 id="三、服务实例的自动故障感知以及自动摘除机制"><a href="#三、服务实例的自动故障感知以及自动摘除机制" class="headerlink" title="三、服务实例的自动故障感知以及自动摘除机制"></a>三、服务实例的自动故障感知以及自动摘除机制</h1><h2 id="1-自动故障感知"><a href="#1-自动故障感知" class="headerlink" title="1.自动故障感知"></a>1.自动故障感知</h2><p>eureka的自动故障感知主要依靠心跳机制来进行感知，即一段时间内没有接收到某个服务的心跳，就会将这个服务实例摘除，任务这个服务实例已经宕机</p><p>入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">//打开注册表，接收请求</span><br>   registry.openForTraffic(applicationInfoManager, registryCount);<br><br><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">openForTraffic</span><span class="hljs-params">(ApplicationInfoManager applicationInfoManager, <span class="hljs-type">int</span> count)</span> &#123;<br>       <span class="hljs-comment">// Renewals happen every 30 seconds and for a minute it should be a factor of 2.</span><br>       <span class="hljs-built_in">this</span>.expectedNumberOfRenewsPerMin = count * <span class="hljs-number">2</span>;<br>       <span class="hljs-comment">//如果20个服务，乘以2，期望一分钟40个心跳</span><br>       <span class="hljs-built_in">this</span>.numberOfRenewsPerMinThreshold =<br>               (<span class="hljs-type">int</span>) (<span class="hljs-built_in">this</span>.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());<br>       <span class="hljs-comment">// count * 2 * 0.85</span><br>       logger.info(<span class="hljs-string">&quot;Got &quot;</span> + count + <span class="hljs-string">&quot; instances from neighboring DS node&quot;</span>);<br>       logger.info(<span class="hljs-string">&quot;Renew threshold is: &quot;</span> + numberOfRenewsPerMinThreshold);<br>       <span class="hljs-built_in">this</span>.startupTime = System.currentTimeMillis();<br>       <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-built_in">this</span>.peerInstancesTransferEmptyOnStartup = <span class="hljs-literal">false</span>;<br>       &#125;<br>       DataCenterInfo.<span class="hljs-type">Name</span> <span class="hljs-variable">selfName</span> <span class="hljs-operator">=</span> applicationInfoManager.getInfo().getDataCenterInfo().getName();<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">isAws</span> <span class="hljs-operator">=</span> Name.Amazon == selfName;<br>       <span class="hljs-keyword">if</span> (isAws &amp;&amp; serverConfig.shouldPrimeAwsReplicaConnections()) &#123;<br>           logger.info(<span class="hljs-string">&quot;Priming AWS connections for all replicas..&quot;</span>);<br>           primeAwsReplicas(applicationInfoManager);<br>       &#125;<br>       logger.info(<span class="hljs-string">&quot;Changing status to UP&quot;</span>);<br>       applicationInfoManager.setInstanceStatus(InstanceStatus.UP);<br>       <span class="hljs-built_in">super</span>.postInit();<br>   &#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postInit</span><span class="hljs-params">()</span> &#123;<br>       renewsLastMin.start();<br>       <span class="hljs-keyword">if</span> (evictionTaskRef.get() != <span class="hljs-literal">null</span>) &#123;<br>           evictionTaskRef.get().cancel();<br>       &#125;<br>       evictionTaskRef.set(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EvictionTask</span>());<br>       evictionTimer.schedule(evictionTaskRef.get(),<br>               <span class="hljs-comment">//默认60s</span><br>               serverConfig.getEvictionIntervalTimerInMs(),<br>               serverConfig.getEvictionIntervalTimerInMs());<br>   &#125;<br><br><br></code></pre></td></tr></table></figure><p>在eureka server启动的时候，创建PeerAwareInstanceRegistryImpl，然后打开注册表，接收请求。<br>在最后有一个postInit。每隔60s会运行一次定时调度的后台线程EvictionTask</p><p>整体流程<br><a href="https://www.processon.com/view/link/616eef871efad42eb5ea7fe4">点击查看【processon】</a></p><h2 id="2-自动摘除机制"><a href="#2-自动摘除机制" class="headerlink" title="2.自动摘除机制"></a>2.自动摘除机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EvictionTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TimerTask</span> &#123;<br><br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">lastExecutionNanosRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0l</span>);<br><br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-type">long</span> <span class="hljs-variable">compensationTimeMs</span> <span class="hljs-operator">=</span> getCompensationTimeMs();<br>               logger.info(<span class="hljs-string">&quot;Running the evict task with compensationTime &#123;&#125;ms&quot;</span>, compensationTimeMs);<br>               evict(compensationTimeMs);<br>           &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>               logger.error(<span class="hljs-string">&quot;Could not run the evict task&quot;</span>, e);<br>           &#125;<br>       &#125;<br><br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * compute a compensation time defined as the actual time this task was executed since the prev iteration,</span><br><span class="hljs-comment">        * vs the configured amount of time for execution. This is useful for cases where changes in time (due to</span><br><span class="hljs-comment">        * clock skew or gc for example) causes the actual eviction task to execute later than the desired time</span><br><span class="hljs-comment">        * according to the configured cycle.</span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-type">long</span> <span class="hljs-title function_">getCompensationTimeMs</span><span class="hljs-params">()</span> &#123;<br>           <span class="hljs-comment">//先获取当前时间</span><br>           <span class="hljs-type">long</span> <span class="hljs-variable">currNanos</span> <span class="hljs-operator">=</span> getCurrentTimeNano();<br>           <span class="hljs-comment">//上次一次EvictionTask执行时间</span><br>           <span class="hljs-type">long</span> <span class="hljs-variable">lastNanos</span> <span class="hljs-operator">=</span> lastExecutionNanosRef.getAndSet(currNanos);<br>           <span class="hljs-keyword">if</span> (lastNanos == <span class="hljs-number">0l</span>) &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-number">0l</span>;<br>           &#125;<br><br>           <span class="hljs-type">long</span> <span class="hljs-variable">elapsedMs</span> <span class="hljs-operator">=</span> TimeUnit.NANOSECONDS.toMillis(currNanos - lastNanos);<br>           <span class="hljs-comment">//获取两次执行时间差</span><br>           <span class="hljs-type">long</span> <span class="hljs-variable">compensationTime</span> <span class="hljs-operator">=</span> elapsedMs - serverConfig.getEvictionIntervalTimerInMs();<br>           <span class="hljs-keyword">return</span> compensationTime &lt;= <span class="hljs-number">0l</span> ? <span class="hljs-number">0l</span> : compensationTime;<br>       &#125;<br><br>       <span class="hljs-type">long</span> <span class="hljs-title function_">getCurrentTimeNano</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">// for testing</span><br>           <span class="hljs-keyword">return</span> System.nanoTime();<br>       &#125;<br><br>   &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">evict</span><span class="hljs-params">(<span class="hljs-type">long</span> additionalLeaseMs)</span> &#123;<br>       logger.debug(<span class="hljs-string">&quot;Running the evict task&quot;</span>);<br><br>       <span class="hljs-comment">//是否允许主动删除故障的机器-&gt;和自我保护机制相关</span><br>       <span class="hljs-keyword">if</span> (!isLeaseExpirationEnabled()) &#123;<br>           logger.debug(<span class="hljs-string">&quot;DS: lease expiration is currently disabled.&quot;</span>);<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br><br>       <span class="hljs-comment">// We collect first all expired items, to evict them in random order. For large eviction sets,</span><br>       <span class="hljs-comment">// if we do not that, we might wipe out whole apps before self preservation kicks in. By randomizing it,</span><br>       <span class="hljs-comment">// the impact should be evenly distributed across all applications.</span><br>       List&lt;Lease&lt;InstanceInfo&gt;&gt; expiredLeases = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>       <span class="hljs-keyword">for</span> (Entry&lt;String, Map&lt;String, Lease&lt;InstanceInfo&gt;&gt;&gt; groupEntry : registry.entrySet()) &#123;<br>           Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; leaseMap = groupEntry.getValue();<br>           <span class="hljs-keyword">if</span> (leaseMap != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-keyword">for</span> (Entry&lt;String, Lease&lt;InstanceInfo&gt;&gt; leaseEntry : leaseMap.entrySet()) &#123;<br>                   Lease&lt;InstanceInfo&gt; lease = leaseEntry.getValue();<br>                   <span class="hljs-comment">//判断过期</span><br>                   <span class="hljs-keyword">if</span> (lease.isExpired(additionalLeaseMs) &amp;&amp; lease.getHolder() != <span class="hljs-literal">null</span>) &#123;<br>                       expiredLeases.add(lease);<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br><br>       <span class="hljs-comment">// To compensate for GC pauses or drifting local time, we need to use current registry size as a base for</span><br>       <span class="hljs-comment">// triggering self-preservation. Without that we would wipe out full registry.</span><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">           不能一次性摘除过多的服务实例</span><br><span class="hljs-comment">           假设现在一共20个服务实例，现在6个服务实例不可用了，一次性可以摘除的服务实例</span><br><span class="hljs-comment">           registrySize = 20</span><br><span class="hljs-comment">           registrySizeThreshold = 20 * 0.85 = 17</span><br><span class="hljs-comment">           evictionLimit = 20 - 17 = 3</span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">registrySize</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) getLocalRegistrySize();<br>       <span class="hljs-type">int</span> <span class="hljs-variable">registrySizeThreshold</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (registrySize * serverConfig.getRenewalPercentThreshold());<br>       <span class="hljs-type">int</span> <span class="hljs-variable">evictionLimit</span> <span class="hljs-operator">=</span> registrySize - registrySizeThreshold;<br><br>       <span class="hljs-type">int</span> <span class="hljs-variable">toEvict</span> <span class="hljs-operator">=</span> Math.min(expiredLeases.size(), evictionLimit);<br>       <span class="hljs-keyword">if</span> (toEvict &gt; <span class="hljs-number">0</span>) &#123;<br>           logger.info(<span class="hljs-string">&quot;Evicting &#123;&#125; items (expired=&#123;&#125;, evictionLimit=&#123;&#125;)&quot;</span>, toEvict, expiredLeases.size(), evictionLimit);<br><br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">               需要摘除的服务实例一共6个，但是最多只能摘除3个服务实例</span><br><span class="hljs-comment">               下面会在留个服务实例中，随机选择三个摘除</span><br><span class="hljs-comment">            */</span><br>           <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(System.currentTimeMillis());<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; toEvict; i++) &#123;<br>               <span class="hljs-comment">// Pick a random item (Knuth shuffle algorithm)</span><br>               <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> i + random.nextInt(expiredLeases.size() - i);<br>               Collections.swap(expiredLeases, i, next);<br>               <span class="hljs-comment">//随机一个倒霉蛋</span><br>               Lease&lt;InstanceInfo&gt; lease = expiredLeases.get(i);<br><br>               <span class="hljs-type">String</span> <span class="hljs-variable">appName</span> <span class="hljs-operator">=</span> lease.getHolder().getAppName();<br>               <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> lease.getHolder().getId();<br>               EXPIRED.increment();<br>               logger.warn(<span class="hljs-string">&quot;DS: Registry: expired lease for &#123;&#125;/&#123;&#125;&quot;</span>, appName, id);<br><br>               <span class="hljs-comment">/*</span><br><span class="hljs-comment">                   此处未处理期望心跳数量变更</span><br><span class="hljs-comment">                   synchronized (lock) &#123;</span><br><span class="hljs-comment">                       if (this.expectedNumberOfRenewsPerMin &gt; 0) &#123;</span><br><span class="hljs-comment">                           // Since the client wants to cancel it, reduce the threshold (1 for 30 seconds, 2 for a minute)</span><br><span class="hljs-comment">                           this.expectedNumberOfRenewsPerMin = this.expectedNumberOfRenewsPerMin - 2;</span><br><span class="hljs-comment">                           this.numberOfRenewsPerMinThreshold =</span><br><span class="hljs-comment">                                   (int) (this.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());</span><br><span class="hljs-comment">                       &#125;</span><br><span class="hljs-comment">                   &#125;</span><br><span class="hljs-comment">                */</span><br><br>               <span class="hljs-comment">//摘除服务实例</span><br>               internalCancel(appName, id, <span class="hljs-literal">false</span>);<br>           &#125;<br>       &#125;<br>   &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Checks if the lease of a given &#123;<span class="hljs-doctag">@link</span> com.netflix.appinfo.InstanceInfo&#125; has expired or not.</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * Note that due to renew() doing the &#x27;wrong&quot; thing and setting lastUpdateTimestamp to +duration more than</span><br><span class="hljs-comment">    * what it should be, the expiry will actually be 2 * duration. This is a minor bug and should only affect</span><br><span class="hljs-comment">    * instances that ungracefully shutdown. Due to possible wide ranging impact to existing usage, this will</span><br><span class="hljs-comment">    * not be fixed.</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> additionalLeaseMs any additional lease time to add to the lease evaluation in ms.</span><br><span class="hljs-comment">    */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isExpired</span><span class="hljs-params">(<span class="hljs-type">long</span> additionalLeaseMs)</span> &#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">           lastUpdateTimestamp 续约时间 （存在bug，导致duration * 2 的时间才会过期）</span><br><span class="hljs-comment">           duration 默认90s</span><br><span class="hljs-comment">           additionalLeaseMs 补偿时间</span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-keyword">return</span> (evictionTimestamp &gt; <span class="hljs-number">0</span> || System.currentTimeMillis() &gt; (lastUpdateTimestamp + duration + additionalLeaseMs));<br>   &#125;<br><br></code></pre></td></tr></table></figure><ol><li>compensationTimeMs：补偿时间。即网络延迟或者系统中断导致未能正好在设定间隔内执行下一次检测，所导致的时间差。</li><li>遍历注册表中所有的服务实例，然后调用Lease的isExpired()方法区判断这个服务实例的租约是否过期。一个bug：lastUpdateTimestamp已经在上次更新的时候加过duration，所以lastUpdateTimestamp表示的是下次更新时间，在此处不应该再继续加duration，会导致过期判断每次是duration*2</li><li>不会一次性将所有故障的服务实例摘除。每次最多将注册表中15%的服务实例摘除。所以一次没摘除所有的故障服务实例，在下次EvictionTask再次执行的时候，会再次摘除。(<strong>分批摘除机制</strong>)</li><li>在摘除的时候，从服务实例中随机挑选本次可以摘除的数量的服务实例(<strong>随机摘除机制</strong>)</li><li>摘除服务实例的时候，就是调用下线的方法internalCancel</li></ol><h1 id="四、自我保护机制"><a href="#四、自我保护机制" class="headerlink" title="四、自我保护机制"></a>四、自我保护机制</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">openForTraffic</span><span class="hljs-params">(ApplicationInfoManager applicationInfoManager, <span class="hljs-type">int</span> count)</span> &#123;<br>       <span class="hljs-comment">// Renewals happen every 30 seconds and for a minute it should be a factor of 2.</span><br>       <span class="hljs-built_in">this</span>.expectedNumberOfRenewsPerMin = count * <span class="hljs-number">2</span>;<br>       <span class="hljs-comment">//如果20个服务，乘以2，期望一分钟40个心跳</span><br>       <span class="hljs-built_in">this</span>.numberOfRenewsPerMinThreshold =<br>               (<span class="hljs-type">int</span>) (<span class="hljs-built_in">this</span>.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());<br>       <span class="hljs-comment">// count * 2 * 0.85</span><br>       logger.info(<span class="hljs-string">&quot;Got &quot;</span> + count + <span class="hljs-string">&quot; instances from neighboring DS node&quot;</span>);<br>       logger.info(<span class="hljs-string">&quot;Renew threshold is: &quot;</span> + numberOfRenewsPerMinThreshold);<br>       <span class="hljs-built_in">this</span>.startupTime = System.currentTimeMillis();<br>       <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-built_in">this</span>.peerInstancesTransferEmptyOnStartup = <span class="hljs-literal">false</span>;<br>       &#125;<br>       DataCenterInfo.<span class="hljs-type">Name</span> <span class="hljs-variable">selfName</span> <span class="hljs-operator">=</span> applicationInfoManager.getInfo().getDataCenterInfo().getName();<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">isAws</span> <span class="hljs-operator">=</span> Name.Amazon == selfName;<br>       <span class="hljs-keyword">if</span> (isAws &amp;&amp; serverConfig.shouldPrimeAwsReplicaConnections()) &#123;<br>           logger.info(<span class="hljs-string">&quot;Priming AWS connections for all replicas..&quot;</span>);<br>           primeAwsReplicas(applicationInfoManager);<br>       &#125;<br>       logger.info(<span class="hljs-string">&quot;Changing status to UP&quot;</span>);<br>       applicationInfoManager.setInstanceStatus(InstanceStatus.UP);<br>       <span class="hljs-built_in">super</span>.postInit();<br>   &#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">evict</span><span class="hljs-params">(<span class="hljs-type">long</span> additionalLeaseMs)</span> &#123;<br>       logger.debug(<span class="hljs-string">&quot;Running the evict task&quot;</span>);<br><br>       <span class="hljs-comment">//是否允许主动删除故障的机器-&gt;和自我保护机制相关</span><br>       <span class="hljs-keyword">if</span> (!isLeaseExpirationEnabled()) &#123;<br>           logger.debug(<span class="hljs-string">&quot;DS: lease expiration is currently disabled.&quot;</span>);<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br><br>       ......<br>   &#125;<br><br><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeaseExpirationEnabled</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">//默认true，如果改为false，关闭自我保护机制，就一直返回true，随时可以清理故障的实例</span><br>       <span class="hljs-keyword">if</span> (!isSelfPreservationModeEnabled()) &#123;<br>           <span class="hljs-comment">// The self preservation mode is disabled, hence allowing the instances to expire.</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">           numberOfRenewsPerMinThreshold -  期望一分钟内接受心跳数</span><br><span class="hljs-comment">           getNumOfRenewsInLastMin() - 上一分钟所有服务实例一共发送心跳数</span><br><span class="hljs-comment">           如果上一分钟心跳数102次 &gt; 期望的100次 就返回true - 可以清理故障的服务实例</span><br><span class="hljs-comment">           如果上一分钟心跳次数太少 20次 &lt; 期望的100次 返回false</span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-keyword">return</span> numberOfRenewsPerMinThreshold &gt; <span class="hljs-number">0</span> &amp;&amp; getNumOfRenewsInLastMin() &gt; numberOfRenewsPerMinThreshold;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>在eureka需要进行服务下线的时候，会需要判断是否是自身宕机导致服务不可用，这种机制叫自我保护机制。进入自我保护机制的时候，不会摘除任务服务实例。<br>触发规则：<strong>如果上一分钟实际的心跳次数，比我们期望的一分钟的心跳次数要小，触发自我保护机制，不允许摘除任何服务实例，此时认为自己的eureka server出现网络故障，大量的服务实例无法发送心跳过来</strong></p><ol><li>evict()内部，会需要判断上一分钟的心跳次数，是否小于期望的一分钟的心跳次数，如果小于，就不会清理服务实例</li><li>一分钟心跳次数的期望值计算<ol><li>初始化计算<ol><li>在openForTraffic()中，记录从eureka server拉取的服务实例数量，将这个服务实例的数量，作为自己本地eureka server初始化的服务实例数量。将服务实例数量*2(此处有问题，应当按照配置的心跳时间除，而不是默认一分钟2次)</li><li>服务实例个数 * （60 &#x2F; 心跳时间间隔(此处写死30s)） * 0.85 &#x3D; 每分钟最少的心跳次数。</li></ol></li><li>注册、下线、故障、心跳<ol><li>服务实例随着上线和下线、故障，都在不断的变动着。注册的时候，每分钟期望心跳次数 + 2。服务下线的时候，直接每分钟期望心跳次数 - 2。(和期望次数一样存在问题，默认一分钟2次)</li><li>服务故障暂时没有找到调整方法？</li></ol></li><li>定时更新<ol><li>eureka server完成上下文初始化的时候，初始化com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl#scheduleRenewalThresholdUpdateTask</li><li>默认时间是15分钟，算一下服务实例的数量，如果从别的eureka server拉取到的服务实例的数量大于当前服务实例的数量，就会重新计算一下，主要和其他eureka server进行同步</li></ol></li></ol></li><li>实际上一分钟的心跳次数计算。com.netflix.eureka.util.MeasuredRate，设计了一个组件来维护。每个心跳过来，肯定会更新MeasuredRate来计算每一分钟心跳的实际次数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MeasuredRate</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(MeasuredRate.class);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">lastBucket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">currentBucket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> sampleInterval;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Timer timer;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> isActive;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sampleInterval in milliseconds</span><br><span class="hljs-comment">     默认1分钟</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MeasuredRate</span><span class="hljs-params">(<span class="hljs-type">long</span> sampleInterval)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sampleInterval = sampleInterval;<br>        <span class="hljs-built_in">this</span>.timer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>(<span class="hljs-string">&quot;Eureka-MeasureRateTimer&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">this</span>.isActive = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isActive) &#123;<br>            timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// Zero out the current bucket.</span><br>                        <span class="hljs-comment">/*</span><br><span class="hljs-comment">                        每分钟调度一次，将currentBucket值设置到lastBucket。</span><br><span class="hljs-comment">                            将currentBucket设置为0。</span><br><span class="hljs-comment">                            即统计每分钟次数</span><br><span class="hljs-comment">                        */</span><br>                        lastBucket.set(currentBucket.getAndSet(<span class="hljs-number">0</span>));<br>                    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                        logger.error(<span class="hljs-string">&quot;Cannot reset the Measured Rate&quot;</span>, e);<br>                    &#125;<br>                &#125;<br>            &#125;, sampleInterval, sampleInterval);<br><br>            isActive = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isActive) &#123;<br>            timer.cancel();<br>            isActive = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the count in the last sample interval.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lastBucket.get();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Increments the count in the current sample interval.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> &#123;<br>        currentBucket.incrementAndGet();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eureka server注册表同步</title>
    <link href="/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka-server%E5%90%8C%E6%AD%A5%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    <url>/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka-server%E5%90%8C%E6%AD%A5%E6%B3%A8%E5%86%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、eureka-server多级缓存图"><a href="#一、eureka-server多级缓存图" class="headerlink" title="一、eureka server多级缓存图"></a>一、eureka server多级缓存图</h1><p><a href="https://www.processon.com/view/link/616cf7d30e3e7406e2055195">点击查看【processon】</a></p><h1 id="二、eureka-server全量注册表"><a href="#二、eureka-server全量注册表" class="headerlink" title="二、eureka server全量注册表"></a>二、eureka server全量注册表</h1><h2 id="请求接口入口"><a href="#请求接口入口" class="headerlink" title="请求接口入口"></a>请求接口入口</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> EurekaHttpResponse&lt;Applications&gt; <span class="hljs-title function_">getApplications</span><span class="hljs-params">(String... regions)</span> &#123;<br>       <span class="hljs-keyword">return</span> getApplicationsInternal(<span class="hljs-string">&quot;apps/&quot;</span>, regions);<br>   &#125;<br><br><span class="hljs-meta">@GET</span><br>   <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">getContainers</span><span class="hljs-params">(<span class="hljs-meta">@PathParam(&quot;version&quot;)</span> String version,</span><br><span class="hljs-params">                                 <span class="hljs-meta">@HeaderParam(HEADER_ACCEPT)</span> String acceptHeader,</span><br><span class="hljs-params">                                 <span class="hljs-meta">@HeaderParam(HEADER_ACCEPT_ENCODING)</span> String acceptEncoding,</span><br><span class="hljs-params">                                 <span class="hljs-meta">@HeaderParam(EurekaAccept.HTTP_X_EUREKA_ACCEPT)</span> String eurekaAccept,</span><br><span class="hljs-params">                                 <span class="hljs-meta">@Context</span> UriInfo uriInfo,</span><br><span class="hljs-params">                                 <span class="hljs-meta">@Nullable</span> <span class="hljs-meta">@QueryParam(&quot;regions&quot;)</span> String regionsStr)</span> &#123;<br><br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">isRemoteRegionRequested</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> != regionsStr &amp;&amp; !regionsStr.isEmpty();<br>       String[] regions = <span class="hljs-literal">null</span>;<br>       <span class="hljs-keyword">if</span> (!isRemoteRegionRequested) &#123;<br>           EurekaMonitors.GET_ALL.increment();<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           regions = regionsStr.toLowerCase().split(<span class="hljs-string">&quot;,&quot;</span>);<br>           Arrays.sort(regions); <span class="hljs-comment">// So we don&#x27;t have different caches for same regions queried in different order.</span><br>           EurekaMonitors.GET_ALL_WITH_REMOTE_REGIONS.increment();<br>       &#125;<br><br>       <span class="hljs-comment">// Check if the server allows the access to the registry. The server can</span><br>       <span class="hljs-comment">// restrict access if it is not</span><br>       <span class="hljs-comment">// ready to serve traffic depending on various reasons.</span><br>       <span class="hljs-keyword">if</span> (!registry.shouldAllowAccess(isRemoteRegionRequested)) &#123;<br>           <span class="hljs-keyword">return</span> Response.status(Status.FORBIDDEN).build();<br>       &#125;<br>       CurrentRequestVersion.set(Version.toEnum(version));<br>       <span class="hljs-type">KeyType</span> <span class="hljs-variable">keyType</span> <span class="hljs-operator">=</span> Key.KeyType.JSON;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">returnMediaType</span> <span class="hljs-operator">=</span> MediaType.APPLICATION_JSON;<br>       <span class="hljs-keyword">if</span> (acceptHeader == <span class="hljs-literal">null</span> || !acceptHeader.contains(HEADER_JSON_VALUE)) &#123;<br>           keyType = Key.KeyType.XML;<br>           returnMediaType = MediaType.APPLICATION_XML;<br>       &#125;<br><br>       <span class="hljs-type">Key</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(Key.EntityType.Application,<br>               ResponseCacheImpl.ALL_APPS,<br>               keyType, CurrentRequestVersion.get(), EurekaAccept.fromString(eurekaAccept), regions<br>       );<br><br>       Response response;<br>       <span class="hljs-keyword">if</span> (acceptEncoding != <span class="hljs-literal">null</span> &amp;&amp; acceptEncoding.contains(HEADER_GZIP_VALUE)) &#123;<br>           response = Response.ok(responseCache.getGZIP(cacheKey))<br>                   .header(HEADER_CONTENT_ENCODING, HEADER_GZIP_VALUE)<br>                   .header(HEADER_CONTENT_TYPE, returnMediaType)<br>                   .build();<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           response = Response.ok(responseCache.get(cacheKey))<br>                   .build();<br>       &#125;<br>       <span class="hljs-keyword">return</span> response;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>eureka client发送的请求是<a href="http://localhost:8080/v2/apps/%EF%BC%8CGET%E8%AF%B7%E6%B1%82%E3%80%82jersey%E7%9A%84%E6%8E%A5%E6%94%B6%E6%96%B9%E6%B3%95%E4%B8%BAcom.netflix.eureka.resources.ApplicationsResource#getContainers%E3%80%82">http://localhost:8080/v2/apps/，GET请求。jersey的接收方法为com.netflix.eureka.resources.ApplicationsResource#getContainers。</a><br>eureka client发送请求过来读取全量注册表的时候，会从多级缓存中读取注册表的数据，cacheKey就是全量注册表的缓存key。</p><h1 id="三、多级缓存机制"><a href="#三、多级缓存机制" class="headerlink" title="三、多级缓存机制"></a>三、多级缓存机制</h1><h2 id="1-多级缓存机制设计"><a href="#1-多级缓存机制设计" class="headerlink" title="1.多级缓存机制设计"></a>1.多级缓存机制设计</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@VisibleForTesting</span><br>    Value <span class="hljs-title function_">getValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Key key, <span class="hljs-type">boolean</span> useReadOnlyCache)</span> &#123;<br>        <span class="hljs-type">Value</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (useReadOnlyCache) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Value</span> <span class="hljs-variable">currentPayload</span> <span class="hljs-operator">=</span> readOnlyCacheMap.get(key);<br>                <span class="hljs-keyword">if</span> (currentPayload != <span class="hljs-literal">null</span>) &#123;<br>                    payload = currentPayload;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    payload = readWriteCacheMap.get(key);<br>                    readOnlyCacheMap.put(key, payload);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                payload = readWriteCacheMap.get(key);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>            logger.error(<span class="hljs-string">&quot;Cannot get value for key :&quot;</span> + key, t);<br>        &#125;<br>        <span class="hljs-keyword">return</span> payload;<br>    &#125;<br><br>....<br>&#123;<br>    <span class="hljs-built_in">this</span>.readWriteCacheMap =<br>        CacheBuilder.newBuilder().initialCapacity(<span class="hljs-number">1000</span>)<br>        .expireAfterWrite(serverConfig.getResponseCacheAutoExpirationInSeconds(), TimeUnit.SECONDS)<br>        .removalListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RemovalListener</span>&lt;Key, Value&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRemoval</span><span class="hljs-params">(RemovalNotification&lt;Key, Value&gt; notification)</span> &#123;<br>                <span class="hljs-type">Key</span> <span class="hljs-variable">removedKey</span> <span class="hljs-operator">=</span> notification.getKey();<br>                <span class="hljs-keyword">if</span> (removedKey.hasRegions()) &#123;<br>                    <span class="hljs-type">Key</span> <span class="hljs-variable">cloneWithNoRegions</span> <span class="hljs-operator">=</span> removedKey.cloneWithoutRegions();<br>                    regionSpecificKeys.remove(cloneWithNoRegions, removedKey);<br>                &#125;<br>            &#125;<br>        &#125;)<br>        .build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheLoader</span>&lt;Key, Value&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Value <span class="hljs-title function_">load</span><span class="hljs-params">(Key key)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-keyword">if</span> (key.hasRegions()) &#123;<br>                    <span class="hljs-type">Key</span> <span class="hljs-variable">cloneWithNoRegions</span> <span class="hljs-operator">=</span> key.cloneWithoutRegions();<br>                    regionSpecificKeys.put(cloneWithNoRegions, key);<br>                &#125;<br>                <span class="hljs-type">Value</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> generatePayload(key);<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;);<br>&#125;<br>...<br>    <br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Generate pay load for the given key.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Value <span class="hljs-title function_">generatePayload</span><span class="hljs-params">(Key key)</span> &#123;<br>        <span class="hljs-type">Stopwatch</span> <span class="hljs-variable">tracer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String payload;<br>            <span class="hljs-keyword">switch</span> (key.getEntityType()) &#123;<br>                <span class="hljs-keyword">case</span> Application:<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">isRemoteRegionRequested</span> <span class="hljs-operator">=</span> key.hasRegions();<br><br>                    <span class="hljs-keyword">if</span> (ALL_APPS.equals(key.getName())) &#123;<br>                        <span class="hljs-keyword">if</span> (isRemoteRegionRequested) &#123;<br>                            tracer = serializeAllAppsWithRemoteRegionTimer.start();<br>                            payload = getPayLoad(key, registry.getApplicationsFromMultipleRegions(key.getRegions()));<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            tracer = serializeAllAppsTimer.start();<br>                            payload = getPayLoad(key, registry.getApplications());<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ALL_APPS_DELTA.equals(key.getName())) &#123;<br>                        <span class="hljs-keyword">if</span> (isRemoteRegionRequested) &#123;<br>                            tracer = serializeDeltaAppsWithRemoteRegionTimer.start();<br>                            versionDeltaWithRegions.incrementAndGet();<br>                            versionDeltaWithRegionsLegacy.incrementAndGet();<br>                            payload = getPayLoad(key,<br>                                    registry.getApplicationDeltasFromMultipleRegions(key.getRegions()));<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            tracer = serializeDeltaAppsTimer.start();<br>                            versionDelta.incrementAndGet();<br>                            versionDeltaLegacy.incrementAndGet();<br>                            payload = getPayLoad(key, registry.getApplicationDeltas());<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        tracer = serializeOneApptimer.start();<br>                        payload = getPayLoad(key, registry.getApplication(key.getName()));<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> VIP:<br>                <span class="hljs-keyword">case</span> SVIP:<br>                    tracer = serializeViptimer.start();<br>                    payload = getPayLoad(key, getApplicationsForVip(key, registry));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    logger.error(<span class="hljs-string">&quot;Unidentified entity type: &quot;</span> + key.getEntityType() + <span class="hljs-string">&quot; found in the cache key.&quot;</span>);<br>                    payload = <span class="hljs-string">&quot;&quot;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Value</span>(payload);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (tracer != <span class="hljs-literal">null</span>) &#123;<br>                tracer.stop();<br>            &#125;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>useReadOnlyCache:是否开启只读缓存，默认开启<br><strong>多级缓存机制</strong></p><ol><li>从只读缓存中读取数据</li><li>从读写缓存中读取数据</li><li>从eureka server的注册表中去读取<h2 id="2-多级缓存过期机制"><a href="#2-多级缓存过期机制" class="headerlink" title="2.多级缓存过期机制"></a>2.多级缓存过期机制</h2><h3 id="1-主动过期"><a href="#1-主动过期" class="headerlink" title="1.主动过期"></a>1.主动过期</h3>有新的服务实例发生注册、下线、故障的时候，就会去刷新readWriteCacheMap<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Registers a new instance with a given duration.</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@see</span> com.netflix.eureka.lease.LeaseManager#register(java.lang.Object, int, boolean)</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(InstanceInfo registrant, <span class="hljs-type">int</span> leaseDuration, <span class="hljs-type">boolean</span> isReplication)</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           ......<br><br>           <span class="hljs-comment">//抓取注册表的时候，走多级缓存机制</span><br>           invalidateCache(registrant.getAppName(), registrant.getVIPAddress(), registrant.getSecureVipAddress());<br>           logger.info(<span class="hljs-string">&quot;Registered instance &#123;&#125;/&#123;&#125; with status &#123;&#125; (replication=&#123;&#125;)&quot;</span>,<br>                   registrant.getAppName(), registrant.getId(), registrant.getStatus(), isReplication);<br>       &#125; <span class="hljs-keyword">finally</span> &#123;<br>           read.unlock();<br>       &#125;<br>   &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invalidateCache</span><span class="hljs-params">(String appName, <span class="hljs-meta">@Nullable</span> String vipAddress, <span class="hljs-meta">@Nullable</span> String secureVipAddress)</span> &#123;<br>       <span class="hljs-comment">// invalidate cache</span><br>       responseCache.invalidate(appName, vipAddress, secureVipAddress);<br>   &#125;<br><br><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invalidate</span><span class="hljs-params">(String appName, <span class="hljs-meta">@Nullable</span> String vipAddress, <span class="hljs-meta">@Nullable</span> String secureVipAddress)</span> &#123;<br>       <span class="hljs-keyword">for</span> (Key.KeyType type : Key.KeyType.values()) &#123;<br>           <span class="hljs-keyword">for</span> (Version v : Version.values()) &#123;<br>               invalidate(<br>                       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(Key.EntityType.Application, appName, type, v, EurekaAccept.full),<br>                       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(Key.EntityType.Application, appName, type, v, EurekaAccept.compact),<br>                       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(Key.EntityType.Application, ALL_APPS, type, v, EurekaAccept.full),<br>                       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(Key.EntityType.Application, ALL_APPS, type, v, EurekaAccept.compact),<br>                       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(Key.EntityType.Application, ALL_APPS_DELTA, type, v, EurekaAccept.full),<br>                       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(Key.EntityType.Application, ALL_APPS_DELTA, type, v, EurekaAccept.compact)<br>               );<br>               <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != vipAddress) &#123;<br>                   invalidate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(Key.EntityType.VIP, vipAddress, type, v, EurekaAccept.full));<br>               &#125;<br>               <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != secureVipAddress) &#123;<br>                   invalidate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(Key.EntityType.SVIP, secureVipAddress, type, v, EurekaAccept.full));<br>               &#125;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="2-定时过期"><a href="#2-定时过期" class="headerlink" title="2.定时过期"></a>2.定时过期</h3>readWriteCacheMap在构建的时候，指定了一个自动过期的时间，默认值就是180秒，所以你往readWriteCacheMap中放入一个数据过后，自动会等180秒过后，就将这个数据给他过期了</li></ol><p>getResponseCacheAutoExpirationInSeconds：默认180</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.readWriteCacheMap =<br>                CacheBuilder.newBuilder().initialCapacity(<span class="hljs-number">1000</span>)<br>                        .expireAfterWrite(serverConfig.getResponseCacheAutoExpirationInSeconds(), TimeUnit.SECONDS)<br>                        .removalListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RemovalListener</span>&lt;Key, Value&gt;() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRemoval</span><span class="hljs-params">(RemovalNotification&lt;Key, Value&gt; notification)</span> &#123;<br>                                <span class="hljs-type">Key</span> <span class="hljs-variable">removedKey</span> <span class="hljs-operator">=</span> notification.getKey();<br>                                <span class="hljs-keyword">if</span> (removedKey.hasRegions()) &#123;<br>                                    <span class="hljs-type">Key</span> <span class="hljs-variable">cloneWithNoRegions</span> <span class="hljs-operator">=</span> removedKey.cloneWithoutRegions();<br>                                    regionSpecificKeys.remove(cloneWithNoRegions, removedKey);<br>                                &#125;<br>                            &#125;<br>                        &#125;)<br>                        .build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheLoader</span>&lt;Key, Value&gt;() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> Value <span class="hljs-title function_">load</span><span class="hljs-params">(Key key)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                <span class="hljs-keyword">if</span> (key.hasRegions()) &#123;<br>                                    <span class="hljs-type">Key</span> <span class="hljs-variable">cloneWithNoRegions</span> <span class="hljs-operator">=</span> key.cloneWithoutRegions();<br>                                    regionSpecificKeys.put(cloneWithNoRegions, key);<br>                                &#125;<br>                                <span class="hljs-type">Value</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> generatePayload(key);<br>                                <span class="hljs-keyword">return</span> value;<br>                            &#125;<br>                        &#125;);<br></code></pre></td></tr></table></figure><h3 id="3-被动过期"><a href="#3-被动过期" class="headerlink" title="3.被动过期"></a>3.被动过期</h3><p>默认是每隔30秒，执行一个定时调度的线程任务，TimerTask，有一个逻辑，会每隔30秒，对readOnlyCacheMap和readWriteCacheMap中的数据进行一个比对，如果两块数据是不一致的，那么就将readWriteCacheMap中的数据放到readOnlyCacheMap中来。</p><p>比如说readWriteCacheMap中，ALL_APPS这个key对应的缓存没了，那么最多30秒过后，就会同步到readOnelyCacheMap中去</p><p>responseCacheUpdateIntervalMs：30 * 1000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (shouldUseReadOnlyResponseCache) &#123;<br>       timer.schedule(getCacheUpdateTask(),<br>                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(((System.currentTimeMillis() / responseCacheUpdateIntervalMs) * responseCacheUpdateIntervalMs)<br>                               + responseCacheUpdateIntervalMs),<br>                      responseCacheUpdateIntervalMs);<br>   &#125;<br><br><span class="hljs-keyword">private</span> TimerTask <span class="hljs-title function_">getCacheUpdateTask</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>               logger.debug(<span class="hljs-string">&quot;Updating the client cache from response cache&quot;</span>);<br>               <span class="hljs-keyword">for</span> (Key key : readOnlyCacheMap.keySet()) &#123;<br>                   <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                       Object[] args = &#123;key.getEntityType(), key.getName(), key.getVersion(), key.getType()&#125;;<br>                       logger.debug(<span class="hljs-string">&quot;Updating the client cache from response cache for key : &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>, args);<br>                   &#125;<br>                   <span class="hljs-keyword">try</span> &#123;<br>                       CurrentRequestVersion.set(key.getVersion());<br>                       <span class="hljs-type">Value</span> <span class="hljs-variable">cacheValue</span> <span class="hljs-operator">=</span> readWriteCacheMap.get(key);<br>                       <span class="hljs-type">Value</span> <span class="hljs-variable">currentCacheValue</span> <span class="hljs-operator">=</span> readOnlyCacheMap.get(key);<br>                       <span class="hljs-keyword">if</span> (cacheValue != currentCacheValue) &#123;<br>                           readOnlyCacheMap.put(key, cacheValue);<br>                       &#125;<br>                   &#125; <span class="hljs-keyword">catch</span> (Throwable th) &#123;<br>                       logger.error(<span class="hljs-string">&quot;Error while updating the client cache from response cache&quot;</span>, th);<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;;<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="四、eureka-server增量注册表"><a href="#四、eureka-server增量注册表" class="headerlink" title="四、eureka server增量注册表"></a>四、eureka server增量注册表</h1><p>在eureka client启动的时候，除了第一次抓取全量注册表，还会启动一个线程进行定时增量注册表抓取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clientConfig.shouldFetchRegistry()) &#123;<br>        <span class="hljs-comment">// registry cache refresh timer</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">registryFetchIntervalSeconds</span> <span class="hljs-operator">=</span> clientConfig.getRegistryFetchIntervalSeconds();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">expBackOffBound</span> <span class="hljs-operator">=</span> clientConfig.getCacheRefreshExecutorExponentialBackOffBound();<br>        scheduler.schedule(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimedSupervisorTask</span>(<br>                <span class="hljs-string">&quot;cacheRefresh&quot;</span>,<br>                scheduler,<br>                cacheRefreshExecutor,<br>                registryFetchIntervalSeconds,<br>                TimeUnit.SECONDS,<br>                expBackOffBound,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheRefreshThread</span>()<br>            ),<br>            registryFetchIntervalSeconds, TimeUnit.SECONDS);<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The task that fetches the registry information at specified intervals.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheRefreshThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            refreshRegistry();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@VisibleForTesting</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">refreshRegistry</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ....<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> fetchRegistry(remoteRegionsModified);<br>            <span class="hljs-keyword">if</span> (success) &#123;<br>                registrySize = localRegionApps.get().size();<br>                lastSuccessfulRegistryFetchTimestamp = System.currentTimeMillis();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            logger.error(<span class="hljs-string">&quot;Cannot fetch registry from server&quot;</span>, e);<br>        &#125;        <br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">fetchRegistry</span><span class="hljs-params">(<span class="hljs-type">boolean</span> forceFullRegistryFetch)</span> &#123;<br>        <span class="hljs-type">Stopwatch</span> <span class="hljs-variable">tracer</span> <span class="hljs-operator">=</span> FETCH_REGISTRY_TIMER.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ....<br>                <span class="hljs-comment">//增量抓取注册表</span><br>                getAndUpdateDelta(applications);<br>            ..<br>            applications.setAppsHashCode(applications.getReconcileHashCode());<br>            logTotalInstances();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            logger.error(PREFIX + appPathIdentifier + <span class="hljs-string">&quot; - was unable to refresh its cache! status = &quot;</span> + e.getMessage(), e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (tracer != <span class="hljs-literal">null</span>) &#123;<br>                tracer.stop();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAndUpdateDelta</span><span class="hljs-params">(Applications applications)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">currentUpdateGeneration</span> <span class="hljs-operator">=</span> fetchRegistryGeneration.get();<br><br>        <span class="hljs-type">Applications</span> <span class="hljs-variable">delta</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        EurekaHttpResponse&lt;Applications&gt; httpResponse = eurekaTransport.queryClient.getDelta(remoteRegionsRef.get());<br>        <span class="hljs-keyword">if</span> (httpResponse.getStatusCode() == Status.OK.getStatusCode()) &#123;<br>            delta = httpResponse.getEntity();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (delta == <span class="hljs-literal">null</span>) &#123;<br>            logger.warn(<span class="hljs-string">&quot;The server does not allow the delta revision to be applied because it is not safe. &quot;</span><br>                    + <span class="hljs-string">&quot;Hence got the full registry.&quot;</span>);<br>            <span class="hljs-comment">//增量注册表获取不到就获取全量注册表</span><br>            getAndStoreFullRegistry();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + <span class="hljs-number">1</span>)) &#123;<br>            logger.debug(<span class="hljs-string">&quot;Got delta update with apps hashcode &#123;&#125;&quot;</span>, delta.getAppsHashCode());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">reconcileHashCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (fetchRegistryUpdateLock.tryLock()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//更新增量注册表</span><br>                    updateDelta(delta);<br>                    <span class="hljs-comment">//对更新完毕之后的注册表，计算一个hash值</span><br>                    reconcileHashCode = getReconcileHashCode(applications);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    fetchRegistryUpdateLock.unlock();<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                logger.warn(<span class="hljs-string">&quot;Cannot acquire update lock, aborting getAndUpdateDelta&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// There is a diff in number of instances for some reason</span><br>            <span class="hljs-comment">//进行hash值比对</span><br>            <span class="hljs-keyword">if</span> (!reconcileHashCode.equals(delta.getAppsHashCode()) || clientConfig.shouldLogDeltaDiff()) &#123;<br>                reconcileAndLogDifference(delta, reconcileHashCode);  <span class="hljs-comment">// this makes a remoteCall</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            logger.warn(<span class="hljs-string">&quot;Not updating application delta as another thread is updating it already&quot;</span>);<br>            logger.debug(<span class="hljs-string">&quot;Ignoring delta update with apps hashcode &#123;&#125;, as another thread is updating it already&quot;</span>, delta.getAppsHashCode());<br>        &#125;<br>    &#125;<br><br><br></code></pre></td></tr></table></figure><p>client端需要在server进行的操作或者是同步信息都是由jersey接口进行的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Path(&quot;delta&quot;)</span><br>    <span class="hljs-meta">@GET</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">getContainerDifferential</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@PathParam(&quot;version&quot;)</span> String version,</span><br><span class="hljs-params">            <span class="hljs-meta">@HeaderParam(HEADER_ACCEPT)</span> String acceptHeader,</span><br><span class="hljs-params">            <span class="hljs-meta">@HeaderParam(HEADER_ACCEPT_ENCODING)</span> String acceptEncoding,</span><br><span class="hljs-params">            <span class="hljs-meta">@HeaderParam(EurekaAccept.HTTP_X_EUREKA_ACCEPT)</span> String eurekaAccept,</span><br><span class="hljs-params">            <span class="hljs-meta">@Context</span> UriInfo uriInfo, <span class="hljs-meta">@Nullable</span> <span class="hljs-meta">@QueryParam(&quot;regions&quot;)</span> String regionsStr)</span> &#123;<br>...<br>        <span class="hljs-type">Key</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(Key.EntityType.Application,<br>                ResponseCacheImpl.ALL_APPS_DELTA,<br>                keyType, CurrentRequestVersion.get(), EurekaAccept.fromString(eurekaAccept), regions<br>        );<br><br>        <span class="hljs-keyword">return</span> Response.ok(responseCache.getGZIP(cacheKey))<br>            .header(HEADER_CONTENT_ENCODING, HEADER_GZIP_VALUE)<br>            .header(HEADER_CONTENT_TYPE, returnMediaType)<br>            .build();<br>        <br>    &#125;<br><br><span class="hljs-keyword">private</span> Value <span class="hljs-title function_">generatePayload</span><span class="hljs-params">(Key key)</span> &#123;<br>        <span class="hljs-type">Stopwatch</span> <span class="hljs-variable">tracer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ...<br>           <span class="hljs-keyword">if</span> (isRemoteRegionRequested) &#123;<br>               tracer = serializeDeltaAppsWithRemoteRegionTimer.start();<br>               versionDeltaWithRegions.incrementAndGet();<br>               versionDeltaWithRegionsLegacy.incrementAndGet();<br>               payload = getPayLoad(key,<br>                                    registry.getApplicationDeltasFromMultipleRegions(key.getRegions()));<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               tracer = serializeDeltaAppsTimer.start();<br>               versionDelta.incrementAndGet();<br>               versionDeltaLegacy.incrementAndGet();<br>               payload = getPayLoad(key, registry.getApplicationDeltas());<br>           &#125;<br>            ...<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Value</span>(payload);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (tracer != <span class="hljs-literal">null</span>) &#123;<br>                tracer.stop();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ConcurrentLinkedQueue&lt;RecentlyChangedItem&gt; recentlyChangedQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentLinkedQueue</span>&lt;RecentlyChangedItem&gt;();<br><br><br><span class="hljs-keyword">protected</span> <span class="hljs-title function_">AbstractInstanceRegistry</span><span class="hljs-params">(EurekaServerConfig serverConfig, EurekaClientConfig clientConfig, ServerCodecs serverCodecs)</span> &#123;<br>        <span class="hljs-built_in">this</span>.serverConfig = serverConfig;<br>        <span class="hljs-built_in">this</span>.clientConfig = clientConfig;<br>        <span class="hljs-built_in">this</span>.serverCodecs = serverCodecs;<br>        <span class="hljs-built_in">this</span>.recentCanceledQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircularQueue</span>&lt;Pair&lt;Long, String&gt;&gt;(<span class="hljs-number">1000</span>);<br>        <span class="hljs-built_in">this</span>.recentRegisteredQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircularQueue</span>&lt;Pair&lt;Long, String&gt;&gt;(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-built_in">this</span>.renewsLastMin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MeasuredRate</span>(<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//维护recentlyChangedQueue的定时任务</span><br>        <span class="hljs-built_in">this</span>.deltaRetentionTimer.schedule(getDeltaRetentionTask(),<br>                serverConfig.getDeltaRetentionTimerIntervalInMs(),<br>                serverConfig.getDeltaRetentionTimerIntervalInMs());<br>    &#125;<br><br><span class="hljs-keyword">private</span> TimerTask <span class="hljs-title function_">getDeltaRetentionTask</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">//保持recentlyChangedQueue中实例为三分钟内变化的</span><br>                Iterator&lt;RecentlyChangedItem&gt; it = recentlyChangedQueue.iterator();<br>                <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>                    <span class="hljs-keyword">if</span> (it.next().getLastUpdateTime() &lt;<br>                            System.currentTimeMillis() - serverConfig.getRetentionTimeInMSInDeltaQueue()) &#123;<br>                        it.remove();<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>        &#125;;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Gets the application delta also including instances from the passed remote regions, with the instances from the</span><br><span class="hljs-comment">     * local region. &lt;br/&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * The remote regions from where the instances will be chosen can further be restricted if this application does not</span><br><span class="hljs-comment">     * appear in the whitelist specified for the region as returned by</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> EurekaServerConfig#getRemoteRegionAppWhitelist(String)&#125; for a region. In case, there is no whitelist</span><br><span class="hljs-comment">     * defined for a region, this method will also look for a global whitelist by passing &lt;code&gt;null&lt;/code&gt; to the</span><br><span class="hljs-comment">     * method &#123;<span class="hljs-doctag">@link</span> EurekaServerConfig#getRemoteRegionAppWhitelist(String)&#125; &lt;br/&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> remoteRegions The remote regions for which the instances are to be queried. The instances may be limited</span><br><span class="hljs-comment">     *                      by a whitelist as explained above. If &lt;code&gt;null&lt;/code&gt; all remote regions are included.</span><br><span class="hljs-comment">     *                      If empty list then no remote region is included.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The delta with instances from the passed remote regions as well as local region. The instances</span><br><span class="hljs-comment">     * from remote regions can be further be restricted as explained above. &lt;code&gt;null&lt;/code&gt; if the application does</span><br><span class="hljs-comment">     * not exist locally or in remote regions.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Applications <span class="hljs-title function_">getApplicationDeltasFromMultipleRegions</span><span class="hljs-params">(String[] remoteRegions)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == remoteRegions) &#123;<br>            remoteRegions = allKnownRemoteRegions; <span class="hljs-comment">// null means all remote regions.</span><br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">includeRemoteRegion</span> <span class="hljs-operator">=</span> remoteRegions.length != <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (includeRemoteRegion) &#123;<br>            GET_ALL_WITH_REMOTE_REGIONS_CACHE_MISS_DELTA.increment();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            GET_ALL_CACHE_MISS_DELTA.increment();<br>        &#125;<br><br>        <span class="hljs-type">Applications</span> <span class="hljs-variable">apps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Applications</span>();<br>        apps.setVersion(responseCache.getVersionDeltaWithRegions().get());<br>        Map&lt;String, Application&gt; applicationInstancesMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Application&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br>            write.lock();<br>            <span class="hljs-comment">//获取最近三分钟内变化的服务实例的注册表，增量注册表</span><br>            Iterator&lt;RecentlyChangedItem&gt; iter = <span class="hljs-built_in">this</span>.recentlyChangedQueue.iterator();<br>            logger.debug(<span class="hljs-string">&quot;The number of elements in the delta queue is :&quot;</span> + <span class="hljs-built_in">this</span>.recentlyChangedQueue.size());<br>            <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>                Lease&lt;InstanceInfo&gt; lease = iter.next().getLeaseInfo();<br>                <span class="hljs-type">InstanceInfo</span> <span class="hljs-variable">instanceInfo</span> <span class="hljs-operator">=</span> lease.getHolder();<br>                Object[] args = &#123;instanceInfo.getId(),<br>                        instanceInfo.getStatus().name(),<br>                        instanceInfo.getActionType().name()&#125;;<br>                logger.debug(<span class="hljs-string">&quot;The instance id %s is found with status %s and actiontype %s&quot;</span>, args);<br>                <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> applicationInstancesMap.get(instanceInfo.getAppName());<br>                <span class="hljs-keyword">if</span> (app == <span class="hljs-literal">null</span>) &#123;<br>                    app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Application</span>(instanceInfo.getAppName());<br>                    applicationInstancesMap.put(instanceInfo.getAppName(), app);<br>                    apps.addApplication(app);<br>                &#125;<br>                app.addInstance(decorateInstanceInfo(lease));<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (includeRemoteRegion) &#123;<br>                <span class="hljs-keyword">for</span> (String remoteRegion : remoteRegions) &#123;<br>                    <span class="hljs-type">RemoteRegionRegistry</span> <span class="hljs-variable">remoteRegistry</span> <span class="hljs-operator">=</span> regionNameVSRemoteRegistry.get(remoteRegion);<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != remoteRegistry) &#123;<br>                        <span class="hljs-type">Applications</span> <span class="hljs-variable">remoteAppsDelta</span> <span class="hljs-operator">=</span> remoteRegistry.getApplicationDeltas();<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != remoteAppsDelta) &#123;<br>                            <span class="hljs-keyword">for</span> (Application application : remoteAppsDelta.getRegisteredApplications()) &#123;<br>                                <span class="hljs-keyword">if</span> (shouldFetchFromRemoteRegistry(application.getName(), remoteRegion)) &#123;<br>                                    <span class="hljs-type">Application</span> <span class="hljs-variable">appInstanceTillNow</span> <span class="hljs-operator">=</span><br>                                            apps.getRegisteredApplications(application.getName());<br>                                    <span class="hljs-keyword">if</span> (appInstanceTillNow == <span class="hljs-literal">null</span>) &#123;<br>                                        appInstanceTillNow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Application</span>(application.getName());<br>                                        apps.addApplication(appInstanceTillNow);<br>                                    &#125;<br>                                    <span class="hljs-keyword">for</span> (InstanceInfo instanceInfo : application.getInstances()) &#123;<br>                                        appInstanceTillNow.addInstance(instanceInfo);<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-type">Applications</span> <span class="hljs-variable">allApps</span> <span class="hljs-operator">=</span> getApplicationsFromMultipleRegions(remoteRegions);<br>            apps.setAppsHashCode(allApps.getReconcileHashCode());<br>            <span class="hljs-keyword">return</span> apps;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            write.unlock();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>eureka client抓取增量注册表步骤</p><ol><li>在eureka client初始化的时候，启动定时任务cacheRefresh，每隔30s一次</li><li>由于本地已有缓存的Applications，所以在此抓取注册表的时候，走的增量注册的策略</li><li>走EurekaHttpClient的getDelta()方法和接口，<a href="http://localhost:8080/v2/apps/delta%EF%BC%8CGET%E8%AF%B7%E6%B1%82">http://localhost:8080/v2/apps/delta，GET请求</a></li><li>server端接收请求接口为com.netflix.eureka.resources.ApplicationsResource#getContainerDifferential，使用ALL_APPS_DELTA作为cacheKey去获取增量实例</li><li>在readWriteCacheMap中，根据cacheKey获取的注册表不一样。获取增量注册的时候，最终调用getApplicationDeltasFromMultipleRegions，即上次拉取注册表之后，有变化的注册表</li><li>recentlyChangedQueue表示最近有变化的服务实例，比如新注册、下线等动作。在Register构造的时候，有一个定时调度默认30s，检查服务实例变更记录是否在队列中停留超过180s。如果超过了180s就会从队列中间这个服务实例变更记录移除。即recentlyChangedQueue队列仅记录三分钟内服务实例变更记录。</li><li>eureka client每隔30s去抓取注册表的时候，就会返回最近3分钟发生过变化的服务实例</li><li>在抓取到delta增量注册表之后，就会和本地注册表进行合并，完成服务实例增删改</li><li>在更新完毕之后，会对注册表计算一个hash值，delta也会带有一个eureka server点的全量注册表的hash值。然后将两个hash值进行比对，如果一致就说明没问题；如果不一致，就表明本地注册表和server端不一样，此时会重新从eureka server拉取全量的注册表到本地来更新到缓存中。</li></ol>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eureka client</title>
    <link href="/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka-client/"/>
    <url>/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka-client/</url>
    
    <content type="html"><![CDATA[<h1 id="一、eureka-client整体流程图"><a href="#一、eureka-client整体流程图" class="headerlink" title="一、eureka client整体流程图"></a>一、eureka client整体流程图</h1><h2 id="eureka-client启动过程"><a href="#eureka-client启动过程" class="headerlink" title="eureka client启动过程"></a>eureka client启动过程</h2><p><a href="https://www.processon.com/view/link/6166f0a8e0b34d7c7dae7d11">点击查看【processon】</a><br>eureka-example项目中，存在eureka client启动例子：com.netflix.eureka.ExampleEurekaClient#main，模拟服务实例启动的时候，启动生成eureka client向eureka server进行服务注册。</p><h2 id="eureka服务注册流程"><a href="#eureka服务注册流程" class="headerlink" title="eureka服务注册流程"></a>eureka服务注册流程</h2><p><a href="https://www.processon.com/view/link/616c58d1f346fb06a9f3b845">点击查看【processon】</a></p><h1 id="二、eureka-client服务初始化及发送注册请求"><a href="#二、eureka-client服务初始化及发送注册请求" class="headerlink" title="二、eureka client服务初始化及发送注册请求"></a>二、eureka client服务初始化及发送注册请求</h1><p>入口：初始化eureka client的时候，进行调度任务初始化会初始化一个服务注册的调度任务<br>com.netflix.discovery.DiscoveryClient#initScheduledTasks。初始化调度任务的时候，在InstanceInfoReplicator组件中进行了服务注册请求的发送。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clientConfig.shouldRegisterWithEureka()) &#123;<br>...<br>           <span class="hljs-comment">// InstanceInfo replicator</span><br>           instanceInfoReplicator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstanceInfoReplicator</span>(<br>                   <span class="hljs-built_in">this</span>,<br>                   instanceInfo,<br>                   clientConfig.getInstanceInfoReplicationIntervalSeconds(),<br>                   <span class="hljs-number">2</span>); <span class="hljs-comment">// burstSize</span><br>       ...<br>           instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           logger.info(<span class="hljs-string">&quot;Not registering with Eureka server per configuration&quot;</span>);<br>       &#125;<br>   &#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-type">int</span> initialDelayMs)</span> &#123;<br>       <span class="hljs-keyword">if</span> (started.compareAndSet(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)) &#123;<br>           instanceInfo.setIsDirty();  <span class="hljs-comment">// for initial register</span><br>           <span class="hljs-type">Future</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> scheduler.schedule(<span class="hljs-built_in">this</span>, initialDelayMs, TimeUnit.SECONDS);<br>           scheduledPeriodicRef.set(next);<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Sets the dirty flag so that the instance information can be carried to</span><br><span class="hljs-comment">    * the discovery server on the next heartbeat.</span><br><span class="hljs-comment">    */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIsDirty</span><span class="hljs-params">()</span> &#123;<br>       isInstanceInfoDirty = <span class="hljs-literal">true</span>;<br>       lastDirtyTimestamp = System.currentTimeMillis();<br>   &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//刷新服务实例配置</span><br>           discoveryClient.refreshInstanceInfo();<br><br>           <span class="hljs-type">Long</span> <span class="hljs-variable">dirtyTimestamp</span> <span class="hljs-operator">=</span> instanceInfo.isDirtyWithTime();<br>           <span class="hljs-keyword">if</span> (dirtyTimestamp != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-comment">//服务注册</span><br>               discoveryClient.register();<br>               instanceInfo.unsetIsDirty(dirtyTimestamp);<br>           &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>           logger.warn(<span class="hljs-string">&quot;There was a problem with the instance info replicator&quot;</span>, t);<br>       &#125; <span class="hljs-keyword">finally</span> &#123;<br>           <span class="hljs-type">Future</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> scheduler.schedule(<span class="hljs-built_in">this</span>, replicationIntervalSeconds, TimeUnit.SECONDS);<br>           scheduledPeriodicRef.set(next);<br>       &#125;<br>   &#125;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">register</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>       logger.info(PREFIX + appPathIdentifier + <span class="hljs-string">&quot;: registering service...&quot;</span>);<br>       EurekaHttpResponse&lt;Void&gt; httpResponse;<br>       <span class="hljs-keyword">try</span> &#123;<br>           httpResponse = eurekaTransport.registrationClient.register(instanceInfo);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           logger.warn(<span class="hljs-string">&quot;&#123;&#125; - registration failed &#123;&#125;&quot;</span>, PREFIX + appPathIdentifier, e.getMessage(), e);<br>           <span class="hljs-keyword">throw</span> e;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;<br>           logger.info(<span class="hljs-string">&quot;&#123;&#125; - registration status: &#123;&#125;&quot;</span>, PREFIX + appPathIdentifier, httpResponse.getStatusCode());<br>       &#125;<br>       <span class="hljs-keyword">return</span> httpResponse.getStatusCode() == <span class="hljs-number">204</span>;<br>   &#125;<br><br><br></code></pre></td></tr></table></figure><p>instanceInfoReplicator虽然实现了runable，但是此处调用还是按照start()调用。</p><ol><li>在内部start()方法里面，将自己作为一个线程放到调度线程中执行，默认延迟40s，并且将isInstanceInfoDirty设置为true</li><li>如果按照线程执行则会执行run方法<ol><li>discoveryClient.refreshInstanceInfo()刷新服务实例的配置，就是调用了ApplicationInfoManager。并且调用健康检查器检查状态，重新设置服务实例状态</li><li>由于之前设置过isInstanceInfoDirty，所以进行服务注册。底层调用TransportClient的RegistionClient，执行register方法，将InstanceInfo服务实例的信息通过http请求，调用eureka server对外暴露的restful接口</li></ol></li><li>按照register()调用为EurekaHttpClient接口中的方法，按照其实现类，以及eureka的依赖包推测实现为AbstractJersey2EurekaHttpClient，请求信息为<a href="http://localhost:8080/v2/apps/ServiceA">http://localhost:8080/v2/apps/ServiceA</a></li></ol><p>此时完成的步骤为，在eureka client端初始化eureka client信息，并向eureka server发送eureka client实例信息，请求注册的过程。</p><h1 id="三、eureka-server完成服务注册"><a href="#三、eureka-server完成服务注册" class="headerlink" title="三、eureka server完成服务注册"></a>三、eureka server完成服务注册</h1><h2 id="1-jersey请求路径映射"><a href="#1-jersey请求路径映射" class="headerlink" title="1.jersey请求路径映射"></a>1.jersey请求路径映射</h2><p>eureka-core&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;netflix&#x2F;eureka&#x2F;resources包下面，相当于spring mvc的controller。<br>所有请求会发送给eureka server的web应用，最后都会走jersey的servlet，jersey的servlet根据请求路径，将请求转发给eureka core里面的resource。</p><p>com.netflix.eureka.resources.ApplicationsResource：用于接收请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> EurekaHttpResponse&lt;Void&gt; <span class="hljs-title function_">register</span><span class="hljs-params">(InstanceInfo info)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">urlPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;apps/&quot;</span> + info.getAppName();<br>    <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Builder</span> <span class="hljs-variable">resourceBuilder</span> <span class="hljs-operator">=</span> jerseyClient.target(serviceUrl).path(urlPath).request();<br>        addExtraProperties(resourceBuilder);<br>        addExtraHeaders(resourceBuilder);<br>        response = resourceBuilder<br>            .accept(MediaType.APPLICATION_JSON)<br>            .acceptEncoding(<span class="hljs-string">&quot;gzip&quot;</span>)<br>            .post(Entity.json(info));<br>        <span class="hljs-keyword">return</span> anEurekaHttpResponse(response.getStatus()).headers(headersOf(response)).build();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>            logger.debug(<span class="hljs-string">&quot;Jersey2 HTTP POST &#123;&#125;/&#123;&#125; with instance &#123;&#125;; statusCode=&#123;&#125;&quot;</span>, serviceUrl, urlPath, info.getId(),<br>                         response == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;N/A&quot;</span> : response.getStatus());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span>) &#123;<br>            response.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以<strong><a href="http://localhost:8080/v2/apps/ServiceA">http://localhost:8080/v2/apps/ServiceA</a></strong>请求路径为例<br>ServiceA可以任务是一个参数appId</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationsResource</span>&#123;<br><span class="hljs-meta">@Path(&quot;&#123;appId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ApplicationResource <span class="hljs-title function_">getApplicationResource</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@PathParam(&quot;version&quot;)</span> String version,</span><br><span class="hljs-params">            <span class="hljs-meta">@PathParam(&quot;appId&quot;)</span> String appId)</span> &#123;<br>        CurrentRequestVersion.set(Version.toEnum(version));<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationResource</span>(appId, serverConfig, registry);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationResource</span>&#123;<br><span class="hljs-meta">@POST</span><br>    <span class="hljs-meta">@Consumes(&#123;&quot;application/json&quot;, &quot;application/xml&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">addInstance</span><span class="hljs-params">(InstanceInfo info,</span><br><span class="hljs-params">                                <span class="hljs-meta">@HeaderParam(PeerEurekaNode.HEADER_REPLICATION)</span> String isReplication)</span> &#123;<br>        logger.debug(<span class="hljs-string">&quot;Registering instance &#123;&#125; (replication=&#123;&#125;)&quot;</span>, info.getId(), isReplication);<br>        <span class="hljs-comment">// validate that the instanceinfo contains all the necessary required fields</span><br>        <span class="hljs-keyword">if</span> (isBlank(info.getId())) &#123;<br>            <span class="hljs-keyword">return</span> Response.status(<span class="hljs-number">400</span>).entity(<span class="hljs-string">&quot;Missing instanceId&quot;</span>).build();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isBlank(info.getHostName())) &#123;<br>            <span class="hljs-keyword">return</span> Response.status(<span class="hljs-number">400</span>).entity(<span class="hljs-string">&quot;Missing hostname&quot;</span>).build();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isBlank(info.getIPAddr())) &#123;<br>            <span class="hljs-keyword">return</span> Response.status(<span class="hljs-number">400</span>).entity(<span class="hljs-string">&quot;Missing ip address&quot;</span>).build();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isBlank(info.getAppName())) &#123;<br>            <span class="hljs-keyword">return</span> Response.status(<span class="hljs-number">400</span>).entity(<span class="hljs-string">&quot;Missing appName&quot;</span>).build();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!appName.equals(info.getAppName())) &#123;<br>            <span class="hljs-keyword">return</span> Response.status(<span class="hljs-number">400</span>).entity(<span class="hljs-string">&quot;Mismatched appName, expecting &quot;</span> + appName + <span class="hljs-string">&quot; but was &quot;</span> + info.getAppName()).build();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.getDataCenterInfo() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Response.status(<span class="hljs-number">400</span>).entity(<span class="hljs-string">&quot;Missing dataCenterInfo&quot;</span>).build();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.getDataCenterInfo().getName() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Response.status(<span class="hljs-number">400</span>).entity(<span class="hljs-string">&quot;Missing dataCenterInfo Name&quot;</span>).build();<br>        &#125;<br><br>        <span class="hljs-comment">// handle cases where clients may be registering with bad DataCenterInfo with missing data</span><br>        <span class="hljs-type">DataCenterInfo</span> <span class="hljs-variable">dataCenterInfo</span> <span class="hljs-operator">=</span> info.getDataCenterInfo();<br>        <span class="hljs-keyword">if</span> (dataCenterInfo <span class="hljs-keyword">instanceof</span> UniqueIdentifier) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">dataCenterInfoId</span> <span class="hljs-operator">=</span> ((UniqueIdentifier) dataCenterInfo).getId();<br>            <span class="hljs-keyword">if</span> (isBlank(dataCenterInfoId)) &#123;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">experimental</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;true&quot;</span>.equalsIgnoreCase(serverConfig.getExperimental(<span class="hljs-string">&quot;registration.validation.dataCenterInfoId&quot;</span>));<br>                <span class="hljs-keyword">if</span> (experimental) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DataCenterInfo of type &quot;</span> + dataCenterInfo.getClass() + <span class="hljs-string">&quot; must contain a valid id&quot;</span>;<br>                    <span class="hljs-keyword">return</span> Response.status(<span class="hljs-number">400</span>).entity(entity).build();<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dataCenterInfo <span class="hljs-keyword">instanceof</span> AmazonInfo) &#123;<br>                    <span class="hljs-type">AmazonInfo</span> <span class="hljs-variable">amazonInfo</span> <span class="hljs-operator">=</span> (AmazonInfo) dataCenterInfo;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">effectiveId</span> <span class="hljs-operator">=</span> amazonInfo.get(AmazonInfo.MetaDataKey.instanceId);<br>                    <span class="hljs-keyword">if</span> (effectiveId == <span class="hljs-literal">null</span>) &#123;<br>                        amazonInfo.getMetadata().put(AmazonInfo.MetaDataKey.instanceId.getName(), info.getId());<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    logger.warn(<span class="hljs-string">&quot;Registering DataCenterInfo of type &#123;&#125; without an appropriate id&quot;</span>, dataCenterInfo.getClass());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// PeerAwareInstanceRegistry 注册表</span><br>        registry.register(info, <span class="hljs-string">&quot;true&quot;</span>.equals(isReplication));<br>        <span class="hljs-keyword">return</span> Response.status(<span class="hljs-number">204</span>).build();  <span class="hljs-comment">// 204 to be backwards compatible</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ApplicationResource的addInstance()方法就是接收post请求。<br>单元测试注册入口<br>com.netflix.eureka.resources.ApplicationResourceTest#testGoodRegistration</p><p>在test包中可以看到许多开发测试的入口，可以依据此入口端点调试一遍源码。</p><h2 id="2-服务注册"><a href="#2-服务注册" class="headerlink" title="2.服务注册"></a>2.服务注册</h2><h3 id="InstanceInfo"><a href="#InstanceInfo" class="headerlink" title="InstanceInfo"></a>InstanceInfo</h3><p>服务实例对象，其中主要包含两块信息</p><ul><li>主机名、ip地址、端口号、url地址</li><li>lease契约信息<ul><li>保持心跳的时间间隔</li><li>最近心跳时间</li><li>服务注册时间</li><li>服务启动时间<h3 id="PeerAwareInstanceRegistry"><a href="#PeerAwareInstanceRegistry" class="headerlink" title="PeerAwareInstanceRegistry"></a>PeerAwareInstanceRegistry</h3>注册表，包含所有服务实例注册信息。register()方法，将服务实例往注册表去进行注册，实际上会调用父类AbstractInstanceRegistry的register()方法。</li></ul></li></ul><p>数据结构<br><strong>ConcurrentHashMap&lt;String, Map&lt;String, Lease<InstanceInfo>&gt;&gt; registry</strong></p><p>appName:服务名称<br>InstanceId:实例id，一个服务名称可以对应多个服务实例<br>Lease</p><h3 id="eureka控制台"><a href="#eureka控制台" class="headerlink" title="eureka控制台"></a>eureka控制台</h3><p>status.jsp<br>在jsp中获取EurekaServerContext，从中获取注册表信息，展示在页面上</p><h1 id="四、eureka-client全量抓取注册表"><a href="#四、eureka-client全量抓取注册表" class="headerlink" title="四、eureka client全量抓取注册表"></a>四、eureka client全量抓取注册表</h1><p>入口：com.netflix.discovery.DiscoveryClient#DiscoveryClient<br>com.netflix.discovery.DiscoveryClient#fetchRegistry</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clientConfig.shouldFetchRegistry() &amp;&amp; !fetchRegistry(<span class="hljs-literal">false</span>)) &#123;<br>    fetchRegistryFromBackup();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">fetchRegistry</span><span class="hljs-params">(<span class="hljs-type">boolean</span> forceFullRegistryFetch)</span> &#123;<br>        <span class="hljs-type">Stopwatch</span> <span class="hljs-variable">tracer</span> <span class="hljs-operator">=</span> FETCH_REGISTRY_TIMER.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// If the delta is disabled or if it is the first time, get all</span><br>            <span class="hljs-comment">// applications</span><br>            <span class="hljs-type">Applications</span> <span class="hljs-variable">applications</span> <span class="hljs-operator">=</span> getApplications();<br><br>            <span class="hljs-keyword">if</span> (clientConfig.shouldDisableDelta()<br>                    || (!Strings.isNullOrEmpty(clientConfig.getRegistryRefreshSingleVipAddress()))<br>                    || forceFullRegistryFetch<br>                    || (applications == <span class="hljs-literal">null</span>)<br>                    || (applications.getRegisteredApplications().size() == <span class="hljs-number">0</span>)<br>                    || (applications.getVersion() == -<span class="hljs-number">1</span>)) <span class="hljs-comment">//Client application does not have latest library supporting delta</span><br>            &#123;<br>                <span class="hljs-comment">//全量抓取注册表</span><br>                logger.info(<span class="hljs-string">&quot;Disable delta property : &#123;&#125;&quot;</span>, clientConfig.shouldDisableDelta());<br>                logger.info(<span class="hljs-string">&quot;Single vip registry refresh property : &#123;&#125;&quot;</span>, clientConfig.getRegistryRefreshSingleVipAddress());<br>                logger.info(<span class="hljs-string">&quot;Force full registry fetch : &#123;&#125;&quot;</span>, forceFullRegistryFetch);<br>                logger.info(<span class="hljs-string">&quot;Application is null : &#123;&#125;&quot;</span>, (applications == <span class="hljs-literal">null</span>));<br>                logger.info(<span class="hljs-string">&quot;Registered Applications size is zero : &#123;&#125;&quot;</span>,<br>                        (applications.getRegisteredApplications().size() == <span class="hljs-number">0</span>));<br>                logger.info(<span class="hljs-string">&quot;Application version is -1: &#123;&#125;&quot;</span>, (applications.getVersion() == -<span class="hljs-number">1</span>));<br>                getAndStoreFullRegistry();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//增量抓取注册表</span><br>                getAndUpdateDelta(applications);<br>            &#125;<br>            applications.setAppsHashCode(applications.getReconcileHashCode());<br>            logTotalInstances();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            logger.error(PREFIX + appPathIdentifier + <span class="hljs-string">&quot; - was unable to refresh its cache! status = &quot;</span> + e.getMessage(), e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (tracer != <span class="hljs-literal">null</span>) &#123;<br>                tracer.stop();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Notify about cache refresh before updating the instance remote status</span><br>        onCacheRefreshed();<br><br>        <span class="hljs-comment">// Update remote status based on refreshed data held in the cache</span><br>        updateInstanceRemoteStatus();<br><br>        <span class="hljs-comment">// registry was fetched successfully, so return true</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ol><li>现获取本地Application缓存。Application就是一个服务，包含了他自己所有的InstanceInfo</li><li>一堆逻辑判断，调用jersey client发送http请求(<a href="http://0.0.31.144/v2/apps)%EF%BC%8CGE%E8%AF%B7%E6%B1%82%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%85%A8%E9%87%8F%E6%B3%A8%E5%86%8C%E8%A1%A8%EF%BC%8C%E5%B9%B6%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98">http://8080/v2/apps)，GE请求，获取全量注册表，并在本地缓存</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eureka server</title>
    <link href="/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka-server/"/>
    <url>/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka-server/</url>
    
    <content type="html"><![CDATA[<h1 id="一、寻找eureka入口"><a href="#一、寻找eureka入口" class="headerlink" title="一、寻找eureka入口"></a>一、寻找eureka入口</h1><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.netflix.eureka.EurekaBootStrap<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><p>eureka-server是web容器启动的时候将其作为web应用带起来的，因此和web应用一样，存在一个web..xml。依据eureka-server&#x2F;src&#x2F;main&#x2F;webapp&#x2F;WEB-INF&#x2F;web.xml配置可以知道eureka-server的是基于监听器，并且启动器为<strong>com.netflix.eureka.EurekaBootStrap</strong>，其中初始化方法为contextInitialized()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent event)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        initEurekaEnvironment();<br>        initEurekaServerContext();<br><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> event.getServletContext();<br>        sc.setAttribute(EurekaServerContext.class.getName(), serverContext);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>        logger.error(<span class="hljs-string">&quot;Cannot bootstrap eureka server :&quot;</span>, e);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Cannot bootstrap eureka server :&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、初始化eureka环境"><a href="#二、初始化eureka环境" class="headerlink" title="二、初始化eureka环境"></a>二、初始化eureka环境</h1><p>initEurekaEnvironment()<br>初始化eureka-server的环境<br>默认参数</p><ul><li>ARCHAIUS_DEPLOYMENT_DATACENTER 数据中心  - 使用默认</li><li>ARCHAIUS_DEPLOYMENT_ENVIRONMENT环境 - 使用测试环境<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Users can override to initialize the environment themselves.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initEurekaEnvironment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    logger.info(<span class="hljs-string">&quot;Setting the eureka configuration..&quot;</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">dataCenter</span> <span class="hljs-operator">=</span> ConfigurationManager.getConfigInstance().getString(EUREKA_DATACENTER);<br>    <span class="hljs-keyword">if</span> (dataCenter == <span class="hljs-literal">null</span>) &#123;<br>        logger.info(<span class="hljs-string">&quot;Eureka data center value eureka.datacenter is not set, defaulting to default&quot;</span>);<br>        ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_DATACENTER, DEFAULT);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_DATACENTER, dataCenter);<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> ConfigurationManager.getConfigInstance().getString(EUREKA_ENVIRONMENT);<br>    <span class="hljs-keyword">if</span> (environment == <span class="hljs-literal">null</span>) &#123;<br>        ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_ENVIRONMENT, TEST);<br>        logger.info(<span class="hljs-string">&quot;Eureka environment value eureka.environment is not set, defaulting to test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>ConfigurationManager.getConfigInstance()<br>初始化ConfigurationManager实例，用于管理eureka自身的配置，供后序使用。<br>初始化使用经典的单例模式，double check + volatile<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">AbstractConfiguration</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Get the current system wide configuration. If there has not been set, it will return a default</span><br><span class="hljs-comment">* &#123;<span class="hljs-doctag">@link</span> ConcurrentCompositeConfiguration&#125; which contains a SystemConfiguration from Apache Commons</span><br><span class="hljs-comment">* Configuration and a &#123;<span class="hljs-doctag">@link</span> DynamicURLConfiguration&#125;.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AbstractConfiguration <span class="hljs-title function_">getConfigInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">synchronized</span> (ConfigurationManager.class) &#123;<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                instance = getConfigInstance(Boolean.getBoolean(DynamicPropertyFactory.DISABLE_DEFAULT_CONFIG));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> instance;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、初始化eureka-server上下文"><a href="#三、初始化eureka-server上下文" class="headerlink" title="三、初始化eureka-server上下文"></a>三、初始化eureka-server上下文</h1>initEurekaServerContext();<br>总览<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* init hook for server context. Override for custom logic.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initEurekaServerContext</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1.加载eureka-server.properties文件中的配置</span><br>    <span class="hljs-type">EurekaServerConfig</span> <span class="hljs-variable">eurekaServerConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEurekaServerConfig</span>();<br><br>    <span class="hljs-comment">// For backward compatibility</span><br>    JsonXStream.getInstance().registerConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">V1AwareInstanceInfoConverter</span>(), XStream.PRIORITY_VERY_HIGH);<br>    XmlXStream.getInstance().registerConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">V1AwareInstanceInfoConverter</span>(), XStream.PRIORITY_VERY_HIGH);<br><br>    logger.info(<span class="hljs-string">&quot;Initializing the eureka client...&quot;</span>);<br>    logger.info(eurekaServerConfig.getJsonCodecName());<br>    <span class="hljs-type">ServerCodecs</span> <span class="hljs-variable">serverCodecs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultServerCodecs</span>(eurekaServerConfig);<br>    <span class="hljs-comment">//2.初始化ApplicationInfoManager</span><br>    <span class="hljs-type">ApplicationInfoManager</span> <span class="hljs-variable">applicationInfoManager</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//3.初始化eureka-server内部的一个eureka-client（用于和其他eureka-server节点注册和通讯）</span><br>    <span class="hljs-keyword">if</span> (eurekaClient == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">EurekaInstanceConfig</span> <span class="hljs-variable">instanceConfig</span> <span class="hljs-operator">=</span> isCloud(ConfigurationManager.getDeploymentContext())<br>            ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">CloudInstanceConfig</span>()<br>            : <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDataCenterInstanceConfig</span>();<br><br>        applicationInfoManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationInfoManager</span>(<br>            instanceConfig, <span class="hljs-keyword">new</span> <span class="hljs-title class_">EurekaConfigBasedInstanceInfoProvider</span>(instanceConfig).get());<br><br>        <span class="hljs-type">EurekaClientConfig</span> <span class="hljs-variable">eurekaClientConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEurekaClientConfig</span>();<br>        eurekaClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DiscoveryClient</span>(applicationInfoManager, eurekaClientConfig);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        applicationInfoManager = eurekaClient.getApplicationInfoManager();<br>    &#125;<br><br>    <span class="hljs-comment">//4.处理注册相关事情</span><br>    PeerAwareInstanceRegistry registry;<br>    <span class="hljs-keyword">if</span> (isAws(applicationInfoManager.getInfo())) &#123;<br>        registry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AwsInstanceRegistry</span>(<br>            eurekaServerConfig,<br>            eurekaClient.getEurekaClientConfig(),<br>            serverCodecs,<br>            eurekaClient<br>        );<br>        awsBinder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AwsBinderDelegate</span>(eurekaServerConfig, eurekaClient.getEurekaClientConfig(), registry, applicationInfoManager);<br>        awsBinder.start();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        registry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PeerAwareInstanceRegistryImpl</span>(<br>            eurekaServerConfig,<br>            eurekaClient.getEurekaClientConfig(),<br>            serverCodecs,<br>            eurekaClient<br>        );<br>    &#125;<br><br>    <span class="hljs-comment">//5.处理peer节点相关事情 --&gt; eureka server的集群</span><br>    <span class="hljs-type">PeerEurekaNodes</span> <span class="hljs-variable">peerEurekaNodes</span> <span class="hljs-operator">=</span> getPeerEurekaNodes(<br>        registry,<br>        eurekaServerConfig,<br>        eurekaClient.getEurekaClientConfig(),<br>        serverCodecs,<br>        applicationInfoManager<br>    );<br><br>    <span class="hljs-comment">//6.完成eureka-server上下文content构建和初始化</span><br>    serverContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEurekaServerContext</span>(<br>        eurekaServerConfig,<br>        serverCodecs,<br>        registry,<br>        peerEurekaNodes,<br>        applicationInfoManager<br>    );<br><br>    EurekaServerContextHolder.initialize(serverContext);<br><br>    serverContext.initialize();<br>    logger.info(<span class="hljs-string">&quot;Initialized server context&quot;</span>);<br><br>    <span class="hljs-comment">//7.从相邻的eureka节点拷贝注册信息</span><br>    <span class="hljs-comment">// Copy registry from neighboring eureka node</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">registryCount</span> <span class="hljs-operator">=</span> registry.syncUp();<br>    <span class="hljs-comment">//打开注册表，接收请求</span><br>    registry.openForTraffic(applicationInfoManager, registryCount);<br><br>    <span class="hljs-comment">//8.注册所有监控统计项</span><br>    <span class="hljs-comment">// Register all monitoring statistics.</span><br>    EurekaMonitors.registerAllStats();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-加载eureka-server-properties文件中的配置"><a href="#1-加载eureka-server-properties文件中的配置" class="headerlink" title="1.加载eureka-server.properties文件中的配置"></a>1.加载eureka-server.properties文件中的配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">EurekaServerConfig</span> <span class="hljs-variable">eurekaServerConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEurekaServerConfig</span>();<br><br><span class="hljs-meta">@Singleton</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultEurekaServerConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EurekaServerConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure>DefaultEurekaServerConfig实现EurekaServerConfig接口。<br>EurekaServerConfig涉及获取配置文件获取属性的设计。eureka将配置文件的属性获取设计为接口，属性获取需要调用对应方法，不同环境配置扩展也可以根据自己实现统一接口EurekaServerConfig即可。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EurekaServerConfig</span> &#123;<br><br>    String <span class="hljs-title function_">getAWSAccessId</span><span class="hljs-params">()</span>;<br><br>    String <span class="hljs-title function_">getAWSSecretKey</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getEIPBindRebindRetries</span><span class="hljs-params">()</span>;<br>    <br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>加载eureka-server.properties的过程</p><ol><li>创建一个DefaultEurekaServerConfig对象</li><li>创建DefaultEurekaServerConfig，执行一个init方法</li><li>将eureka-server.properties的配置加载到Properties中，然后将Properties对象的配置放到ConfigurationManager中。ConfigurationManager中就包含了所有配置项的值</li><li>DefaultEurekaServerConfig提供的获取配置项的各个方法，都通过硬编码的配置项名称，从DynamicPropertyFactory中获取配置项的值。DynamicPropertyFactory从ConfigurationManager获取，因此也包含了所有配置项的值</li><li>在获取配置项的时候，如果没有配置，那么就会有默认的值，全部属性都是有默认值的</li></ol><h2 id="2-初始化ApplicationInfoManager"><a href="#2-初始化ApplicationInfoManager" class="headerlink" title="2.初始化ApplicationInfoManager"></a>2.初始化ApplicationInfoManager</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">EurekaInstanceConfig</span> <span class="hljs-variable">instanceConfig</span> <span class="hljs-operator">=</span> isCloud(ConfigurationManager.getDeploymentContext())<br>        ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">CloudInstanceConfig</span>()<br>        : <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDataCenterInstanceConfig</span>();<br>            <br>applicationInfoManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationInfoManager</span>(<br>instanceConfig, <span class="hljs-keyword">new</span> <span class="hljs-title class_">EurekaConfigBasedInstanceInfoProvider</span>(instanceConfig).get());<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    config就是构造函数传入的EurekaInstanceConfig</span><br><span class="hljs-comment">    */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> InstanceInfo <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (instanceInfo == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// Build the lease information to be passed to the server based on config</span><br>        LeaseInfo.<span class="hljs-type">Builder</span> <span class="hljs-variable">leaseInfoBuilder</span> <span class="hljs-operator">=</span> LeaseInfo.Builder.newBuilder()<br>            .setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds())<br>            .setDurationInSecs(config.getLeaseExpirationDurationInSeconds());<br><br>        <span class="hljs-keyword">if</span> (vipAddressResolver == <span class="hljs-literal">null</span>) &#123;<br>            vipAddressResolver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Archaius1VipAddressResolver</span>();<br>        &#125;<br><br>        <span class="hljs-comment">// Builder the instance information to be registered with eureka server</span><br>        InstanceInfo.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> InstanceInfo.Builder.newBuilder(vipAddressResolver);<br><br>        ......<br><br>            builder.setNamespace(config.getNamespace())<br>            .setInstanceId(instanceId)<br>            .setAppName(config.getAppname())<br>            .setAppGroupName(config.getAppGroupName())<br>            .setDataCenterInfo(config.getDataCenterInfo())<br>            .setIPAddr(config.getIpAddress())<br>            .setHostName(defaultAddress)<br>            .setPort(config.getNonSecurePort())<br>            .enablePort(PortType.UNSECURE, config.isNonSecurePortEnabled())<br>            .setSecurePort(config.getSecurePort())<br>            .enablePort(PortType.SECURE, config.getSecurePortEnabled())<br>            .setVIPAddress(config.getVirtualHostName())<br>            .setSecureVIPAddress(config.getSecureVirtualHostName())<br>            .setHomePageUrl(config.getHomePageUrlPath(), config.getHomePageUrl())<br>            .setStatusPageUrl(config.getStatusPageUrlPath(), config.getStatusPageUrl())<br>            .setASGName(config.getASGName())<br>            .setHealthCheckUrls(config.getHealthCheckUrlPath(),<br>                                config.getHealthCheckUrl(), config.getSecureHealthCheckUrl());<br><br><br>        <span class="hljs-comment">// Start off with the STARTING state to avoid traffic</span><br>        <span class="hljs-keyword">if</span> (!config.isInstanceEnabledOnit()) &#123;<br>            <span class="hljs-type">InstanceStatus</span> <span class="hljs-variable">initialStatus</span> <span class="hljs-operator">=</span> InstanceStatus.STARTING;<br>            LOG.info(<span class="hljs-string">&quot;Setting initial instance status as: &quot;</span> + initialStatus);<br>            builder.setStatus(initialStatus);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            LOG.info(<span class="hljs-string">&quot;Setting initial instance status as: &#123;&#125;. This may be too early for the instance to advertise &quot;</span><br>                     + <span class="hljs-string">&quot;itself as available. You would instead want to control this via a healthcheck handler.&quot;</span>,<br>                     InstanceStatus.UP);<br>        &#125;<br><br>        <span class="hljs-comment">// Add any user-specific metadata information</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; mapEntry : config.getMetadataMap().entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> mapEntry.getKey();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> mapEntry.getValue();<br>            builder.add(key, value);<br>        &#125;<br><br>        instanceInfo = builder.build();<br>        instanceInfo.setLeaseInfo(leaseInfoBuilder.build());<br>    &#125;<br>    <span class="hljs-keyword">return</span> instanceInfo;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到ApplicationInfoManager的初始化依赖于两个对象，EurekaInstanceConfig和InstanceInfo。InstanceInfo则是根据建造者模式创建。</p><ul><li>EurekaInstanceConfig</li></ul><p>相当于服务实例相关的一些配置。eureka server同时也是eureka client，他也需要向其他eureka server注册，组成集群。因此eureka server自身也含有Application、Instance概念</p><ul><li>InstanceInfo</li></ul><p>相当于这个服务实例的实例本身的信息，直接使用建造者模式构建。核心思想是从EurekaInstanceConfig中读取各种服务实例相关的配置信息，在构建其他几个对象，组成InstanceInfo。</p><h2 id="3-初始化eureka-server内部的一个eureka-client"><a href="#3-初始化eureka-server内部的一个eureka-client" class="headerlink" title="3.初始化eureka-server内部的一个eureka-client"></a>3.初始化eureka-server内部的一个eureka-client</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">EurekaClientConfig</span> <span class="hljs-variable">eurekaClientConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEurekaClientConfig</span>();<br>eurekaClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DiscoveryClient</span>(applicationInfoManager, eurekaClientConfig);<br></code></pre></td></tr></table></figure><p>eurekaClientConfig与eurekaServerConfig一样，也是对外暴露了一堆配置项，读取的eureka-client.properties配置。<br>基于ApplicationInfoManager与eurekaClientConfig构建了一个eurekaClient。具体实现是DiscoveryClient。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">appPathIdentifier = instanceInfo.getAppName() + <span class="hljs-string">&quot;/&quot;</span> + instanceInfo.getId();<br></code></pre></td></tr></table></figure><p>appName代表一个服务名称，但是一个服务可能会部署多个机器，每个机器上部署的就是一个服务实例，组成的一个身份标识，例如：ServiceA&#x2F;001</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Inject</span><br>    DiscoveryClient(ApplicationInfoManager applicationInfoManager, EurekaClientConfig config, AbstractDiscoveryClientOptionalArgs args,<br>                    Provider&lt;BackupRegistry&gt; backupRegistryProvider) &#123;<br>        <span class="hljs-keyword">if</span> (args != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.healthCheckHandlerProvider = args.healthCheckHandlerProvider;<br>            <span class="hljs-built_in">this</span>.healthCheckCallbackProvider = args.healthCheckCallbackProvider;<br>            <span class="hljs-built_in">this</span>.eventListeners.addAll(args.getEventListeners());<br>            <span class="hljs-built_in">this</span>.preRegistrationHandler = args.preRegistrationHandler;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.healthCheckCallbackProvider = <span class="hljs-literal">null</span>;<br>            <span class="hljs-built_in">this</span>.healthCheckHandlerProvider = <span class="hljs-literal">null</span>;<br>            <span class="hljs-built_in">this</span>.preRegistrationHandler = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <br>        <span class="hljs-built_in">this</span>.applicationInfoManager = applicationInfoManager;<br>        <span class="hljs-type">InstanceInfo</span> <span class="hljs-variable">myInfo</span> <span class="hljs-operator">=</span> applicationInfoManager.getInfo();<br><br>        clientConfig = config;<br>        staticClientConfig = clientConfig;<br>        transportConfig = config.getTransportConfig();<br>        instanceInfo = myInfo;<br>        <span class="hljs-keyword">if</span> (myInfo != <span class="hljs-literal">null</span>) &#123;<br>            appPathIdentifier = instanceInfo.getAppName() + <span class="hljs-string">&quot;/&quot;</span> + instanceInfo.getId();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            logger.warn(<span class="hljs-string">&quot;Setting instanceInfo to a passed in null value&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.backupRegistryProvider = backupRegistryProvider;<br><br>        <span class="hljs-built_in">this</span>.urlRandomizer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EndpointUtils</span>.InstanceInfoBasedUrlRandomizer(instanceInfo);<br>        localRegionApps.set(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Applications</span>());<br><br>        fetchRegistryGeneration = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0</span>);<br><br>        remoteRegionsToFetch = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;String&gt;(clientConfig.fetchRegistryForRemoteRegions());<br>        remoteRegionsRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;(remoteRegionsToFetch.get() == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : remoteRegionsToFetch.get().split(<span class="hljs-string">&quot;,&quot;</span>));<br><br>        <span class="hljs-keyword">if</span> (config.shouldFetchRegistry()) &#123;<br>            <span class="hljs-built_in">this</span>.registryStalenessMonitor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThresholdLevelsMetric</span>(<span class="hljs-built_in">this</span>, METRIC_REGISTRY_PREFIX + <span class="hljs-string">&quot;lastUpdateSec_&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[]&#123;<span class="hljs-number">15L</span>, <span class="hljs-number">30L</span>, <span class="hljs-number">60L</span>, <span class="hljs-number">120L</span>, <span class="hljs-number">240L</span>, <span class="hljs-number">480L</span>&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.registryStalenessMonitor = ThresholdLevelsMetric.NO_OP_METRIC;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (config.shouldRegisterWithEureka()) &#123;<br>            <span class="hljs-built_in">this</span>.heartbeatStalenessMonitor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThresholdLevelsMetric</span>(<span class="hljs-built_in">this</span>, METRIC_REGISTRATION_PREFIX + <span class="hljs-string">&quot;lastHeartbeatSec_&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[]&#123;<span class="hljs-number">15L</span>, <span class="hljs-number">30L</span>, <span class="hljs-number">60L</span>, <span class="hljs-number">120L</span>, <span class="hljs-number">240L</span>, <span class="hljs-number">480L</span>&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.heartbeatStalenessMonitor = ThresholdLevelsMetric.NO_OP_METRIC;<br>        &#125;<br><br>        logger.info(<span class="hljs-string">&quot;Initializing Eureka in region &#123;&#125;&quot;</span>, clientConfig.getRegion());<br><br>        <span class="hljs-keyword">if</span> (!config.shouldRegisterWithEureka() &amp;&amp; !config.shouldFetchRegistry()) &#123;<br>            logger.info(<span class="hljs-string">&quot;Client configured to neither register nor query for data.&quot;</span>);<br>            scheduler = <span class="hljs-literal">null</span>;<br>            heartbeatExecutor = <span class="hljs-literal">null</span>;<br>            cacheRefreshExecutor = <span class="hljs-literal">null</span>;<br>            eurekaTransport = <span class="hljs-literal">null</span>;<br>            instanceRegionChecker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstanceRegionChecker</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyBasedAzToRegionMapper</span>(config), clientConfig.getRegion());<br><br>            <span class="hljs-comment">// This is a bit of hack to allow for existing code using DiscoveryManager.getInstance()</span><br>            <span class="hljs-comment">// to work with DI&#x27;d DiscoveryClient</span><br>            DiscoveryManager.getInstance().setDiscoveryClient(<span class="hljs-built_in">this</span>);<br>            DiscoveryManager.getInstance().setEurekaClientConfig(config);<br><br>            initTimestampMs = System.currentTimeMillis();<br>            logger.info(<span class="hljs-string">&quot;Discovery Client initialized at timestamp &#123;&#125; with initial instances count: &#123;&#125;&quot;</span>,<br>                    initTimestampMs, <span class="hljs-built_in">this</span>.getApplications().size());<br><br>            <span class="hljs-keyword">return</span>;  <span class="hljs-comment">// no need to setup up an network tasks and we are done</span><br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// default size of 2 - 1 each for heartbeat and cacheRefresh</span><br>            scheduler = Executors.newScheduledThreadPool(<span class="hljs-number">2</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactoryBuilder</span>()<br>                            .setNameFormat(<span class="hljs-string">&quot;DiscoveryClient-%d&quot;</span>)<br>                            .setDaemon(<span class="hljs-literal">true</span>)<br>                            .build());<br><br>            heartbeatExecutor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                    <span class="hljs-number">1</span>, clientConfig.getHeartbeatExecutorThreadPoolSize(), <span class="hljs-number">0</span>, TimeUnit.SECONDS,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;Runnable&gt;(),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactoryBuilder</span>()<br>                            .setNameFormat(<span class="hljs-string">&quot;DiscoveryClient-HeartbeatExecutor-%d&quot;</span>)<br>                            .setDaemon(<span class="hljs-literal">true</span>)<br>                            .build()<br>            );  <span class="hljs-comment">// use direct handoff</span><br><br>            cacheRefreshExecutor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                    <span class="hljs-number">1</span>, clientConfig.getCacheRefreshExecutorThreadPoolSize(), <span class="hljs-number">0</span>, TimeUnit.SECONDS,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;Runnable&gt;(),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactoryBuilder</span>()<br>                            .setNameFormat(<span class="hljs-string">&quot;DiscoveryClient-CacheRefreshExecutor-%d&quot;</span>)<br>                            .setDaemon(<span class="hljs-literal">true</span>)<br>                            .build()<br>            );  <span class="hljs-comment">// use direct handoff</span><br><br>            eurekaTransport = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EurekaTransport</span>();<br>            scheduleServerEndpointTask(eurekaTransport, args);<br><br><br>            AzToRegionMapper azToRegionMapper;<br>            <span class="hljs-keyword">if</span> (clientConfig.shouldUseDnsForFetchingServiceUrls()) &#123;<br>                azToRegionMapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DNSBasedAzToRegionMapper</span>(clientConfig);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                azToRegionMapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyBasedAzToRegionMapper</span>(clientConfig);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != remoteRegionsToFetch.get()) &#123;<br>                azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(<span class="hljs-string">&quot;,&quot;</span>));<br>            &#125;<br>            instanceRegionChecker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstanceRegionChecker</span>(azToRegionMapper, clientConfig.getRegion());<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Failed to initialize DiscoveryClient!&quot;</span>, e);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (clientConfig.shouldFetchRegistry() &amp;&amp; !fetchRegistry(<span class="hljs-literal">false</span>)) &#123;<br>            fetchRegistryFromBackup();<br>        &#125;<br><br>        <span class="hljs-comment">// call and execute the pre registration handler before all background tasks (inc registration) is started</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.preRegistrationHandler != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.preRegistrationHandler.beforeRegistration();<br>        &#125;<br>        initScheduledTasks();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Monitors.registerObject(<span class="hljs-built_in">this</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            logger.warn(<span class="hljs-string">&quot;Cannot register timers&quot;</span>, e);<br>        &#125;<br><br>        <span class="hljs-comment">// This is a bit of hack to allow for existing code using DiscoveryManager.getInstance()</span><br>        <span class="hljs-comment">// to work with DI&#x27;d DiscoveryClient</span><br>        DiscoveryManager.getInstance().setDiscoveryClient(<span class="hljs-built_in">this</span>);<br>        DiscoveryManager.getInstance().setEurekaClientConfig(config);<br><br>        initTimestampMs = System.currentTimeMillis();<br>        logger.info(<span class="hljs-string">&quot;Discovery Client initialized at timestamp &#123;&#125; with initial instances count: &#123;&#125;&quot;</span>,<br>                initTimestampMs, <span class="hljs-built_in">this</span>.getApplications().size());<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Initializes all scheduled tasks.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initScheduledTasks</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (clientConfig.shouldFetchRegistry()) &#123;<br>            <span class="hljs-comment">// registry cache refresh timer</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">registryFetchIntervalSeconds</span> <span class="hljs-operator">=</span> clientConfig.getRegistryFetchIntervalSeconds();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">expBackOffBound</span> <span class="hljs-operator">=</span> clientConfig.getCacheRefreshExecutorExponentialBackOffBound();<br>            scheduler.schedule(<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimedSupervisorTask</span>(<br>                            <span class="hljs-string">&quot;cacheRefresh&quot;</span>,<br>                            scheduler,<br>                            cacheRefreshExecutor,<br>                            registryFetchIntervalSeconds,<br>                            TimeUnit.SECONDS,<br>                            expBackOffBound,<br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheRefreshThread</span>()<br>                    ),<br>                    registryFetchIntervalSeconds, TimeUnit.SECONDS);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (clientConfig.shouldRegisterWithEureka()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">renewalIntervalInSecs</span> <span class="hljs-operator">=</span> instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">expBackOffBound</span> <span class="hljs-operator">=</span> clientConfig.getHeartbeatExecutorExponentialBackOffBound();<br>            logger.info(<span class="hljs-string">&quot;Starting heartbeat executor: &quot;</span> + <span class="hljs-string">&quot;renew interval is: &quot;</span> + renewalIntervalInSecs);<br><br>            <span class="hljs-comment">// Heartbeat timer</span><br>            scheduler.schedule(<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimedSupervisorTask</span>(<br>                            <span class="hljs-string">&quot;heartbeat&quot;</span>,<br>                            scheduler,<br>                            heartbeatExecutor,<br>                            renewalIntervalInSecs,<br>                            TimeUnit.SECONDS,<br>                            expBackOffBound,<br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeartbeatThread</span>()<br>                    ),<br>                    renewalIntervalInSecs, TimeUnit.SECONDS);<br><br>            <span class="hljs-comment">// InstanceInfo replicator</span><br>            instanceInfoReplicator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstanceInfoReplicator</span>(<br>                    <span class="hljs-built_in">this</span>,<br>                    instanceInfo,<br>                    clientConfig.getInstanceInfoReplicationIntervalSeconds(),<br>                    <span class="hljs-number">2</span>); <span class="hljs-comment">// burstSize</span><br><br>            statusChangeListener = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationInfoManager</span>.StatusChangeListener() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;statusChangeListener&quot;</span>;<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">(StatusChangeEvent statusChangeEvent)</span> &#123;<br>                    <span class="hljs-keyword">if</span> (InstanceStatus.DOWN == statusChangeEvent.getStatus() ||<br>                            InstanceStatus.DOWN == statusChangeEvent.getPreviousStatus()) &#123;<br>                        <span class="hljs-comment">// log at warn level if DOWN was involved</span><br>                        logger.warn(<span class="hljs-string">&quot;Saw local status change event &#123;&#125;&quot;</span>, statusChangeEvent);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        logger.info(<span class="hljs-string">&quot;Saw local status change event &#123;&#125;&quot;</span>, statusChangeEvent);<br>                    &#125;<br>                    instanceInfoReplicator.onDemandUpdate();<br>                &#125;<br>            &#125;;<br><br>            <span class="hljs-keyword">if</span> (clientConfig.shouldOnDemandUpdateStatusChange()) &#123;<br>                applicationInfoManager.registerStatusChangeListener(statusChangeListener);<br>            &#125;<br><br>            instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            logger.info(<span class="hljs-string">&quot;Not registering with Eureka server per configuration&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>初始化eureka-client步骤</p><ol><li>读取EurekaClientConfig,包括TransportConfig</li><li>保存EurekaInstanceConfig和InstanceInfo</li><li>处理是否需要注册以及抓取注册表，如果不需要的话释放一些资源</li><li>支持调度的线程池</li><li>支持心跳的线程池</li><li>支持缓存刷新的线程池</li><li>EurekaTransport，支持底层eureka client和eureka server进行网络通信的组件，对网络通信组件进行了一些初始化的操作</li><li>如果配置了抓取注册表的话，就回去抓取注册表</li><li>初始化调度任务<ol><li>如果要抓取注册表，就注册一个定时任务，按照你设定的抓取间隔，每隔一段时间(默认30s)去执行一个CacheRefreshThread，给放在调度线程池里</li><li>如果要向eureka server进行注册的话，会创建一个定时任务，每隔一段时间发送心跳，执行一个HeartbeatThread</li><li>创建了服务实例副本转播器，将自己作为一个定时任务进行调度</li><li>创建服务实例的状态变更监听器，如果配置了监听，就会注册监听器</li></ol></li></ol><h2 id="4-处理注册相关事情"><a href="#4-处理注册相关事情" class="headerlink" title="4.处理注册相关事情"></a>4.处理注册相关事情</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">PeerAwareInstanceRegistry registry;<br>        <span class="hljs-keyword">if</span> (isAws(applicationInfoManager.getInfo())) &#123;<br>            registry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AwsInstanceRegistry</span>(<br>                    eurekaServerConfig,<br>                    eurekaClient.getEurekaClientConfig(),<br>                    serverCodecs,<br>                    eurekaClient<br>            );<br>            awsBinder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AwsBinderDelegate</span>(eurekaServerConfig, eurekaClient.getEurekaClientConfig(), registry, applicationInfoManager);<br>            awsBinder.start();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            registry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PeerAwareInstanceRegistryImpl</span>(<br>                    eurekaServerConfig,<br>                    eurekaClient.getEurekaClientConfig(),<br>                    serverCodecs,<br>                    eurekaClient<br>            );<br>        &#125;<br></code></pre></td></tr></table></figure><p>构造了一个PeerAwareInstanceRegistry。从语义上来看，推测这个是可以感知eureka server集群的服务实例注册表。eureka client作为服务实例过来注册的注册表，且这个注册表可以感知eureka server集群。</p><h2 id="5-处理peer节点相关事情"><a href="#5-处理peer节点相关事情" class="headerlink" title="5.处理peer节点相关事情"></a>5.处理peer节点相关事情</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PeerEurekaNodes</span> <span class="hljs-variable">peerEurekaNodes</span> <span class="hljs-operator">=</span> getPeerEurekaNodes(<br>                registry,<br>                eurekaServerConfig,<br>                eurekaClient.getEurekaClientConfig(),<br>                serverCodecs,<br>                applicationInfoManager<br>        );<br></code></pre></td></tr></table></figure><p>peerEurekaNodes代表了eureka server集群</p><h2 id="6-完成eureka-server上下文content构建和初始化"><a href="#6-完成eureka-server上下文content构建和初始化" class="headerlink" title="6.完成eureka-server上下文content构建和初始化"></a>6.完成eureka-server上下文content构建和初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">serverContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEurekaServerContext</span>(<br>                eurekaServerConfig,<br>                serverCodecs,<br>                registry,<br>                peerEurekaNodes,<br>                applicationInfoManager<br>        );<br><br>EurekaServerContextHolder.initialize(serverContext);<br><br>serverContext.initialize();<br><br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    logger.info(<span class="hljs-string">&quot;Initializing ...&quot;</span>);<br>    peerEurekaNodes.start();<br>    registry.init(peerEurekaNodes);<br>    logger.info(<span class="hljs-string">&quot;Initialized&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>将上面初始化的组件全部放在EurekaServerContext中，当做eureka-server上下文</li><li>将上下文放在EurekaServerContextHolder中间，后续的上下文可以在EurekaServerContextHolder中间获取。</li><li>将eureka server集群启动起来</li><li>基于集群信息初始化注册表</li></ol><h2 id="7-从相邻的eureka节点拷贝注册信息"><a href="#7-从相邻的eureka节点拷贝注册信息" class="headerlink" title="7.从相邻的eureka节点拷贝注册信息"></a>7.从相邻的eureka节点拷贝注册信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Copy registry from neighboring eureka node</span><br><span class="hljs-type">int</span> <span class="hljs-variable">registryCount</span> <span class="hljs-operator">=</span> registry.syncUp();<br><span class="hljs-comment">//打开注册表，接收请求</span><br>registry.openForTraffic(applicationInfoManager, registryCount);<br></code></pre></td></tr></table></figure><p>从相邻的一个eureka server节点拷贝注册表的信息，如果拷贝失败，就找下一个</p><h2 id="8-注册所有监控统计项"><a href="#8-注册所有监控统计项" class="headerlink" title="8.注册所有监控统计项"></a>8.注册所有监控统计项</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Register all monitoring statistics.</span><br>EurekaMonitors.registerAllStats();<br></code></pre></td></tr></table></figure><p>跟eureka自身的监控机制相关联的</p><h1 id="四、eureka-server启动流程图"><a href="#四、eureka-server启动流程图" class="headerlink" title="四、eureka server启动流程图"></a>四、eureka server启动流程图</h1><p><a href="https://www.processon.com/view/link/616859970e3e746edcae54ea">点击查看【processon】</a></p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eureka环境搭建与目录</title>
    <link href="/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%9B%AE%E5%BD%95/"/>
    <url>/2022/05/07/%E6%BA%90%E7%A0%81/eureka/eureka%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><blockquote><p>基于eureka1.7.2版本</p></blockquote><ol><li><p>github下载eureka，切到v1.7.2tag</p></li><li><p>搭建gradle环境，v1.7.2版本使用2.1版本</p></li><li><p>win运行gradlew.bat下载依赖</p></li><li><p>导入IDE</p><h1 id="eureka调试环境"><a href="#eureka调试环境" class="headerlink" title="eureka调试环境"></a>eureka调试环境</h1></li><li><p>启动eureka-server测试代码</p></li></ol><p>在eureka-server找到测试代码<br>com.netflix.eureka.resources.eurekaClientServerRestIntegrationTest.setUp()</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startServer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">/* File warFile = findWar();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    server = new Server(8080);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    WebAppContext webapp = new WebAppContext();</span><br><span class="hljs-comment">    webapp.setContextPath(&quot;/&quot;);</span><br><span class="hljs-comment">    webapp.setWar(warFile.getAbsolutePath());</span><br><span class="hljs-comment">    server.setHandler(webapp);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    server.start();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    eurekaServiceUrl = &quot;http://localhost:8080/v2&quot;;*/</span><br><br>    <span class="hljs-type">WebAppContext</span> <span class="hljs-variable">webAppCtx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAppContext</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./eureka-server/src/main/webapp&quot;</span>).getAbsolutePath(), <span class="hljs-string">&quot;/&quot;</span>);<br>    webAppCtx.setDescriptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./eureka-server/src/main/webapp/WEB-INF/web.xml&quot;</span>).getAbsolutePath());<br>    webAppCtx.setResourceBase(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./eureka-server/src/main/resources&quot;</span>).getAbsolutePath());<br>    webAppCtx.setClassLoader(Thread.currentThread().getContextClassLoader());<br>    server.setHandler(webAppCtx);<br>    server.start();<br><br>    eurekaServiceUrl = <span class="hljs-string">&quot;http://localhost:8080/v2&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>启动eureka-client测试代码</li></ol><p>在eureka-examples中com.netflix.eureka.ExampleeurekaClient.injecteurekaConfiguration()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This will be read by server internal discovery client. We need to salience it.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">injectEurekaConfiguration</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">myHostName</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost().getHostName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">myServiceUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://&quot;</span> + myHostName + <span class="hljs-string">&quot;:8080/v2/&quot;</span>;<br><br>    System.setProperty(<span class="hljs-string">&quot;eureka.region&quot;</span>, <span class="hljs-string">&quot;default&quot;</span>);<br>    System.setProperty(<span class="hljs-string">&quot;eureka.name&quot;</span>, <span class="hljs-string">&quot;eureka&quot;</span>);<br>    System.setProperty(<span class="hljs-string">&quot;eureka.vipAddress&quot;</span>, <span class="hljs-string">&quot;eureka.mydomain.net&quot;</span>);<br>    System.setProperty(<span class="hljs-string">&quot;eureka.port&quot;</span>, <span class="hljs-string">&quot;8080&quot;</span>);<br>    System.setProperty(<span class="hljs-string">&quot;eureka.preferSameZone&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>    System.setProperty(<span class="hljs-string">&quot;eureka.shouldUseDns&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>    System.setProperty(<span class="hljs-string">&quot;eureka.shouldFetchRegistry&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>    System.setProperty(<span class="hljs-string">&quot;eureka.serviceUrl.defaultZone&quot;</span>, myServiceUrl);<br>    System.setProperty(<span class="hljs-string">&quot;eureka.serviceUrl.default.defaultZone&quot;</span>, myServiceUrl);<br>    System.setProperty(<span class="hljs-string">&quot;eureka.awsAccessId&quot;</span>, <span class="hljs-string">&quot;fake_aws_access_id&quot;</span>);<br>    System.setProperty(<span class="hljs-string">&quot;eureka.awsSecretKey&quot;</span>, <span class="hljs-string">&quot;fake_aws_secret_key&quot;</span>);<br>    System.setProperty(<span class="hljs-string">&quot;eureka.numberRegistrySyncRetries&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="eureka目录"><a href="#eureka目录" class="headerlink" title="eureka目录"></a>eureka目录</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12966419/1633967396879-0f5dba15-ca07-4a0e-9dde-67988862d27b.png#clientId=ubdb1263c-1999-4&from=ui&height=580&id=Lfvsu&margin=%5Bobject%20Object%5D&name=1149210966.png&originHeight=663&originWidth=392&originalType=binary&ratio=1&size=31125&status=done&style=none&taskId=u48d273e9-5c52-4a51-87b8-d35a62e7e4b&width=343" alt="1149210966.png"></p><ul><li>eureka-client<br>eureka的客户端，注册到eureka上面去的一个服务，就是一个eureka client，无论是你要注册，还是要发现别的服务，无论是服务提供者还是服务消费者，都是一个eureka客户端。</li><li>eureka-core<br>eureka的服务端，其实就是eureka的注册中心</li><li>eureka-resources<br>基于jsp开发的eureka控制台，web页面，上面你可以看到各种注册服务</li><li>eureka-server<br>eureka-client、eureka-core、eureka-resources打包成了一个war包，也就是说eureka-server自己本身也是一个eureka-client，同时也是注册中心，同时也提供eureka控制台。真正的使用的注册中心</li><li>eureka-examples<br>eureka使用的例子</li><li>eureka-test-utils<br>eureka的单元测试工具类</li></ul><h1 id="web-xml解读"><a href="#web-xml解读" class="headerlink" title="web.xml解读"></a>web.xml解读</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.netflix.eureka.EurekaBootStrap<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>statusFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.netflix.eureka.StatusFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>requestAuthFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.netflix.eureka.ServerRequestAuthFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>rateLimitingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.netflix.eureka.RateLimitingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>gzipEncodingEnforcingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.netflix.eureka.GzipEncodingEnforcingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>jersey<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.sun.jersey.spi.container.servlet.ServletContainer<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>com.sun.jersey.config.property.WebPageContentRegex<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>/(flex|images|js|css|jsp)/.*<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>com.sun.jersey.config.property.packages<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>com.sun.jersey;com.netflix<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- GZIP content encoding/decoding --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>com.sun.jersey.spi.container.ContainerRequestFilters<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>com.sun.jersey.api.container.filter.GZIPContentEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>com.sun.jersey.spi.container.ContainerResponseFilters<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>com.sun.jersey.api.container.filter.GZIPContentEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>statusFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>requestAuthFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- Uncomment this to enable rate limiter filter.</span><br><span class="hljs-comment">  &lt;filter-mapping&gt;</span><br><span class="hljs-comment">    &lt;filter-name&gt;rateLimitingFilter&lt;/filter-name&gt;</span><br><span class="hljs-comment">    &lt;url-pattern&gt;/v2/apps&lt;/url-pattern&gt;</span><br><span class="hljs-comment">    &lt;url-pattern&gt;/v2/apps/*&lt;/url-pattern&gt;</span><br><span class="hljs-comment">  &lt;/filter-mapping&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>gzipEncodingEnforcingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/v2/apps<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/v2/apps/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>jersey<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>jsp/status.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>listener : com.netflix.eureka.eurekaBootStrap<br>listener一般用于初始化</li><li>filter : statusFilter<br>负责状态相关的处理逻辑</li><li>filter : requestAuthFilter<br>对请求进行授权认证的处理的</li><li>filter : rateLimitingFilter<br>负责限流相关的逻辑的</li><li>filter : gzipEncodingEnforcingFilter<br>gzip，压缩相关的；encoding，编码相关的</li><li>filter : jersey<br>jersey框架的一个ServletContainer的一个filter</li></ol><p>statusFilter和requestAuthFilter为通用处理逻辑，对所有请求开放<br>rateLimitingFilter默认关闭，按需要自行开启<br>GzipEncodingEnforcingFilter，对&#x2F;v2&#x2F;apps相关请求生效</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>行为型设计模式</title>
    <link href="/2022/05/06/%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/06/%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h1><p>行为型设计模式主要解决的就是“类或对象之间的交互”问题。<br>创建型模式是将创建和使用代码解耦，结构型模式是将不同功能代码解耦，行为型模式是将不同的行为代码解耦，具体到观察者模式，它是将观察者和被观察者代码解耦。</p><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-Subscribe Design Pattern）。<br>在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知。<br>被依赖的对象叫作被观察者（Observable），依赖的对象叫作观察者（Observer）。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>同步阻塞</li><li>异步非阻塞<figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObserverDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">Observer</span> <span class="hljs-variable">observer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserver</span>();<br>        subject.addObserver(observer);<br><br>        subject.setState(<span class="hljs-number">1</span>);<br>        subject.setState(<span class="hljs-number">2</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Observable</span> &#123;<br>        <span class="hljs-keyword">private</span> Integer state;<br><br>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> state;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(Integer state)</span> &#123;<br>            <span class="hljs-built_in">this</span>.state = state;<br>            <span class="hljs-built_in">this</span>.setChanged();<br><span class="hljs-comment">//            this.notifyObservers(state);</span><br>            <span class="hljs-built_in">this</span>.notifyObservers();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Observable o, Object arg)</span> &#123;<br><span class="hljs-comment">//            Integer state = (Integer)arg;</span><br>            <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> (Subject)o;<br>            System.out.println(<span class="hljs-string">&quot;state:&quot;</span>+subject.getState());<br><br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h1>模板方法模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。模板方法模式可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤。<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractClass</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">templateMethod</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//...</span><br>    method1();<br>    <span class="hljs-comment">//...</span><br>    method2();<br>    <span class="hljs-comment">//...</span><br>  &#125;<br>  <br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteClass1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractClass</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//...</span><br>  &#125;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteClass2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractClass</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//...</span><br>  &#125;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-type">AbstractClass</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> ConcreteClass1();<br>demo.templateMethod();<br></code></pre></td></tr></table></figure></li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><p>模板模式把一个算法中不变的流程抽象到父类的模板方法 templateMethod() 中，将可变的部分 method1()、method2() 留给子类 ContreteClass1 和 ContreteClass2 来实现。所有的子类都可以复用父类中模板方法定义的流程代码。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>模板模式常用在框架的开发中，让框架用户可以在不修改框架源码的情况下，定制化框架的功能。</p><h3 id="模板模式与回调区别"><a href="#模板模式与回调区别" class="headerlink" title="模板模式与回调区别"></a>模板模式与回调区别</h3><p>回调基于组合关系来实现，把一个对象传递给另一个对象，是一种对象之间的关系；模板模式基于继承关系来实现，子类重写父类的抽象方法，是一种类之间的关系。</p><p>回调相对于模板模式会更加灵活，主要体现在下面几点。</p><ul><li>像 Java 这种只支持单继承的语言，基于模板模式编写的子类，已经继承了一个父类，不再具有继承的能力。</li><li>回调可以使用匿名类来创建回调对象，可以不用事先定义类；而模板模式针对不同的实现都要定义不同的子类。</li><li>如果某个类中定义了多个模板方法，每个方法都有对应的抽象方法，那即便我们只用到其中的一个模板方法，子类也必须实现所有的抽象方法。而回调就更加灵活，我们只需要往用到的模板方法中注入回调对象即可。<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1>策略的定义、创建、使用这三部分，利用它来避免冗长的 if-else 或 switch 分支判断。<br>策略模式主要的作用还是解耦策略的定义、创建和使用，控制代码的复杂度，让每个部分都不至于过于复杂、代码量过多。除此之外，对于复杂代码来说，策略模式还能让其满足开闭原则，添加新策略的时候，最小化、集中化代码改动，减少引入 bug 的风险。<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="策略的定义"><a href="#策略的定义" class="headerlink" title="策略的定义"></a>策略的定义</h3>策略类的定义比较简单，包含一个策略接口和一组实现这个接口的策略类。因为所有的策略类都实现相同的接口，所以，客户端代码基于接口而非实现编程，可以灵活地替换不同的策略。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Strategy</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">algorithmInterface</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStrategyA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">algorithmInterface</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//具体的算法...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStrategyB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">algorithmInterface</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//具体的算法...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="策略的创建"><a href="#策略的创建" class="headerlink" title="策略的创建"></a>策略的创建</h3>因为策略模式会包含一组策略，在使用它们的时候，一般会通过类型（type）来判断创建哪个策略来使用。为了封装创建逻辑，我们需要对客户端代码屏蔽创建细节。我们可以把根据 type 创建策略的逻辑抽离出来，放到工厂类中。</li></ul><p>如果策略类是无状态的，不包含成员变量，只是纯粹的算法实现，这样的策略对象是可以被共享使用的，不需要在每次调用 getStrategy() 的时候，都创建一个新的策略对象。针对这种情况，我们可以使用上面这种工厂类的实现方式，事先创建好每个策略对象，缓存到工厂类中，用的时候直接返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StrategyFactory</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Strategy&gt; strategies = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>  <span class="hljs-keyword">static</span> &#123;<br>    strategies.put(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStrategyA</span>());<br>    strategies.put(<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStrategyB</span>());<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Strategy <span class="hljs-title function_">getStrategy</span><span class="hljs-params">(String type)</span> &#123;<br>    <span class="hljs-keyword">if</span> (type == <span class="hljs-literal">null</span> || type.isEmpty()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;type should not be empty.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> strategies.get(type);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果策略类是有状态的，根据业务场景的需要，我们希望每次从工厂方法中，获得的都是新创建的策略对象，而不是缓存好可共享的策略对象，那我们就需要按照如下方式来实现策略工厂类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StrategyFactory</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Strategy <span class="hljs-title function_">getStrategy</span><span class="hljs-params">(String type)</span> &#123;<br>    <span class="hljs-keyword">if</span> (type == <span class="hljs-literal">null</span> || type.isEmpty()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;type should not be empty.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;A&quot;</span>)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStrategyA</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;B&quot;</span>)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStrategyB</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="策略的使用"><a href="#策略的使用" class="headerlink" title="策略的使用"></a>策略的使用</h3><p>运行时动态确定使用哪种策略，这也是策略模式最典型的应用场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 策略接口：EvictionStrategy</span><br><span class="hljs-comment">// 策略类：LruEvictionStrategy、FifoEvictionStrategy、LfuEvictionStrategy...</span><br><span class="hljs-comment">// 策略工厂：EvictionStrategyFactory</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserCache</span> &#123;<br>  <span class="hljs-keyword">private</span> Map&lt;String, User&gt; cacheData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>  <span class="hljs-keyword">private</span> EvictionStrategy eviction;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserCache</span><span class="hljs-params">(EvictionStrategy eviction)</span> &#123;<br>    <span class="hljs-built_in">this</span>.eviction = eviction;<br>  &#125;<br><br>  <span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-comment">// 运行时动态确定，根据配置文件的配置决定使用哪种策略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">EvictionStrategy</span> <span class="hljs-variable">evictionStrategy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    props.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./config.properties&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> props.getProperty(<span class="hljs-string">&quot;eviction_type&quot;</span>);<br>    evictionStrategy = EvictionStrategyFactory.getEvictionStrategy(type);<br>    <span class="hljs-type">UserCache</span> <span class="hljs-variable">userCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserCache</span>(evictionStrategy);<br>    <span class="hljs-comment">//...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 非运行时动态确定，在代码中指定使用哪种策略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-type">EvictionStrategy</span> <span class="hljs-variable">evictionStrategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LruEvictionStrategy</span>();<br>    <span class="hljs-type">UserCache</span> <span class="hljs-variable">userCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserCache</span>(evictionStrategy);<br>    <span class="hljs-comment">//...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h1><p>将请求的发送和接收解耦，让多个接收对象都有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。<br>在职责链模式中，多个处理器（也就是刚刚定义中说的“接收对象”）依次处理同一个请求。一个请求先经过 A 处理器处理，然后再把请求传递给 B 处理器，B 处理器处理完后再传递给 C 处理器，以此类推，形成一个链条。链条上的每个处理器各自承担各自的处理职责，所以叫作职责链模式。</p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>其中，Handler 是所有处理器类的抽象父类，handle() 是抽象方法。每个具体的处理器类（HandlerA、HandlerB）的 handle() 函数的代码结构类似，如果它能处理该请求，就不继续往下传递；如果不能处理，则交由后面的处理器来处理（也就是调用 successor.handle()）。HandlerChain 是处理器链，从数据结构的角度来看，它就是一个记录了链头、链尾的链表。其中，记录链尾是为了方便添加处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span> &#123;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">Handler</span> <span class="hljs-variable">successor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccessor</span><span class="hljs-params">(Handler successor)</span> &#123;<br>    <span class="hljs-built_in">this</span>.successor = successor;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">handled</span> <span class="hljs-operator">=</span> doHandle();<br>    <span class="hljs-keyword">if</span> (successor != <span class="hljs-literal">null</span> &amp;&amp; !handled) &#123;<br>      successor.handle();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doHandle</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doHandle</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">handled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-keyword">return</span> handled;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doHandle</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">handled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-keyword">return</span> handled;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerChain</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">Handler</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">Handler</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHandler</span><span class="hljs-params">(Handler handler)</span> &#123;<br>    handler.setSuccessor(<span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>      head = handler;<br>      tail = handler;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    tail.setSuccessor(handler);<br>    tail = handler;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (head != <span class="hljs-literal">null</span>) &#123;<br>      head.handle();<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用举例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">HandlerChain</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerChain</span>();<br>    chain.addHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerA</span>());<br>    chain.addHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerB</span>());<br>    chain.handle();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>HandlerChain 类用数组而非链表来保存所有的处理器，并且需要在 HandlerChain 的 handle() 函数中，依次调用每个处理器的 handle() 函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IHandler</span> &#123;<br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">handle</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IHandler</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handle</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">handled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-keyword">return</span> handled;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IHandler</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handle</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">handled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-keyword">return</span> handled;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerChain</span> &#123;<br>  <span class="hljs-keyword">private</span> List&lt;IHandler&gt; handlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHandler</span><span class="hljs-params">(IHandler handler)</span> &#123;<br>    <span class="hljs-built_in">this</span>.handlers.add(handler);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (IHandler handler : handlers) &#123;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">handled</span> <span class="hljs-operator">=</span> handler.handle();<br>      <span class="hljs-keyword">if</span> (handled) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用举例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">HandlerChain</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerChain</span>();<br>    chain.addHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerA</span>());<br>    chain.addHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerB</span>());<br>    chain.handle();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><p>状态模式是状态机的一种实现方式即可。状态机又叫有限状态机，它有 3 个部分组成：状态、事件、动作。其中，事件也称为转移条件。事件触发状态的转移及动作的执行。不过，动作不是必须的，也可能只转移状态，不执行任何动作。</p><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><h3 id="方式一：分支逻辑发"><a href="#方式一：分支逻辑发" class="headerlink" title="方式一：分支逻辑发"></a>方式一：分支逻辑发</h3><p>参照状态转移图，将每一个状态转移，原模原样地直译成代码。这样编写的代码会包含大量的 if-else 或 switch-case 分支判断逻辑，甚至是嵌套的分支判断逻辑，所以，我把这种方法暂且命名为分支逻辑法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MarioStateMachine</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> score;<br>  <span class="hljs-keyword">private</span> State currentState;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MarioStateMachine</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.score = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.currentState = State.SMALL;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainMushRoom</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (currentState.equals(State.SMALL)) &#123;<br>      <span class="hljs-built_in">this</span>.currentState = State.SUPER;<br>      <span class="hljs-built_in">this</span>.score += <span class="hljs-number">100</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainCape</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (currentState.equals(State.SMALL) || currentState.equals(State.SUPER) ) &#123;<br>      <span class="hljs-built_in">this</span>.currentState = State.CAPE;<br>      <span class="hljs-built_in">this</span>.score += <span class="hljs-number">200</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainFireFlower</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (currentState.equals(State.SMALL) || currentState.equals(State.SUPER) ) &#123;<br>      <span class="hljs-built_in">this</span>.currentState = State.FIRE;<br>      <span class="hljs-built_in">this</span>.score += <span class="hljs-number">300</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">meetMonster</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (currentState.equals(State.SUPER)) &#123;<br>      <span class="hljs-built_in">this</span>.currentState = State.SMALL;<br>      <span class="hljs-built_in">this</span>.score -= <span class="hljs-number">100</span>;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (currentState.equals(State.CAPE)) &#123;<br>      <span class="hljs-built_in">this</span>.currentState = State.SMALL;<br>      <span class="hljs-built_in">this</span>.score -= <span class="hljs-number">200</span>;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (currentState.equals(State.FIRE)) &#123;<br>      <span class="hljs-built_in">this</span>.currentState = State.SMALL;<br>      <span class="hljs-built_in">this</span>.score -= <span class="hljs-number">300</span>;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.score;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.currentState;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于简单的状态机来说，分支逻辑这种实现方式是可以接受的。但是，对于复杂的状态机来说，这种实现方式极易漏写或者错写某个状态转移。除此之外，代码中充斥着大量的 if-else 或者 switch-case 分支判断逻辑，可读性和可维护性都很差。</p><h3 id="方式二：查表法"><a href="#方式二：查表法" class="headerlink" title="方式二：查表法"></a>方式二：查表法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Event</span> &#123;<br>  GOT_MUSHROOM(<span class="hljs-number">0</span>),<br>  GOT_CAPE(<span class="hljs-number">1</span>),<br>  GOT_FIRE(<span class="hljs-number">2</span>),<br>  MET_MONSTER(<span class="hljs-number">3</span>);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">Event</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-built_in">this</span>.value = value;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MarioStateMachine</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> score;<br>  <span class="hljs-keyword">private</span> State currentState;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> State[][] transitionTable = &#123;<br>          &#123;SUPER, CAPE, FIRE, SMALL&#125;,<br>          &#123;SUPER, CAPE, FIRE, SMALL&#125;,<br>          &#123;CAPE, CAPE, CAPE, SMALL&#125;,<br>          &#123;FIRE, FIRE, FIRE, SMALL&#125;<br>  &#125;;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[][] actionTable = &#123;<br>          &#123;+<span class="hljs-number">100</span>, +<span class="hljs-number">200</span>, +<span class="hljs-number">300</span>, +<span class="hljs-number">0</span>&#125;,<br>          &#123;+<span class="hljs-number">0</span>, +<span class="hljs-number">200</span>, +<span class="hljs-number">300</span>, -<span class="hljs-number">100</span>&#125;,<br>          &#123;+<span class="hljs-number">0</span>, +<span class="hljs-number">0</span>, +<span class="hljs-number">0</span>, -<span class="hljs-number">200</span>&#125;,<br>          &#123;+<span class="hljs-number">0</span>, +<span class="hljs-number">0</span>, +<span class="hljs-number">0</span>, -<span class="hljs-number">300</span>&#125;<br>  &#125;;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MarioStateMachine</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.score = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.currentState = State.SMALL;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainMushRoom</span><span class="hljs-params">()</span> &#123;<br>    executeEvent(Event.GOT_MUSHROOM);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainCape</span><span class="hljs-params">()</span> &#123;<br>    executeEvent(Event.GOT_CAPE);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainFireFlower</span><span class="hljs-params">()</span> &#123;<br>    executeEvent(Event.GOT_FIRE);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">meetMonster</span><span class="hljs-params">()</span> &#123;<br>    executeEvent(Event.MET_MONSTER);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeEvent</span><span class="hljs-params">(Event event)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">stateValue</span> <span class="hljs-operator">=</span> currentState.getValue();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">eventValue</span> <span class="hljs-operator">=</span> event.getValue();<br>    <span class="hljs-built_in">this</span>.currentState = transitionTable[stateValue][eventValue];<br>    <span class="hljs-built_in">this</span>.score += actionTable[stateValue][eventValue];<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.score;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.currentState;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方式三：状态模式"><a href="#方式三：状态模式" class="headerlink" title="方式三：状态模式"></a>方式三：状态模式</h3><p>状态模式通过将事件触发的状态转移和动作执行，拆分到不同的状态类中，来避免分支判断逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMario</span> &#123;<br>  State <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainMushRoom</span><span class="hljs-params">(MarioStateMachine stateMachine)</span>;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainCape</span><span class="hljs-params">(MarioStateMachine stateMachine)</span>;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainFireFlower</span><span class="hljs-params">(MarioStateMachine stateMachine)</span>;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">meetMonster</span><span class="hljs-params">(MarioStateMachine stateMachine)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmallMario</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMario</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SmallMario</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmallMario</span>();<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">SmallMario</span><span class="hljs-params">()</span> &#123;&#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SmallMario <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> instance;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> State.SMALL;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainMushRoom</span><span class="hljs-params">(MarioStateMachine stateMachine)</span> &#123;<br>    stateMachine.setCurrentState(SuperMario.getInstance());<br>    stateMachine.setScore(stateMachine.getScore() + <span class="hljs-number">100</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainCape</span><span class="hljs-params">(MarioStateMachine stateMachine)</span> &#123;<br>    stateMachine.setCurrentState(CapeMario.getInstance());<br>    stateMachine.setScore(stateMachine.getScore() + <span class="hljs-number">200</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainFireFlower</span><span class="hljs-params">(MarioStateMachine stateMachine)</span> &#123;<br>    stateMachine.setCurrentState(FireMario.getInstance());<br>    stateMachine.setScore(stateMachine.getScore() + <span class="hljs-number">300</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">meetMonster</span><span class="hljs-params">(MarioStateMachine stateMachine)</span> &#123;<br>    <span class="hljs-comment">// do nothing...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 省略SuperMario、CapeMario、FireMario类...</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MarioStateMachine</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> score;<br>  <span class="hljs-keyword">private</span> IMario currentState;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MarioStateMachine</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.score = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.currentState = SmallMario.getInstance();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainMushRoom</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.currentState.obtainMushRoom(<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainCape</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.currentState.obtainCape(<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">obtainFireFlower</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.currentState.obtainFireFlower(<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">meetMonster</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.currentState.meetMonster(<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.score;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.currentState.getName();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">int</span> score)</span> &#123;<br>    <span class="hljs-built_in">this</span>.score = score;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCurrentState</span><span class="hljs-params">(IMario currentState)</span> &#123;<br>    <span class="hljs-built_in">this</span>.currentState = currentState;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><p>迭代器模式（Iterator Design Pattern），也叫作游标模式（Cursor Design Pattern）。<br>迭代器模式将集合对象的遍历操作从集合类中拆分出来，放到迭代器类中，让两者的职责更加单一。</p><p>迭代器模式优点</p><ul><li>迭代器模式封装集合内部的复杂数据结构，开发者不需要了解如何遍历，直接使用容器提供的迭代器即可；</li><li>迭代器模式将集合对象的遍历操作从集合类中拆分出来，放到迭代器类中，让两者的职责更加单一；</li><li>迭代器模式让添加新的遍历算法更加容易，更符合开闭原则。除此之外，因为迭代器都实现自相同的接口，在开发中，基于接口而非实现编程，替换迭代器也变得更加容易。</li></ul><h1 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h1><p>允许一个或者多个操作应用到一组对象上，解耦操作和对象本身。</p><p>访问者模式针对的是一组类型不同的对象（PdfFile、PPTFile、WordFile）。不过，尽管这组对象的类型是不同的，但是，它们继承相同的父类（ResourceFile）或者实现相同的接口。在不同的应用场景下，我们需要对这组对象进行一系列不相关的业务操作（抽取文本、压缩等），但为了避免不断添加功能导致类（PdfFile、PPTFile、WordFile）不断膨胀，职责越来越不单一，以及避免频繁地添加功能导致的频繁代码修改，我们使用访问者模式，将对象与操作解耦，将这些业务操作抽离出来，定义在独立细分的访问者类（Extractor、Compressor）中。</p><h1 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h1><p>在不违背封装原则的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便之后恢复对象为先前的状态。<br>备忘录模式也叫快照模式，具体来说，就是在不违背封装原则的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便之后恢复对象为先前的状态。这个模式的定义表达了两部分内容：一部分是，存储副本以便后期恢复；另一部分是，要在不违背封装原则的前提下，进行对象的备份和恢复。</p><h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputText</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getText</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> text.toString();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">append</span><span class="hljs-params">(String input)</span> &#123;<br>    text.append(input);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Snapshot <span class="hljs-title function_">createSnapshot</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Snapshot</span>(text.toString());<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">restoreSnapshot</span><span class="hljs-params">(Snapshot snapshot)</span> &#123;<br>    <span class="hljs-built_in">this</span>.text.replace(<span class="hljs-number">0</span>, <span class="hljs-built_in">this</span>.text.length(), snapshot.getText());<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Snapshot</span> &#123;<br>  <span class="hljs-keyword">private</span> String text;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Snapshot</span><span class="hljs-params">(String text)</span> &#123;<br>    <span class="hljs-built_in">this</span>.text = text;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getText</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.text;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SnapshotHolder</span> &#123;<br>  <span class="hljs-keyword">private</span> Stack&lt;Snapshot&gt; snapshots = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br><br>  <span class="hljs-keyword">public</span> Snapshot <span class="hljs-title function_">popSnapshot</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> snapshots.pop();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushSnapshot</span><span class="hljs-params">(Snapshot snapshot)</span> &#123;<br>    snapshots.push(snapshot);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationMain</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">InputText</span> <span class="hljs-variable">inputText</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputText</span>();<br>    <span class="hljs-type">SnapshotHolder</span> <span class="hljs-variable">snapshotsHolder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SnapshotHolder</span>();<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-keyword">while</span> (scanner.hasNext()) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> scanner.next();<br>      <span class="hljs-keyword">if</span> (input.equals(<span class="hljs-string">&quot;:list&quot;</span>)) &#123;<br>        System.out.println(inputText.toString());<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (input.equals(<span class="hljs-string">&quot;:undo&quot;</span>)) &#123;<br>        <span class="hljs-type">Snapshot</span> <span class="hljs-variable">snapshot</span> <span class="hljs-operator">=</span> snapshotsHolder.popSnapshot();<br>        inputText.restoreSnapshot(snapshot);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        snapshotsHolder.pushSnapshot(inputText.createSnapshot());<br>        inputText.append(input);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h2><p>备忘录模式更侧重于代码的设计和实现，备份更侧重架构设计或产品设计。<br>针对这个问题，不同的业务场景有不同的处理方式。比如，只备份必要的恢复信息，结合最新的数据来恢复；再比如，全量备份和增量备份相结合，低频全量备份，高频增量备份，两者结合来做恢复。</p><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><p>命令模式将请求（命令）封装为一个对象，这样可以使用不同的请求参数化其他对象（将不同请求依赖注入到其他对象），并且能够支持请求（命令）的排队执行、记录日志、撤销等（附加控制）功能。<br>命令模式的主要作用和应用场景，是用来控制命令的执行，比如，异步、延迟、排队执行命令、撤销重做命令、存储命令、给命令记录日志等等</p><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Command</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GotDiamondCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br>  <span class="hljs-comment">// 省略成员变量</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">GotDiamondCommand</span><span class="hljs-params">(<span class="hljs-comment">/*数据*/</span>)</span> &#123;<br>    <span class="hljs-comment">//...</span><br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 执行相应的逻辑</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">//GotStartCommand/HitObstacleCommand/ArchiveCommand类省略</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameApplication</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_HANDLED_REQ_COUNT_PER_LOOP</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>  <span class="hljs-keyword">private</span> Queue&lt;Command&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mainloop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      List&lt;Request&gt; requests = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <br>      <span class="hljs-comment">//省略从epoll或者select中获取数据，并封装成Request的逻辑，</span><br>      <span class="hljs-comment">//注意设置超时时间，如果很长时间没有接收到请求，就继续下面的逻辑处理。</span><br>      <br>      <span class="hljs-keyword">for</span> (Request request : requests) &#123;<br>        <span class="hljs-type">Event</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> request.getEvent();<br>        <span class="hljs-type">Command</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (event.equals(Event.GOT_DIAMOND)) &#123;<br>          command = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GotDiamondCommand</span>(<span class="hljs-comment">/*数据*/</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.equals(Event.GOT_STAR)) &#123;<br>          command = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GotStartCommand</span>(<span class="hljs-comment">/*数据*/</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.equals(Event.HIT_OBSTACLE)) &#123;<br>          command = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HitObstacleCommand</span>(<span class="hljs-comment">/*数据*/</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.equals(Event.ARCHIVE)) &#123;<br>          command = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArchiveCommand</span>(<span class="hljs-comment">/*数据*/</span>);<br>        &#125; <span class="hljs-comment">// ...一堆else if...</span><br><br>        queue.add(command);<br>      &#125;<br><br>      <span class="hljs-type">int</span> <span class="hljs-variable">handledCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (handledCount &lt; MAX_HANDLED_REQ_COUNT_PER_LOOP) &#123;<br>        <span class="hljs-keyword">if</span> (queue.isEmpty()) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-type">Command</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> queue.poll();<br>        command.execute();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h1><p>解释器模式为某个语言定义它的语法（或者叫文法）表示，并定义一个解释器用来处理这个语法。</p><p>核心思想，就是将语法解析的工作拆分到各个小类中，以此来避免大而全的解析类。一般的做法是，将语法规则拆分一些小的独立的单元，然后对每个单元进行解析，最终合并为对整个语法规则的解析。</p><h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><p>中介模式定义了一个单独的（中介）对象，来封装一组对象之间的交互。将这组对象之间的交互委派给与中介对象交互，来避免对象之间的直接交互。<br>通过引入中介这个中间层，将一组对象之间的交互关系（或者说依赖关系）从多对多（网状关系）转换为一对多（星状关系）。原来一个对象要跟 n 个对象交互，现在只需要跟一个中介对象交互，从而最小化对象之间的交互关系，降低了代码的复杂度，提高了代码的可读性和可维护性。</p><p>观察者模式和中介模式都是为了实现参与者之间的解耦，简化交互关系。两者的不同在于应用场景上。在观察者模式的应用场景中，参与者之间的交互比较有条理，一般都是单向的，一个参与者只有一个身份，要么是观察者，要么是被观察者。而在中介模式的应用场景中，参与者之间的交互关系错综复杂，既可以是消息的发送者、也可以同时是消息的接收者。</p>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结构性设计模式</title>
    <link href="/2022/05/06/%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/06/%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h1><p>结构型模式主要总结了一些类或对象组合在一起的经典结构</p><h2 id="代理、桥接、装饰器、适配器-4-种设计模式的区别"><a href="#代理、桥接、装饰器、适配器-4-种设计模式的区别" class="headerlink" title="代理、桥接、装饰器、适配器 4 种设计模式的区别"></a>代理、桥接、装饰器、适配器 4 种设计模式的区别</h2><p>代理模式：代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能，这是它跟装饰器模式最大的不同。<br>桥接模式：桥接模式的目的是将接口部分和实现部分分离，从而让它们可以较为容易、也相对独立地加以改变。<br>装饰器模式：装饰者模式在不改变原始类接口的情况下，对原始类功能进行增强，并且支持多个装饰器的嵌套使用。<br>适配器模式：适配器模式是一种事后的补救策略。适配器提供跟原始类不同的接口，而代理模式、装饰器模式提供的都是跟原始类相同的接口。</p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>在不改变原始类（或叫被代理类）代码的情况下，通过引入代理类来给原始类附加功能。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserController</span> &#123;<br>  UserVo <span class="hljs-title function_">login</span><span class="hljs-params">(String telephone, String password)</span>;<br>  UserVo <span class="hljs-title function_">register</span><span class="hljs-params">(String telephone, String password)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserController</span> &#123;<br>  <span class="hljs-comment">//...省略其他属性和方法...</span><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> UserVo <span class="hljs-title function_">login</span><span class="hljs-params">(String telephone, String password)</span> &#123;<br>    <span class="hljs-comment">//...省略login逻辑...</span><br>    <span class="hljs-comment">//...返回UserVo数据...</span><br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> UserVo <span class="hljs-title function_">register</span><span class="hljs-params">(String telephone, String password)</span> &#123;<br>    <span class="hljs-comment">//...省略register逻辑...</span><br>    <span class="hljs-comment">//...返回UserVo数据...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserControllerProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserController</span> &#123;<br>  <span class="hljs-keyword">private</span> MetricsCollector metricsCollector;<br>  <span class="hljs-keyword">private</span> UserController userController;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserControllerProxy</span><span class="hljs-params">(UserController userController)</span> &#123;<br>    <span class="hljs-built_in">this</span>.userController = userController;<br>    <span class="hljs-built_in">this</span>.metricsCollector = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MetricsCollector</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> UserVo <span class="hljs-title function_">login</span><span class="hljs-params">(String telephone, String password)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTimestamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    <span class="hljs-comment">// 委托</span><br>    <span class="hljs-type">UserVo</span> <span class="hljs-variable">userVo</span> <span class="hljs-operator">=</span> userController.login(telephone, password);<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">endTimeStamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">responseTime</span> <span class="hljs-operator">=</span> endTimeStamp - startTimestamp;<br>    <span class="hljs-type">RequestInfo</span> <span class="hljs-variable">requestInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestInfo</span>(<span class="hljs-string">&quot;login&quot;</span>, responseTime, startTimestamp);<br>    metricsCollector.recordRequest(requestInfo);<br><br>    <span class="hljs-keyword">return</span> userVo;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> UserVo <span class="hljs-title function_">register</span><span class="hljs-params">(String telephone, String password)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTimestamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    <span class="hljs-type">UserVo</span> <span class="hljs-variable">userVo</span> <span class="hljs-operator">=</span> userController.register(telephone, password);<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">endTimeStamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">responseTime</span> <span class="hljs-operator">=</span> endTimeStamp - startTimestamp;<br>    <span class="hljs-type">RequestInfo</span> <span class="hljs-variable">requestInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestInfo</span>(<span class="hljs-string">&quot;register&quot;</span>, responseTime, startTimestamp);<br>    metricsCollector.recordRequest(requestInfo);<br><br>    <span class="hljs-keyword">return</span> userVo;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//UserControllerProxy使用举例</span><br><span class="hljs-comment">//因为原始类和代理类实现相同的接口，是基于接口而非实现编程</span><br><span class="hljs-comment">//将UserController类对象替换为UserControllerProxy类对象，不需要改动太多代码</span><br><span class="hljs-type">IUserController</span> <span class="hljs-variable">userController</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserControllerProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserController</span>());<br></code></pre></td></tr></table></figure><p>对于这种外部类的扩展，我们一般都是采用继承的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserControllerProxy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UserController</span> &#123;<br>  <span class="hljs-keyword">private</span> MetricsCollector metricsCollector;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserControllerProxy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.metricsCollector = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MetricsCollector</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> UserVo <span class="hljs-title function_">login</span><span class="hljs-params">(String telephone, String password)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTimestamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    <span class="hljs-type">UserVo</span> <span class="hljs-variable">userVo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.login(telephone, password);<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">endTimeStamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">responseTime</span> <span class="hljs-operator">=</span> endTimeStamp - startTimestamp;<br>    <span class="hljs-type">RequestInfo</span> <span class="hljs-variable">requestInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestInfo</span>(<span class="hljs-string">&quot;login&quot;</span>, responseTime, startTimestamp);<br>    metricsCollector.recordRequest(requestInfo);<br><br>    <span class="hljs-keyword">return</span> userVo;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> UserVo <span class="hljs-title function_">register</span><span class="hljs-params">(String telephone, String password)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTimestamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    <span class="hljs-type">UserVo</span> <span class="hljs-variable">userVo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.register(telephone, password);<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">endTimeStamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">responseTime</span> <span class="hljs-operator">=</span> endTimeStamp - startTimestamp;<br>    <span class="hljs-type">RequestInfo</span> <span class="hljs-variable">requestInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestInfo</span>(<span class="hljs-string">&quot;register&quot;</span>, responseTime, startTimestamp);<br>    metricsCollector.recordRequest(requestInfo);<br><br>    <span class="hljs-keyword">return</span> userVo;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//UserControllerProxy使用举例</span><br><span class="hljs-type">UserController</span> <span class="hljs-variable">userController</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserControllerProxy</span>();<br></code></pre></td></tr></table></figure><p>缺点</p><ul><li>我们需要在代理类中，将原始类中的所有的方法，都重新实现一遍，并且为每个方法都附加相似的代码逻辑。</li><li>如果要添加的附加功能的类有不止一个，我们需要针对每个类都创建一个代理类。<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3>不事先为每个原始类编写代理类，而是在运行的时候，动态地创建原始类对应的代理类，然后在系统中用代理类替换掉原始类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MetricsCollectorProxy</span> &#123;<br>  <span class="hljs-keyword">private</span> MetricsCollector metricsCollector;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MetricsCollectorProxy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.metricsCollector = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MetricsCollector</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">createProxy</span><span class="hljs-params">(Object proxiedObject)</span> &#123;<br>    Class&lt;?&gt;[] interfaces = proxiedObject.getClass().getInterfaces();<br>    <span class="hljs-type">DynamicProxyHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicProxyHandler</span>(proxiedObject);<br>    <span class="hljs-keyword">return</span> Proxy.newProxyInstance(proxiedObject.getClass().getClassLoader(), interfaces, handler);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicProxyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Object proxiedObject;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicProxyHandler</span><span class="hljs-params">(Object proxiedObject)</span> &#123;<br>      <span class="hljs-built_in">this</span>.proxiedObject = proxiedObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-type">long</span> <span class="hljs-variable">startTimestamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(proxiedObject, args);<br>      <span class="hljs-type">long</span> <span class="hljs-variable">endTimeStamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>      <span class="hljs-type">long</span> <span class="hljs-variable">responseTime</span> <span class="hljs-operator">=</span> endTimeStamp - startTimestamp;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">apiName</span> <span class="hljs-operator">=</span> proxiedObject.getClass().getName() + <span class="hljs-string">&quot;:&quot;</span> + method.getName();<br>      <span class="hljs-type">RequestInfo</span> <span class="hljs-variable">requestInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestInfo</span>(apiName, responseTime, startTimestamp);<br>      metricsCollector.recordRequest(requestInfo);<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//MetricsCollectorProxy使用举例</span><br><span class="hljs-type">MetricsCollectorProxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MetricsCollectorProxy</span>();<br><span class="hljs-type">IUserController</span> <span class="hljs-variable">userController</span> <span class="hljs-operator">=</span> (IUserController) proxy.createProxy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserController</span>());<br></code></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>业务系统的非功能性需求开发</li></ol><p>比如：监控、统计、鉴权、限流、事务、幂等、日志。我们将这些附加功能与业务功能解耦，放到代理类中统一处理</p><ol start="2"><li>代理模式在 RPC、缓存中的应用</li></ol><h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p>将抽象和实现解耦，让它们可以独立变化。</p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BridegDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Implementor</span> <span class="hljs-variable">implementor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteImplementor</span>();<br>        <span class="hljs-type">Abstraction</span> <span class="hljs-variable">abstraction</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RefinedAbstraction</span>(implementor);<br>        abstraction.execute();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Implementor</span>&#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteImplementor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Implementor</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行了功能逻辑&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Abstraction</span>&#123;<br>        <span class="hljs-keyword">protected</span> Implementor implementor;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Abstraction</span><span class="hljs-params">(Implementor implementor)</span> &#123;<br>            <span class="hljs-built_in">this</span>.implementor = implementor;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RefinedAbstraction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abstraction</span>&#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">RefinedAbstraction</span><span class="hljs-params">(Implementor implementor)</span> &#123;<br>            <span class="hljs-built_in">super</span>(implementor);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>            implementor.execute();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><p>装饰器模式主要解决继承关系过于复杂的问题，通过组合来替代继承。它主要的作用是给原始类添加增强功能。这也是判断是否该用装饰器模式的一个重要的依据。除此之外，装饰器模式还有一个特点，那就是可以对原始类嵌套使用多个装饰器。为了满足这个应用场景，在设计的时候，装饰器类需要跟原始类继承相同的抽象类或者接口。</p><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Component</span>&#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">excute</span><span class="hljs-params">()</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Component</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">excute</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;基础功能&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Decorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Component</span>&#123;<br><br>        <span class="hljs-keyword">private</span> Component component;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Decorator</span><span class="hljs-params">(Component component)</span> &#123;<br>            <span class="hljs-built_in">this</span>.component = component;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">excute</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行前，部分增强&quot;</span>);<br>            component.excute();<br>            System.out.println(<span class="hljs-string">&quot;执行后，部分增强&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">component</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteComponent</span>();<br>        <span class="hljs-type">Decorator</span> <span class="hljs-variable">decorator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Decorator</span>(component);<br>        decorator.excute();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>这个模式就是用来做适配的，它将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。</p><h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><h3 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h3><p>类适配器使用继承关系来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 类适配器: 基于继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITarget</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span>;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">fc</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fa</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//... &#125;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fb</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//... &#125;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fc</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//... &#125;</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Adaptee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ITarget</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.fa();<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//...重新实现f2()...</span><br>  &#125;<br>  <br>  <span class="hljs-comment">// 这里fc()不需要实现，直接继承自Adaptee，这是跟对象适配器最大的不同点</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h3><p>对象适配器使用组合关系来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 对象适配器：基于组合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITarget</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span>;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">fc</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fa</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//... &#125;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fb</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//... &#125;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fc</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//... &#125;</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ITarget</span> &#123;<br>  <span class="hljs-keyword">private</span> Adaptee adaptee;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adaptor</span><span class="hljs-params">(Adaptee adaptee)</span> &#123;<br>    <span class="hljs-built_in">this</span>.adaptee = adaptee;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>    adaptee.fa(); <span class="hljs-comment">//委托给Adaptee</span><br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//...重新实现f2()...</span><br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fc</span><span class="hljs-params">()</span> &#123;<br>    adaptee.fc();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>判断的标准主要有两个，一个是 Adaptee 接口的个数，另一个是 Adaptee 和 ITarget 的契合程度。</p><ul><li>如果 Adaptee 接口并不多，那两种实现方式都可以。</li><li>如果 Adaptee 接口很多，而且 Adaptee 和 ITarget 接口定义大部分都相同，那我们推荐使用类适配器，因为 Adaptor 复用父类 Adaptee 的接口，比起对象适配器的实现方式，Adaptor 的代码量要少一些。</li><li>如果 Adaptee 接口很多，而且 Adaptee 和 ITarget 接口定义大部分都不相同，那我们推荐使用对象适配器，因为组合结构相对于继承更加灵活。</li></ul><h2 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>封装有缺陷的接口设计</li><li>统一多个类的接口设计</li><li>替换依赖的外部系统</li><li>兼容老版本接口</li><li>适配不同格式的数据</li></ol><h1 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h1><p>门面模式为子系统提供一组统一的接口，定义一组高层接口让子系统更易用。</p><h2 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>解决易用性问题</li><li>解决性能问题</li></ol><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>主要是用来处理树形结构数据<br>将一组对象组织（Compose）成树形结构，以表示一种“部分 - 整体”的层次结构。组合让客户端（在很多设计模式书籍中，“客户端”代指代码的使用者。）可以统一单个对象和组合对象的处理逻辑。</p><p>组合模式，将一组对象组织成树形结构，将单个对象和组合对象都看做树中的节点，以统一处理逻辑，并且它利用树形结构的特点，递归地处理每个子树，依次简化代码实现。使用组合模式的前提在于，你的业务场景必须能够表示成树形结构。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSystemNode</span> &#123;<br>  <span class="hljs-keyword">protected</span> String path;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileSystemNode</span><span class="hljs-params">(String path)</span> &#123;<br>    <span class="hljs-built_in">this</span>.path = path;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countNumOfFiles</span><span class="hljs-params">()</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">long</span> <span class="hljs-title function_">countSizeOfFiles</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPath</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> path;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">File</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileSystemNode</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">File</span><span class="hljs-params">(String path)</span> &#123;<br>    <span class="hljs-built_in">super</span>(path);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countNumOfFiles</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">countSizeOfFiles</span><span class="hljs-params">()</span> &#123;<br>    java.io.<span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.File(path);<br>    <span class="hljs-keyword">if</span> (!file.exists()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> file.length();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Directory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileSystemNode</span> &#123;<br>  <span class="hljs-keyword">private</span> List&lt;FileSystemNode&gt; subNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Directory</span><span class="hljs-params">(String path)</span> &#123;<br>    <span class="hljs-built_in">super</span>(path);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countNumOfFiles</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">numOfFiles</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (FileSystemNode fileOrDir : subNodes) &#123;<br>      numOfFiles += fileOrDir.countNumOfFiles();<br>    &#125;<br>    <span class="hljs-keyword">return</span> numOfFiles;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">countSizeOfFiles</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">sizeofFiles</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (FileSystemNode fileOrDir : subNodes) &#123;<br>      sizeofFiles += fileOrDir.countSizeOfFiles();<br>    &#125;<br>    <span class="hljs-keyword">return</span> sizeofFiles;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSubNode</span><span class="hljs-params">(FileSystemNode fileOrDir)</span> &#123;<br>    subNodes.add(fileOrDir);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeSubNode</span><span class="hljs-params">(FileSystemNode fileOrDir)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> subNodes.size();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; i &lt; size; ++i) &#123;<br>      <span class="hljs-keyword">if</span> (subNodes.get(i).getPath().equalsIgnoreCase(fileOrDir.getPath())) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i &lt; size) &#123;<br>      subNodes.remove(i);<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * /</span><br><span class="hljs-comment">     * /wz/</span><br><span class="hljs-comment">     * /wz/a.txt</span><br><span class="hljs-comment">     * /wz/b.txt</span><br><span class="hljs-comment">     * /wz/movies/</span><br><span class="hljs-comment">     * /wz/movies/c.avi</span><br><span class="hljs-comment">     * /xzg/</span><br><span class="hljs-comment">     * /xzg/docs/</span><br><span class="hljs-comment">     * /xzg/docs/d.txt</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">Directory</span> <span class="hljs-variable">fileSystemTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Directory</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>    <span class="hljs-type">Directory</span> <span class="hljs-variable">node_wz</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Directory</span>(<span class="hljs-string">&quot;/wz/&quot;</span>);<br>    <span class="hljs-type">Directory</span> <span class="hljs-variable">node_xzg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Directory</span>(<span class="hljs-string">&quot;/xzg/&quot;</span>);<br>    fileSystemTree.addSubNode(node_wz);<br>    fileSystemTree.addSubNode(node_xzg);<br><br>    <span class="hljs-type">File</span> <span class="hljs-variable">node_wz_a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/wz/a.txt&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">node_wz_b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/wz/b.txt&quot;</span>);<br>    <span class="hljs-type">Directory</span> <span class="hljs-variable">node_wz_movies</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Directory</span>(<span class="hljs-string">&quot;/wz/movies/&quot;</span>);<br>    node_wz.addSubNode(node_wz_a);<br>    node_wz.addSubNode(node_wz_b);<br>    node_wz.addSubNode(node_wz_movies);<br><br>    <span class="hljs-type">File</span> <span class="hljs-variable">node_wz_movies_c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/wz/movies/c.avi&quot;</span>);<br>    node_wz_movies.addSubNode(node_wz_movies_c);<br><br>    <span class="hljs-type">Directory</span> <span class="hljs-variable">node_xzg_docs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Directory</span>(<span class="hljs-string">&quot;/xzg/docs/&quot;</span>);<br>    node_xzg.addSubNode(node_xzg_docs);<br><br>    <span class="hljs-type">File</span> <span class="hljs-variable">node_xzg_docs_d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/xzg/docs/d.txt&quot;</span>);<br>    node_xzg_docs.addSubNode(node_xzg_docs_d);<br><br>    System.out.println(<span class="hljs-string">&quot;/ files num:&quot;</span> + fileSystemTree.countNumOfFiles());<br>    System.out.println(<span class="hljs-string">&quot;/wz/ files num:&quot;</span> + node_wz.countNumOfFiles());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p>享元模式的意图是复用对象，节省内存，前提是享元对象是不可变对象。</p><p>当一个系统中存在大量重复对象的时候，如果这些重复的对象是不可变对象，我们就可以利用享元模式将对象设计成享元，在内存中只保留一份实例，供多处代码引用。</p><p>享元模式的代码实现非常简单，主要是通过工厂模式，在工厂类中，通过一个 Map 或者 List 来缓存已经创建好的享元对象，以达到复用的目的。</p>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建型设计模式</title>
    <link href="/2022/05/06/%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/06/%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h1><p>创建型模式主要解决对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码。</p><ul><li>单例模式用来创建全局唯一的对象。</li><li>-工厂模式用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象。</li><li>建造者模式是用来创建复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的对象。</li><li>原型模式针对创建成本比较大的对象，利用对已有对象进行复制的方式进行创建，以达到节省创建时间的目的。<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1>单例设计模式（Singleton Design Pattern）理解起来非常简单。一个类只允许创建一个对象（或者实例），那这个类就是一个单例类，这种设计模式就叫作单例设计模式，简称单例模式。<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2></li></ul><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdGenerator</span> &#123; <br>  <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">IdGenerator</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IdGenerator</span>();<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">IdGenerator</span><span class="hljs-params">()</span> &#123;&#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IdGenerator <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> instance;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123; <br>    <span class="hljs-keyword">return</span> id.incrementAndGet();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>采用饿汉式实现方式，将耗时的初始化操作，提前到程序启动的时候完成，这样就能避免在程序运行的时候，再去初始化导致的性能问题。</p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdGenerator</span> &#123; <br>  <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> IdGenerator instance;<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">IdGenerator</span><span class="hljs-params">()</span> &#123;&#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> IdGenerator <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>      instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IdGenerator</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> instance;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123; <br>    <span class="hljs-keyword">return</span> id.incrementAndGet();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>懒汉式相对于饿汉式的优势是支持延迟加载。<br>我们给 getInstance() 这个方法加了一把大锁（synchronzed），导致这个函数的并发度很低。量化一下的话，并发度是 1，也就相当于串行操作了。</p><h3 id="双重检测"><a href="#双重检测" class="headerlink" title="双重检测"></a>双重检测</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdGenerator</span> &#123; <br>  <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> IdGenerator instance;<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">IdGenerator</span><span class="hljs-params">()</span> &#123;&#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IdGenerator <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">synchronized</span>(IdGenerator.class) &#123; <span class="hljs-comment">// 此处为类级别的锁</span><br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>          instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IdGenerator</span>();<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> instance;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123; <br>    <span class="hljs-keyword">return</span> id.incrementAndGet();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdGenerator</span> &#123; <br>  <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">IdGenerator</span><span class="hljs-params">()</span> &#123;&#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHolder</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">IdGenerator</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IdGenerator</span>();<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IdGenerator <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> SingletonHolder.instance;<br>  &#125;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123; <br>    <span class="hljs-keyword">return</span> id.incrementAndGet();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">IdGenerator</span> &#123;<br>  INSTANCE;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0</span>);<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123; <br>    <span class="hljs-keyword">return</span> id.incrementAndGet();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>单例对OOP特性的支持不友好</li></ol><p>一旦你选择将某个类设计成到单例类，也就意味着放弃了继承和多态这两个强有力的面向对象特性，也就相当于损失了可以应对未来需求变化的扩展性。2. 单例会隐藏类之间的依赖关系</p><ol start="2"><li>单例会隐藏类之间的依赖关系</li></ol><p>单例类不需要显示创建、不需要依赖参数传递，在函数中直接调用就可以了。如果代码比较复杂，这种调用关系就会非常隐蔽。</p><ol start="3"><li>单例对代码的扩展性不友好</li></ol><p>单例类在某些情况下会影响代码的扩展性、灵活性。</p><ol start="4"><li>单例对代码的可测试性不友好</li><li>单例不支持有参数的构造函数</li></ol><p>解决思路</p><ol><li>创建完实例之后，再调用 init() 函数传递参数。需要注意的是，我们在使用这个单例类的时候，要先调用 init() 方法，然后才能调用 getInstance() 方法，否则代码会抛出异常。</li><li>将参数放到 getIntance() 方法中</li><li>将参数放到另外一个全局变量中。</li></ol><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>第一种实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuleConfigSource</span> &#123;<br>  <span class="hljs-keyword">public</span> RuleConfig <span class="hljs-title function_">load</span><span class="hljs-params">(String ruleConfigFilePath)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ruleConfigFileExtension</span> <span class="hljs-operator">=</span> getFileExtension(ruleConfigFilePath);<br>    <span class="hljs-type">IRuleConfigParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> RuleConfigParserFactory.createParser(ruleConfigFileExtension);<br>    <span class="hljs-keyword">if</span> (parser == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidRuleConfigException</span>(<br>              <span class="hljs-string">&quot;Rule config file format is not supported: &quot;</span> + ruleConfigFilePath);<br>    &#125;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">configText</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//从ruleConfigFilePath文件中读取配置文本到configText中</span><br>    <span class="hljs-type">RuleConfig</span> <span class="hljs-variable">ruleConfig</span> <span class="hljs-operator">=</span> parser.parse(configText);<br>    <span class="hljs-keyword">return</span> ruleConfig;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getFileExtension</span><span class="hljs-params">(String filePath)</span> &#123;<br>    <span class="hljs-comment">//...解析文件名获取扩展名，比如rule.json，返回json</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;json&quot;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuleConfigParserFactory</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IRuleConfigParser <span class="hljs-title function_">createParser</span><span class="hljs-params">(String configFormat)</span> &#123;<br>    <span class="hljs-type">IRuleConfigParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;json&quot;</span>.equalsIgnoreCase(configFormat)) &#123;<br>      parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonRuleConfigParser</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;xml&quot;</span>.equalsIgnoreCase(configFormat)) &#123;<br>      parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlRuleConfigParser</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;yaml&quot;</span>.equalsIgnoreCase(configFormat)) &#123;<br>      parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">YamlRuleConfigParser</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;properties&quot;</span>.equalsIgnoreCase(configFormat)) &#123;<br>      parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesRuleConfigParser</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> parser;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuleConfigParserFactory</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, RuleConfigParser&gt; cachedParsers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>  <span class="hljs-keyword">static</span> &#123;<br>    cachedParsers.put(<span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonRuleConfigParser</span>());<br>    cachedParsers.put(<span class="hljs-string">&quot;xml&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlRuleConfigParser</span>());<br>    cachedParsers.put(<span class="hljs-string">&quot;yaml&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">YamlRuleConfigParser</span>());<br>    cachedParsers.put(<span class="hljs-string">&quot;properties&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesRuleConfigParser</span>());<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IRuleConfigParser <span class="hljs-title function_">createParser</span><span class="hljs-params">(String configFormat)</span> &#123;<br>    <span class="hljs-keyword">if</span> (configFormat == <span class="hljs-literal">null</span> || configFormat.isEmpty()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//返回null还是IllegalArgumentException全凭你自己说了算</span><br>    &#125;<br>    <span class="hljs-type">IRuleConfigParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> cachedParsers.get(configFormat.toLowerCase());<br>    <span class="hljs-keyword">return</span> parser;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>将简单工厂的if分支逻辑去除，用多态实现。<br>工厂方法模式比起简单工厂模式更加符合开闭原则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IRuleConfigParserFactory</span> &#123;<br>  IRuleConfigParser <span class="hljs-title function_">createParser</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonRuleConfigParserFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IRuleConfigParserFactory</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> IRuleConfigParser <span class="hljs-title function_">createParser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonRuleConfigParser</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XmlRuleConfigParserFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IRuleConfigParserFactory</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> IRuleConfigParser <span class="hljs-title function_">createParser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlRuleConfigParser</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YamlRuleConfigParserFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IRuleConfigParserFactory</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> IRuleConfigParser <span class="hljs-title function_">createParser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YamlRuleConfigParser</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesRuleConfigParserFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IRuleConfigParserFactory</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> IRuleConfigParser <span class="hljs-title function_">createParser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesRuleConfigParser</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="简单工厂和工厂方法的选择"><a href="#简单工厂和工厂方法的选择" class="headerlink" title="简单工厂和工厂方法的选择"></a>简单工厂和工厂方法的选择</h3><p>将某个代码块剥离出来，独立为函数或者类，原因是这个代码块的逻辑过于复杂，剥离之后能让代码更加清晰，更加可读、可维护。但是，如果代码块本身并不复杂，就几行代码而已，我们完全没必要将它拆分成单独的函数或者类。<br>基于这个设计思想，当对象的创建逻辑比较复杂，不只是简单的 new 一下就可以，而是要组合其他类对象，做各种初始化操作的时候，我们推荐使用工厂方法模式，将复杂的创建逻辑拆分到多个工厂类中，让每个工厂类都不至于过于复杂。而使用简单工厂模式，将所有的创建逻辑都放到一个工厂类中，会导致这个工厂类变得很复杂。<br>除此之外，在某些场景下，如果对象不可复用，那工厂类每次都要返回不同的对象。如果我们使用简单工厂模式来实现，就只能选择第一种包含 if 分支逻辑的实现方式。如果我们还想避免烦人的 if-else 分支逻辑，这个时候，我们就推荐使用工厂方法模式。</p><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>一个工厂创建多个不同类型的对象，减少工厂类的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IConfigParserFactory</span> &#123;<br>  IRuleConfigParser <span class="hljs-title function_">createRuleParser</span><span class="hljs-params">()</span>;<br>  ISystemConfigParser <span class="hljs-title function_">createSystemParser</span><span class="hljs-params">()</span>;<br>  <span class="hljs-comment">//此处可以扩展新的parser类型，比如IBizConfigParser</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonConfigParserFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IConfigParserFactory</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> IRuleConfigParser <span class="hljs-title function_">createRuleParser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonRuleConfigParser</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> ISystemConfigParser <span class="hljs-title function_">createSystemParser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonSystemConfigParser</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XmlConfigParserFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IConfigParserFactory</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> IRuleConfigParser <span class="hljs-title function_">createRuleParser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlRuleConfigParser</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> ISystemConfigParser <span class="hljs-title function_">createSystemParser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlSystemConfigParser</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 省略YamlConfigParserFactory和PropertiesConfigParserFactory代码</span><br></code></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>当创建逻辑比较复杂，是一个“大工程”的时候，我们就考虑使用工厂模式，封装对象的创建过程，将对象的创建和使用相分离。</p><ul><li>第一种情况：类似规则配置解析的例子，代码中存在 if-else 分支判断，动态地根据不同的类型创建不同的对象。针对这种情况，我们就考虑使用工厂模式，将这一大坨 if-else 创建对象的代码抽离出来，放到工厂类中。</li><li>还有一种情况，尽管我们不需要根据不同的类型创建不同的对象，但是，单个对象本身的创建过程比较复杂，比如前面提到的要组合其他类对象，做各种初始化操作。在这种情况下，我们也可以考虑使用工厂模式，将对象的创建过程封装到工厂类中。</li></ul><p>对于第一种情况，当每个对象的创建逻辑都比较简单的时候，我推荐使用简单工厂模式，将多个对象的创建逻辑放到一个工厂类中。当每个对象的创建逻辑都比较复杂的时候，为了避免设计一个过于庞大的简单工厂类，我推荐使用工厂方法模式，将创建逻辑拆分得更细，每个对象的创建逻辑独立到各自的工厂类中。同理，对于第二种情况，因为单个对象本身的创建逻辑就比较复杂，所以，我建议使用工厂方法模式。</p><p>本质的标准</p><ul><li>封装变化：创建逻辑有可能变化，封装成工厂类之后，创建逻辑的变更对调用者透明。</li><li>代码复用：创建代码抽离到独立的工厂类之后可以复用。</li><li>隔离复杂性：封装复杂的创建逻辑，调用者无需了解如何创建对象。</li><li>控制复杂度：将创建代码抽离出来，让原本的函数或类职责更单一，代码更简洁。</li></ul><h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourcePoolConfig</span> &#123;<br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxTotal;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxIdle;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> minIdle;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ResourcePoolConfig</span><span class="hljs-params">(Builder builder)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = builder.name;<br>    <span class="hljs-built_in">this</span>.maxTotal = builder.maxTotal;<br>    <span class="hljs-built_in">this</span>.maxIdle = builder.maxIdle;<br>    <span class="hljs-built_in">this</span>.minIdle = builder.minIdle;<br>  &#125;<br>  <span class="hljs-comment">//...省略getter方法...</span><br><br>  <span class="hljs-comment">//我们将Builder类设计成了ResourcePoolConfig的内部类。</span><br>  <span class="hljs-comment">//我们也可以将Builder类设计成独立的非内部类ResourcePoolConfigBuilder。</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_MAX_TOTAL</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_MAX_IDLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_MIN_IDLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxTotal</span> <span class="hljs-operator">=</span> DEFAULT_MAX_TOTAL;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxIdle</span> <span class="hljs-operator">=</span> DEFAULT_MAX_IDLE;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">minIdle</span> <span class="hljs-operator">=</span> DEFAULT_MIN_IDLE;<br><br>    <span class="hljs-keyword">public</span> ResourcePoolConfig <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// 校验逻辑放到这里来做，包括必填项校验、依赖关系校验、约束条件校验等</span><br>      <span class="hljs-keyword">if</span> (StringUtils.isBlank(name)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (maxIdle &gt; maxTotal) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (minIdle &gt; maxTotal || minIdle &gt; maxIdle) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourcePoolConfig</span>(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>      <span class="hljs-keyword">if</span> (StringUtils.isBlank(name)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>      &#125;<br>      <span class="hljs-built_in">this</span>.name = name;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setMaxTotal</span><span class="hljs-params">(<span class="hljs-type">int</span> maxTotal)</span> &#123;<br>      <span class="hljs-keyword">if</span> (maxTotal &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>      &#125;<br>      <span class="hljs-built_in">this</span>.maxTotal = maxTotal;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setMaxIdle</span><span class="hljs-params">(<span class="hljs-type">int</span> maxIdle)</span> &#123;<br>      <span class="hljs-keyword">if</span> (maxIdle &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>      &#125;<br>      <span class="hljs-built_in">this</span>.maxIdle = maxIdle;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setMinIdle</span><span class="hljs-params">(<span class="hljs-type">int</span> minIdle)</span> &#123;<br>      <span class="hljs-keyword">if</span> (minIdle &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>      &#125;<br>      <span class="hljs-built_in">this</span>.minIdle = minIdle;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 这段代码会抛出IllegalArgumentException，因为minIdle&gt;maxIdle</span><br><span class="hljs-type">ResourcePoolConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourcePoolConfig</span>.Builder()<br>        .setName(<span class="hljs-string">&quot;dbconnectionpool&quot;</span>)<br>        .setMaxTotal(<span class="hljs-number">16</span>)<br>        .setMaxIdle(<span class="hljs-number">10</span>)<br>        .setMinIdle(<span class="hljs-number">12</span>)<br>        .build();<br></code></pre></td></tr></table></figure><h2 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>我们把类的必填属性放到构造函数中，强制创建对象的时候就设置。如果必填的属性有很多，把这些必填属性都放到构造函数中设置，那构造函数就又会出现参数列表很长的问题。如果我们把必填属性通过 set() 方法设置，那校验这些必填属性是否已经填写的逻辑就无处安放了。</li><li>如果类的属性之间有一定的依赖关系或者约束条件，我们继续使用构造函数配合 set() 方法的设计思路，那这些依赖关系或约束条件的校验逻辑就无处安放了。</li><li>如果我们希望创建不可变对象，也就是说，对象在创建好之后，就不能再修改内部的属性值，要实现这个功能，我们就不能在类中暴露 set() 方法。构造函数配合 set() 方法来设置属性值的方式就不适用了。</li></ul><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>如果对象的创建成本比较大，而同一个类的不同对象之间差别不大（大部分字段都相同），在这种情况下，我们可以利用对已有对象（原型）进行复制（或者叫拷贝）的方式来创建新对象，以达到节省创建时间的目的。这种基于原型来创建对象的方式就叫作原型设计模式（Prototype Design Pattern），简称原型模式。</p><h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>Object 类的 clone() 方法执行的就是我们刚刚说的浅拷贝。它只会拷贝对象中的基本数据类型的数据（比如，int、long），以及引用对象（SearchWord）的内存地址，不会递归地拷贝引用对象本身。</p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul><li>递归拷贝对象，直到没有引用对象为止</li><li>先将对象序列化，然后反序列化为新对象</li></ul>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式概述</title>
    <link href="/2022/05/06/%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/05/06/%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="代码评价标准"><a href="#代码评价标准" class="headerlink" title="代码评价标准"></a>代码评价标准</h2><ol><li>可维护性 maintainability</li></ol><p>在不破坏原有代码设计、不引入新的bug的情况下，能够快速修改会添加代码</p><ol start="2"><li>可读性 readability</li></ol><p>代码是否符合编码规范，命名是否准确，注释是否详尽，函数是否长短合适，模块划分是否清晰，是否符合高内聚低耦合等</p><ol start="3"><li>可扩展性 extensibility</li></ol><p>代码预留了一些功能扩展点</p><ol start="4"><li>灵活性 flexibility</li></ol><p>一段代码易扩展、易复用</p><ol start="5"><li>简洁性 simplicity</li></ol><p>符合KISS原则<code>Keep Is Simple Stupid</code></p><ol start="6"><li>可复用性 reusability</li></ol><p>尽量减少重复代码的编写，复用已有的代码</p><ol start="7"><li>可测试性 testability</li></ol><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651218356825-1718ddca-1a09-4fb2-bfe5-eaa4348c3367.png#clientId=u025515ec-7b05-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uce79ee0e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3903&originWidth=5013&originalType=url&ratio=1&rotation=0&showTitle=false&size=1176302&status=done&style=none&taskId=uef2b754c-9df9-46ac-910b-5ecabac3d85&title=" alt="image.png"></p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul><li>OOP</li></ul><p>Object Oriented Programming面向对象</p><ul><li>OOA</li></ul><p>面向对象分析</p><ul><li>OOD</li></ul><p>面向对象设计</p><ul><li>VO</li></ul><p>View Object</p><ul><li>BO</li></ul><p>Business Object</p><h2 id="概念区分"><a href="#概念区分" class="headerlink" title="概念区分"></a>概念区分</h2><h3 id="抽象类和接口区别？"><a href="#抽象类和接口区别？" class="headerlink" title="抽象类和接口区别？"></a>抽象类和接口区别？</h3><p>抛开语义上的区别<br>继承关系时一种is-a的关系，那么抽象类既然属于类，也表示一种is-a的关系。<br>相对于抽象类的is-a，接口表示一种has-a的关系，表示具备某些功能。。<br>接口更形象的成为协议。</p><p>如果要表示一种Is-a的关系，并且是为了解决代码复用的问题，就用抽象类。<br>如果表示一种has-a的关系，并且为了解决抽象而非代码复用的问题，就用接口。</p><p>抽象类是自下而上的设计思路，现有之类的代码重复，然后抽象层上层的父类。<br>接口相反，是一种自上而下的设计思路，一般先设计接口，在考虑具体实现。</p><h3 id="基于接口而非实现编程"><a href="#基于接口而非实现编程" class="headerlink" title="基于接口而非实现编程"></a>基于接口而非实现编程</h3><ol><li>函数的命名不能暴露任何实现细节</li><li>封装具体的实现细节</li><li>为实现类定义抽象的接口。具体的实现类都依赖统一的接口定义，遵从一致的上传功能协议。使用者依赖接口而不是具体的实现类进行编程。</li></ol><h3 id="组合优于继承，多用组合少用继承"><a href="#组合优于继承，多用组合少用继承" class="headerlink" title="组合优于继承，多用组合少用继承"></a>组合优于继承，多用组合少用继承</h3><p>利用组合、接口、委托的手段可以解决继承存在的问题。<br>继承的三个主要作用：表示is-a的关系，支持多台特性，代码复用<br>is-a关系，通过组合和接口的has-a关系替代<br>多台特性，通过接口实现<br>代码复用，通过组合和委托的方式实现</p><h3 id="定义类与类之间的交互关系"><a href="#定义类与类之间的交互关系" class="headerlink" title="定义类与类之间的交互关系"></a>定义类与类之间的交互关系</h3><ul><li>泛化 Generalization</li></ul><p>继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>实现 Realization</li></ul><p>接口和实现类的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>聚合 Aggregation</li></ul><p>包含关系<br>A类对象包含B类对象，B类对象的生命周期可以不依赖A类对象的生命周期。<br>单独销毁A类对象而不影响B类对象。比如课程和学生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">private</span> B b;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(B b)</span>&#123;<br>        <span class="hljs-built_in">this</span>.b = b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>组合 Composition</li></ul><p>包含关系<br>A类对象包含B类对象，B类对象的生命周期依赖A类对象的生命周期，B类对象不可以单独存在<br>比如鸟与翅膀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">private</span> B b;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>关联 Association</li></ul><p>一种非常弱的关系，包含聚合、组合两种。<br>如果B类对象是A的成员变量，那B类和A类就是关联关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-keyword">private</span> B b;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(B b)</span> &#123;<br>    <span class="hljs-built_in">this</span>.b = b;<br>  &#125;<br>&#125;<br>或者<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-keyword">private</span> B b;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>依赖 Dependency</li></ul><p>比关联关系更弱的关系，包含关联关系。<br>不管是 B 类对象是 A 类对象的成员变量，还是 A 类的方法使用 B 类对象作为参数或者返回值、局部变量，只要 B 类对象和 A 类对象有任何使用关系，我们都称它们有依赖关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-keyword">private</span> B b;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(B b)</span> &#123;<br>    <span class="hljs-built_in">this</span>.b = b;<br>  &#125;<br>&#125;<br>或者<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-keyword">private</span> B b;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>  &#125;<br>&#125;<br>或者<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(B b)</span> &#123; ... &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上用组合代替UML中的组合、聚合、关联。<br>主要使用泛化、实现、组合、依赖</p><h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><h2 id="SOLID原则"><a href="#SOLID原则" class="headerlink" title="SOLID原则"></a>SOLID原则</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>Single Responsibility Principle，缩写为 SRP<br>一个类或者模块只负责一个职责。</p><p>不要设计大而全的类，要设计粒度小、功能单一的类。换个角度来讲就是，一个类包含了两个或者两个以上业务不相干的功能，那我们就说它职责不够单一，应该将它拆分成多个功能更加单一、粒度更细的类。<br>我们可以先写一个粗粒度的类，满足业务需求。随着业务的发展，如果粗粒度的类越来越庞大，代码越来越多，这个时候，我们就可以将这个粗粒度的类，拆分成几个更细粒度的类。这就是所谓的持续重构</p><ul><li>类中的代码行数、函数或属性过多，会影响代码的可读性和可维护性，我们就需要考虑对类进行拆分</li><li>类依赖的其他类过多，或者依赖类的其他类过多，不符合高内聚、低耦合的设计思想，我们就需要考虑对类进行拆分</li><li>私有方法过多，我们就要考虑能否将私有方法独立到新的类中，设置为 public 方法，供更多的类使用，从而提高代码的复用性</li><li>比较难给类起一个合适名字，很难用一个业务名词概括，或者只能用一些笼统的 Manager、Context 之类的词语来命名，这就说明类的职责定义得可能不够清晰</li><li>类中大量的方法都是集中操作类中的某几个属性，比如，在 UserInfo 例子中，如果一半的方法都是在操作 address 信息，那就可以考虑将这几个属性和对应的方法拆分出来。<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3>Open Closed Principle，简写为 OCP<br>对扩展开放，对修改关闭<br>添加一个新的功能应该是，在已有代码基础上扩展代码（新增模块、类、方法等），而非修改已有代码（修改模块、类、方法等）。<br>注意</li></ul><ol><li>开闭原则并不是说完全杜绝修改，而是以最小的修改代码的代价来完成新功能的开发。</li><li>同样的代码改动，在粗代码粒度下，可能被认定为“修改”；在细代码粒度下，可能又被认定为“扩展”。</li></ol><p>最常用来提高代码扩展性的方法有：多态、依赖注入、基于接口而非实现编程</p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>Liskov Substitution Principle，缩写为 LSP<br>子类对象（object of subtype&#x2F;derived class）能够替换程序（program）中父类对象（object of base&#x2F;parent class）出现的任何地方，并且保证原来程序的逻辑行为（behavior）不变及正确性不被破坏。</p><p>里式替换是一种设计原则，是用来指导继承关系中子类该如何设计的，子类的设计要保证在替换父类的时候，不改变原有程序的逻辑以及不破坏原有程序的正确性。</p><p>危房里氏替换原则的例子</p><ul><li>子类违背父类声明要实现的功能</li><li>子类违背父类对输入、输出、异常的约定</li><li>子类违背父类注释中所罗列的任何特殊说明</li></ul><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>Interface Segregation Principle，缩写为 ISP<br>客户端不应该被强迫依赖它不需要的接口。其中的“客户端”，可以理解为接口的调用者或者使用者。<br>接口</p><ul><li><p>一组 API 接口集合</p></li><li><p>单个 API 接口或函数</p></li><li><p>OOP 中的接口概念</p><h3 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a>依赖反转原则</h3><p>Dependency Inversion Principle，缩写为 DIP<br>高层模块（high-level modules）不要依赖低层模块（low-level）。高层模块和低层模块应该通过抽象（abstractions）来互相依赖。除此之外，抽象（abstractions）不要依赖具体实现细节（details），具体实现细节（details）依赖抽象（abstractions）。<br>在调用链上，调用者属于高层，被调用者属于低层</p></li><li><p>IOC 控制反转</p></li></ul><p>框架提供了一个可扩展的代码骨架，用来组装对象、管理整个执行流程。程序员利用框架进行开发的时候，只需要往预留的扩展点上，添加跟自己业务相关的代码，就可以利用框架来驱动整个程序流程的执行。<br>这里的“控制”指的是对程序执行流程的控制，而“反转”指的是在没有使用框架之前，程序员自己控制整个程序的执行。在使用框架之后，整个程序的执行流程可以通过框架来控制。流程的控制权从程序员“反转”到了框架。<br>控制反转并不是一种具体的实现技巧，而是一个比较笼统的设计思想，一般用来指导框架层面的设计。</p><ul><li>DI</li></ul><p>Dependency Injection，缩写为 DI<br>不通过 new() 的方式在类内部创建依赖类对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传递（或注入）给类使用。</p><h2 id="KISS原则"><a href="#KISS原则" class="headerlink" title="KISS原则"></a>KISS原则</h2><p>KISS 原则就是保持代码可读和可维护的重要手段。</p><ul><li>不要使用同事可能不懂的技术来实现代码。比如前面例子中的正则表达式，还有一些编程语言中过于高级的语法等。</li><li>不要重复造轮子，要善于使用已经有的工具类库。经验证明，自己去实现这些类库，出 bug 的概率会更高，维护的成本也比较高。不要过度优化。</li><li>不要过度使用一些奇技淫巧（比如，位运算代替算术运算、复杂的条件语句代替 if-else、使用一些过于底层的函数等）来优化代码，牺牲代码的可读性。</li></ul><h2 id="YAGNI原则"><a href="#YAGNI原则" class="headerlink" title="YAGNI原则"></a>YAGNI原则</h2><p>You Ain’t Gonna Need It。<br>不要去设计当前用不到的功能；不要去编写当前用不到的代码。</p><h2 id="DRY原则"><a href="#DRY原则" class="headerlink" title="DRY原则"></a>DRY原则</h2><p>Don’t Repeat Yourself<br>不要写重复的代码。</p><h2 id="代码复用性"><a href="#代码复用性" class="headerlink" title="代码复用性"></a>代码复用性</h2><ul><li>减少代码耦合</li><li>满足单一职责原则</li><li>模块化</li><li>业务与非业务逻辑分离</li><li>通用代码下沉</li><li>继承、多态、抽象、封装</li><li>应用模板等设计模式</li></ul><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p>Law of Demeter，缩写是 LOD，最小知识原则<br>不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口（也就是定义中的“有限知识”）。</p><p>高内聚，就是指相近的功能应该放到同一个类中，不相近的功能不要放到同一个类中。相近的功能往往会被同时修改，放到同一个类中，修改会比较集中，代码容易维护。<br>松耦合是说，在代码中，类与类之间的依赖关系简单清晰。即使两个类有依赖关系，一个类的代码改动不会或者很少导致依赖类的代码改动。</p><h1 id="规范与重构"><a href="#规范与重构" class="headerlink" title="规范与重构"></a>规范与重构</h1><h2 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h2><ol><li>封装与抽象</li></ol><p>封装和抽象可以有效地隐藏实现的复杂性，隔离实现的易变性，给依赖的模块提供稳定且易用的抽象接口。</p><ol start="2"><li>中间层</li></ol><p>引入中间层能简化模块或类之间的依赖关系</p><ol><li><p>引入一个中间层，包裹老的接口，提供新的接口定义</p></li><li><p>新开发的代码依赖中间层新的接口</p></li><li><p>将老依赖老接口的代码改为调用新接口</p></li><li><p>确保所有代码都调用新接口后，删除老接口</p></li><li><p>模块化</p></li></ol><p>将每个模块都当作一个独立的 lib 一样来开发，只提供封装了内部实现细节的接口给其他模块使用</p><ol start="4"><li>其他设计思想</li></ol><ul><li>单一职责原则</li><li>基于接口而非实现编程</li><li>依赖注入</li><li>多用组合少用继承</li><li>迪米特法则</li></ul><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul><li>命名的关键是能准确达意。对于不同作用域的命名，我们可以适当地选择不同的长度。作用域小的变量（比如临时变量），可以适当地选择短一些的命名方式。除此之外，命名中也可以使用一些耳熟能详的缩写。</li><li>我们可以借助类的信息来简化属性、函数的命名，利用函数的信息来简化函数参数的命名。</li><li>命名要可读、可搜索。不要使用生僻的、不好读的英文单词来命名。除此之外，命名要符合项目的统一规范，不要用些反直觉的命名。</li><li>接口有两种命名方式：一种是在接口中带前缀“I”；另一种是在接口的实现类中带后缀“Impl”。对于抽象类的命名，也有两种方式，一种是带上前缀“Abstract”，一种是不带前缀。这两种命名方式都可以，关键是要在项目中统一。</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>注释的目的就是让代码更容易看懂。只要符合这个要求的内容，你就可以将它写到注释里。总结一下，注释的内容主要包含这样三个方面：做什么、为什么、怎么做。对于一些复杂的类和接口，我们可能还需要写明“如何用”。</li><li>注释本身有一定的维护成本，所以并非越多越好。类和函数一定要写注释，而且要写得尽可能全面、详细，而函数内部的注释要相对少一些，一般都是靠好的命名、提炼函数、解释性变量、总结性注释来提高代码可读性。</li></ul><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><ul><li>函数、类多大才合适？函数的代码行数不要超过一屏幕的大小，比如 50 行。类的大小限制比较难确定。</li><li>一行代码多长最合适？最好不要超过 IDE 的显示宽度。当然，也不能太小，否则会导致很多稍微长点的语句被折成两行，也会影响到代码的整洁，不利于阅读。</li><li>善用空行分割单元块。对于比较长的函数，为了让逻辑更加清晰，可以使用空行来分割各个代码块。</li><li>四格缩进还是两格缩进？我个人比较推荐使用两格缩进，这样可以节省空间，尤其是在代码嵌套层次比较深的情况下。不管是用两格缩进还是四格缩进，一定不要用 tab 键缩进。</li><li>大括号是否要另起一行？将大括号放到跟上一条语句同一行，可以节省代码行数。但是将大括号另起新的一行的方式，左右括号可以垂直对齐，哪些代码属于哪一个代码块，更加一目了然。</li><li>类中成员怎么排列？在 Google Java 编程规范中，依赖类按照字母序从小到大排列。类中先写成员变量后写函数。成员变量之间或函数之间，先写静态成员变量或函数，后写普通变量或函数，并且按照作用域大小依次排列。</li></ul><h3 id="编码技巧"><a href="#编码技巧" class="headerlink" title="编码技巧"></a>编码技巧</h3><ul><li>将复杂的逻辑提炼拆分成函数和类。</li><li>通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。</li><li>函数中不要使用参数来做代码执行逻辑的控制。函数设计要职责单一。</li><li>移除过深的嵌套层次，方法包括：去掉多余的 if 或 else 语句，使用 continue、break、return 关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。</li><li>用字面常量取代魔法数。</li><li>用解释性变量来解释复杂表达式，以此提高代码可读性。</li></ul><h3 id="统一编码规范"><a href="#统一编码规范" class="headerlink" title="统一编码规范"></a>统一编码规范</h3><p>项目、团队，甚至公司，一定要制定统一的编码规范，并且通过 Code Review 督促执行</p><h3 id="如何发现问题"><a href="#如何发现问题" class="headerlink" title="如何发现问题"></a>如何发现问题</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651288681373-29da88a4-d696-4a60-b15a-88694a68a96b.png#clientId=u8d23216e-3a7b-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u1f9c6420&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1083&originWidth=1983&originalType=url&ratio=1&rotation=0&showTitle=false&size=1088243&status=done&style=none&taskId=u5baa07b6-bc7b-4b79-8c8b-af602c72900&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651288686895-1f61962d-589c-48c2-a601-0b8796e8c926.png#clientId=u8d23216e-3a7b-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub537a368&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1083&originWidth=1983&originalType=url&ratio=1&rotation=0&showTitle=false&size=806324&status=done&style=none&taskId=u22e6a7f4-638e-4d56-9360-5f816e42917&title=" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ源码</title>
    <link href="/2022/05/05/RocketMQ/RocketMQ%E6%BA%90%E7%A0%81/"/>
    <url>/2022/05/05/RocketMQ/RocketMQ%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>91-120</p><h1 id="目录分析"><a href="#目录分析" class="headerlink" title="目录分析"></a>目录分析</h1><ul><li>acl 权限相关</li><li>broker broker相关代码</li><li>client </li><li>common 公用代码</li><li>dev 开发相关</li><li>distribution 用来部署RocketMQ的一些东西，bin目录，conf目录等</li><li>docs</li><li>example 案例</li><li>filter 过滤器</li><li>logging 日志打印相关</li><li>nameser NameServer相关代码</li><li>openmessaging 开放消息标准</li><li>remoting RocketMQ的远程网络通信模块，基于netty实现</li><li>srvutil 工具类</li><li>store 消息在Broker上进行存储的代码</li><li>style、test、tools checkstyle代码检查的东西，一些测试相关的类，tools饭的一些命令行监控工具类</li></ul><h2 id="调试配置"><a href="#调试配置" class="headerlink" title="调试配置"></a>调试配置</h2><h3 id="NameServer"><a href="#NameServer" class="headerlink" title="NameServer"></a>NameServer</h3><ol><li>本地创建一个目录，并在其中创建conf,logs,store三个目录</li><li>在代码NameServer.main启动配置环境变量<code>ROCKETMQ_HOME</code>设置值为刚才的路径</li><li>拷贝代码distribution下的broker.conf,logback_nameser.xml到conf目录</li><li>修改log配置文件的目录地址，#{user.home}替换为rocketmq地址</li><li>修改broker.conf目录</li><li>启动NameServer.main()</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1649988261865-c4fb5215-9e83-4b9c-97c5-bfdbae37eb77.png#clientId=u757f1e0d-d2ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=669&id=u2b217d3a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=669&originWidth=522&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46981&status=done&style=none&taskId=u0c855942-fc44-4e50-bdb8-892d4b4db76&title=&width=522" alt="image.png"></p><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><ol><li>找到broker.main配置参数<ol><li>Program arguments: -c #{指定broker.conf地址}</li><li>Environment variables: 配置ROCKETMQ_HOME</li></ol></li><li>distribution目录下的logback-broker.xml放入conf目录</li><li>启动</li></ol><h3 id="模拟调试"><a href="#模拟调试" class="headerlink" title="模拟调试"></a>模拟调试</h3><ol><li>git下载rocketmq-dashboard项目，调整集群ip配置，启动监控</li><li>在example目下中，quickstart调整配置，consumer和producer都手动指定NamesrvAddr：<code>127.0.0.1:9876</code></li><li>producer发送消息，consumer接收，看日志打印是否正常，并且在仪表盘可以看到消息</li></ol>]]></content>
    
    
    <categories>
      
      <category>MQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ概述</title>
    <link href="/2022/05/05/RocketMQ/RocketMQ%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/05/05/RocketMQ/RocketMQ%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<p>49-66 消息中间件的技术深度<br>67-84 高阶功能<br>85-90 优化及运维</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="关键对象"><a href="#关键对象" class="headerlink" title="关键对象"></a>关键对象</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1649682126816-637d7028-c97d-402a-9b61-476d287895f0.png#clientId=uf41c3cac-a754-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=310&id=uee853c37&margin=%5Bobject%20Object%5D&name=image.png&originHeight=310&originWidth=617&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60758&status=done&style=none&taskId=u3af05aac-69b8-4937-a18d-95276c64da4&title=&width=617" alt="image.png"></p><ul><li>NameServer</li></ul><p>负责管理集群里所有的Broker的信息，让使用MQ的系统可以通过他感知集群里有哪些Broker</p><ul><li>Broker集群</li></ul><p>多机器部署集群，并且使用主从架构实现数据多副本存储和高可用</p><ul><li>生产者</li></ul><p>向MQ发送消息的系统</p><ul><li>消费者</li></ul><p>从MQ获取消息消费的系统</p><h3 id="NameServer"><a href="#NameServer" class="headerlink" title="NameServer"></a>NameServer</h3><ol><li><p>NameServer会多机器部署，实现一个集群。保证任何一个机器宕机，其他机器上的NameServer可以继续对外提供服务。</p></li><li><p>每个Broker启动都会向所有的NameServer进行注册，也就是每个NameServer都有一份急群众所有Broker的信息</p></li><li><p>RocketMQ的生产者和消费者自己主动去NameServer拉取Broker信息</p></li><li><p>Broker和NameServer通过心跳机制感知Broker是否宕机</p><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3></li><li><p>RocketMQ的Master-Slave模式采用Salve Broker不停的发送请求到Master Broker去拉取消息。即RocketMQ自身的Mater-Salve模式采取的是Pull模式拉取消息。</p></li><li><p>在写入消息的时候，通常选择Master Broker去写入。但是在拉取消息的时候，可能从Master Broker获取，也有可能从Salve Broker获取，需要根据当时机器的负载情况，Master Broker会给出建议。</p></li><li><p>Salve Broker挂了，影响并不大，读写请求都走Master Broker，但是会导致Master Broker压力变大</p></li><li><p>Master Broker挂了，可以从Salve Broker走数据，但是可能存在部分数据没有同步完成。并且Salve无法自动切换为Master Broker，需要进行运维操作。Master-Salve模式不是彻底的高可用模式，没法实现自动把Salve切换为Master。</p></li><li><p>4.5版本之后，引入了Dledger模式。一个Master Broker可以对应多个Salve Broker。当Master Broker挂掉的时候，通过Dledger技术和Raft协议进行leader选举，直接将一个Salve Broker选举为新的Master Broker。</p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>一个Topic就是一个数据集合，不同类型的数据放入不同的Topic中。</p><h3 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h3><p>在创建Topic的时候需要指定MessageQueue<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1649755255416-65cdadd4-967f-45bf-be2d-33193a9bc69f.png#clientId=uc84901ff-8cd4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=535&id=u874b6904&margin=%5Bobject%20Object%5D&name=image.png&originHeight=535&originWidth=560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=69474&status=done&style=none&taskId=u02193b47-ee52-43eb-b090-5484f93efcd&title=&width=560" alt="image.png"><br>MessageQueue就是一个数据分片机制，通过MessageQueue将一个Topic的数据拆分为很多数据分片，然后每个Broker机器上存储一些MessageQueue，通过这个方式实现Topic数据的分布式存储。</p></li></ol><p>如果某个Broker挂掉了，会导致在一段时间内，每次访问挂掉的Master Broker的时候，会导致访问失败。<br>因此需要开启Producer的开关sendLatencyFaultEnable。会开启一个容错机制，某次访问一个Broker发现网络延迟500ms还无法访问，就会自动回避访问这个Broker一段时间。</p><h3 id="CommitLog"><a href="#CommitLog" class="headerlink" title="CommitLog"></a>CommitLog</h3><p>当生产者的消息发送到Broker上的时候，Broker会将消息直接写入磁盘的一个日志文件，叫CommitLog。<br>CommitLog是很多磁盘文件，每个文件限定最多1GB，Broker收到消息之后，会直接追加写入文件末尾。如果一个CommitLog满了1GB，会创建一个新的CommitLog文件。</p><h3 id="消费组"><a href="#消费组" class="headerlink" title="消费组"></a>消费组</h3><p>消费组就是一组消费者。<br>假如有一个Topic叫TopicA，然后存在系统A和系统B需要消费这个Topic的数据。<br>那么系统A和系统B就会分别起一个消费组的名字。</p><h2 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h2><h3 id="发送消息类型"><a href="#发送消息类型" class="headerlink" title="发送消息类型"></a>发送消息类型</h3><ul><li>同步消息</li></ul><p>消息发送到MQ之后，会等待消息返回结果</p><ul><li>异步消息</li></ul><p>消息发送后，会继续往下走。当返回消息的时候，会执行回调方法</p><ul><li>单向消息</li></ul><p>消息发送后，不会关注MQ是否返回结果</p><h3 id="消费消息类型"><a href="#消费消息类型" class="headerlink" title="消费消息类型"></a>消费消息类型</h3><ul><li>Push消费模式</li></ul><p>Broker主动把消息发送给你的消费者，你的消费者是被动的接收Broker推送的消息进行处理。<br>Push消费模式的底层也是基于消费者主动拉取的模式实现，只是Broker会尽可能实时的将新消息交给消费者机器进行处理，他的消息时效性更好。<br>**请求挂起和长轮询**<br>当消费者请求发送到Broker，结果发现没有新的消息，就会让请求线程挂起，默认15s。然后期间会有后台线程每隔一会就检查一下是否有新的消息给你。如果在这个挂起的过程中，如果有新的消息到达了，会主动唤醒挂起的线程。</p><ul><li>Pull消费模式</li></ul><p>Broker不会主动推送消息给Consumer，而是消费者主动请求到Broker拉取消息</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="生产者发送消息"><a href="#生产者发送消息" class="headerlink" title="生产者发送消息"></a>生产者发送消息</h3><h3 id="Broker持久化消息"><a href="#Broker持久化消息" class="headerlink" title="Broker持久化消息"></a>Broker持久化消息</h3><p>当Broker收到消息的时候，会吧这个消息直接写入CommitLog。<br>Broker对Topic下的每个MessageQueue都有一些系列的ConsumerQueue文件。即在Broker磁盘上存在固定格式的一系列文件：$HOME&#x2F;store&#x2F;consumerqueue&#x2F;{topic}&#x2F;{queueId}&#x2F;{fileName}<br>目录的含义为：对存储在这台Broker机器上的Topic下的一个MessageQueue，有很多ConsumerQueue文件，这个consumerQueue文件里存储的是一条消息对应在CommitLog中offset的偏移量。<br>ConsumerQueue中存储的每条数据不只是消息在CommitLog中offset的偏移量，还包含了消息的长度以及tag hashcode。一条数据20个字节，每个ConsumerQueue文件保存30万条数据，大概每个文件时5.72MB。</p><p>Broker是基于操作系统的PageCache和顺序写两个机制来提升CommitLog文件的性能。<br>首先，Broker以顺序写的方式将消息写入CommitLog磁盘文件，也就是每次写入就在文件末尾追加一条数据，对文件进行顺序写的性能要比文件随机写的性能提升很多。<br>其次，数据写入CommitLog文件的时候，并不是直接写入底层的物理磁盘文件，而是先进入OS的PageCache内存缓存中，然后后续由OS的后台线程选一个时间，异步化将OS PageCache内存缓冲中的数据刷入底层的磁盘文件。<br>总结的策略为：磁盘文件顺序写+OS PageCache写入+OS 异步刷盘的策略</p><p>刷盘机制</p><ul><li>异步刷盘</li></ul><p>异步刷盘需要通过后台线程将PageCache刷入磁盘，消息吞吐量非常高，但是可能会数据丢失。</p><ul><li>同步刷盘</li></ul><p>每次消息会强制刷入磁盘再返回ack给producer。如果broker还没有来得及把数据同步刷入磁盘，然后他自己挂了，那么此时对producer来说会感知到消息发送失败了，然后你只要不停的重试发送就可以了，直到有slave broker切换成master broker重新让你可以写入消息，此时可以保证数据是不会丢的。<br>但是这样会导致写入性能急剧下降，消息的吞吐量急剧下降。</p><h3 id="基于DLedger技术的Broker主从同步原理"><a href="#基于DLedger技术的Broker主从同步原理" class="headerlink" title="基于DLedger技术的Broker主从同步原理"></a>基于DLedger技术的Broker主从同步原理</h3><blockquote><p>Broker实现高可用，就需要一个Broker组。Leader Broker可以写入数据，然后在接收数据后，直接把数据同步给其他Follow Broker。这样一个条数据在Broker组里都存在副本，如果Leader Broker宕机，可以直接让其他的Follower Broker自动切换为新的Leader Broker。</p></blockquote><ol><li>DLedger首先自身有一个CommitLog机制，接收数据后，会自己写入到CommitLog磁盘文件中。如果基于DLedger实现高可用架构，实际上就是用DLedger的CommitLog替换Broker的CommitLog。</li><li>DLedger基于Raft协议进行Leader Broker选举。<ol><li>确保有人可以成为Leader的核心机制就是一轮选举不出来Leader的话，就让大家随机休眠</li><li>先苏醒的人会投票给自己</li><li>然后其他人苏醒发现自己受到选票就会直接投票给那个人。依靠这个随机休眠机制</li><li>基本上几轮投票后可以快速选举一个Leader。</li></ol></li><li>DLedger在进行同步的时候采用Raft协议进行多副本同步。数据同步会分为两个阶段，一个是uncommitted阶段，一个是commited阶段</li><li>Leader Broker的DLedger收到一条数据只会，会标记为uncommitted状态。</li><li>然后通过DledgerServer组件把这个uncommitted数据发送给Follower Broker的DLedgerServer</li><li>Follower Broker的DLedgerServer收到uncommitted消息之后，必须返回一个ack给Leader Broker的DLedgerServer</li><li>如果Leader Broker收到超过半数的Follower Broker返回的ack之后，会将消息标记为commited状态</li><li>然后Leader Broker的DLedgerServer就会发送commited消息给Follower broker机器的DLedgerServer，让他们也吧消息标记为commited状态</li><li>如果Leader Broker挂了，剩下的两个Follower Broker会重新发起选举。选举完之后，会对没有完成的数据同步进行一些恢复性操作，保证数据不会丢。</li></ol><h3 id="消费者获取消息处理"><a href="#消费者获取消息处理" class="headerlink" title="消费者获取消息处理"></a>消费者获取消息处理</h3><p>不同的系统应该设置不同的消费组，如果不同的消费组订阅了同一个Topic，对Topic里的一条消息，每个消费组都会获取到这个消息。</p><p>对于消费组内部，存在两种模式</p><ul><li>集群模式</li></ul><p>默认情况是集群模式。一个消费组获取到了一条消息，只会交给组内的一台机器去处理，而不是每个机器都可以回去。</p><ul><li>广播模式</li></ul><p>消费组回去到了一条消息，组内的每台机器都可以回去到这条消息。<br>广播模式其实用的比较少。</p><p><strong>消费者与MessageQueue的关系</strong><br>大致认为一个Topic的多个MessageQueue会均匀分摊给消费组内的多个机器去消费。这里的一个原则就是，一个MessageQueue只能被一个消费机器去处理，但是一个消费机器可以负责多个MessageQueue。</p><ol><li>消费者机器发送拉取请求到Broker，告诉Broker拉取哪个MessageQueue中的消息<ol><li>如果之前没有拉取过消息，就从MessageQueue第一条消息拉取</li></ol></li><li>Broker会找到MessageQueue对应的ConsumerQueue，从里面找到第一条消息的offset</li><li>Broker根据找到的地址，去CommitLog根据offset读取这个消息的数据返回给消费者机器</li><li>消费者获取消息后，进行注册函数的回调</li><li>消费者处理完消息后，消费者机器会提交一个目前的消费进度到Broker上</li><li>Broker会存储消费进度。</li></ol><p>如果消费组中出现机器宕机或者机器扩容的情况，就会进入rabalance环节。重新给各个消费机器分配他们要处理的MessageQueue。</p><h3 id="消费者拉取消息策略"><a href="#消费者拉取消息策略" class="headerlink" title="消费者拉取消息策略"></a>消费者拉取消息策略</h3><ol><li>进行消息拉取的时候先读os cache里少量的ConsumerQueue的数据</li><li>根据读取到的offset去CommitLog里读取消息的完整数据<ol><li>如果读取的是刚刚写入CommitLog的数据，他们很大概率还停留在os cache中，此时可以直接从中读取到数据。由于是内存读，性能很高</li><li>如果读取的是较早之前的数据，可能已经被刷入磁盘了。那么只能从磁盘上读取。</li></ol></li></ol><p>如果消费速度跟得上生产速度没有产生消息堆积，每次获取就都是从os cache获取，效率很高。但是如果消息堆积，消费的很慢，相当于每次都是从磁盘读取之前的消息，新消息一直堆积，然后罗盘，效率就很低。</p><p><strong>从Salve Broker拉取消息的时机</strong><br>Master Broker会对比消费机器当前没有拉取的消息的数量和大小，以及最多可以存放在os cache内存里面的消息的大小。如果没有拉取的消息超过了最大能使用的内存的量。那么说明后序大概率会频繁的从磁盘加载数据，此时就会让消费机器下次从Salve Broker加载数据。</p><h3 id="RocketMQ基于Netty的扩展"><a href="#RocketMQ基于Netty的扩展" class="headerlink" title="RocketMQ基于Netty的扩展"></a>RocketMQ基于Netty的扩展</h3><ul><li>Reactor主线程在端口上监听Producer建立连接的请求，建立长连接</li><li>Reactor线程池并发的监听多个连接的请求是否到达</li><li>Worker请求并发的对多个请求进行预处理</li><li>业务线程池并发的对多个请求进行磁盘读写业务操作</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1649837516229-965c6e38-c21c-41a2-8dc2-b7156574ddff.png#clientId=u8db399c4-3bf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=286&id=u35dbe321&margin=%5Bobject%20Object%5D&name=image.png&originHeight=286&originWidth=611&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54824&status=done&style=none&taskId=u808f32f5-0d0b-4a5a-8894-5036c884de3&title=&width=611" alt="image.png"></p><h3 id="RocketMQ基于mmap读写磁盘文件"><a href="#RocketMQ基于mmap读写磁盘文件" class="headerlink" title="RocketMQ基于mmap读写磁盘文件"></a>RocketMQ基于mmap读写磁盘文件</h3><h1 id="深入RocketMQ"><a href="#深入RocketMQ" class="headerlink" title="深入RocketMQ"></a>深入RocketMQ</h1><h2 id="MQ消息丢失"><a href="#MQ消息丢失" class="headerlink" title="MQ消息丢失"></a>MQ消息丢失</h2><h3 id="消息可能丢失的环节"><a href="#消息可能丢失的环节" class="headerlink" title="消息可能丢失的环节"></a>消息可能丢失的环节</h3><ul><li>生产者推送消息到RocketMQ的时候消息丢失<ul><li>网络波动</li><li>Leader Broker故障，其他Follower Broker正在尝试切换为leader的过程</li></ul></li><li>消息到达后，RocketMQ自身丢失<ul><li>还未进行os cache刷盘的时候，机器故障</li><li>刷盘后，磁盘物理损坏</li></ul></li><li>消费系统得到消息<ul><li>当mq消费者是自动提交已消费的offset时，消费者接收到了消息，但是出现了后续步骤异常，但是RocketMQ已经标记为commited</li></ul></li></ul><h3 id="生产者消息零丢失方案"><a href="#生产者消息零丢失方案" class="headerlink" title="生产者消息零丢失方案"></a>生产者消息零丢失方案</h3><ul><li>同步发送消息+重试机制</li><li>通过RocketMQ的事务消息的功能(建议)</li></ul><p>RocketMQ的事务消息</p><ol><li>首先消费者发送一条half消息到MQ，half消息本质上就是mq消息，只是消息的状态是half。此时的消费者看不到half消息</li><li>生产者等待这个half消息的写入成功的响应通知<ol><li>half消息写入失败，生产者侧应该进行业务回滚</li><li>half消息写入成功，生产者就完成了自己任务。<ol><li>如果生产者后续异常，想要消息回滚。就重新对RocketMQ发送一个rollback请求。RocketMQ会将half消息删除</li><li>如果生产者本地事务提交，就可以发送一个commit请求给MQ，让MQ对之前的half消息进行commit操作。消费者就可以看到这个消息了。</li></ol></li><li>发送half消息成功，但是没有收到响应。RocketMQ会有一个补偿流程：自己去扫描处于half状态的消息，如果超过了一定时间没有对消息执行commit&#x2F;rollback操作，会回调生产者的接口。</li><li>如果rollback或者commit发送失败，由于RocketMQ的消息是half状态，后面会继续回调接口。</li></ol></li></ol><p>half消息原理</p><ol><li>生产者发送消息到Broker，Broker会定位到Topic的一个MessageQueue，然后定位到一台机器上去。</li><li>准备写入CommitLog，以及对应的ComsumerQueue。此时发现是half消息，就不写入ComsumerQueue，而是写入内部的<code>RMQ_SYS_TRANS_HALF_TOPIC</code></li><li>如果写入消息成功了，就会返回给生产者说成功了</li><li>如果发生异常，没有执行rollback或者commit，此时会有后台线程定时扫描<code>RMQ_SYS_TRANS_HALF_TOPIC</code>中的half消息，如果超过一定时间就会回调生产者接口。如果一直没有执行commit&#x2F;rollback，最多15次回调，超过之后会自动标记消息为rollback。</li><li>如果执行rollback操作，本质是用一个OP操作标记half消息的状态。内部会生成一个rollback OP记录到<code>OP_TOPIC</code>中，来标记half是rollback了。</li><li>如果执行commit操作，就会在<code>OP_TOPIC</code>中写入一条记录，标记half消息已经是commit状态。然后需要将<code>RMQ_SYS_TRANS_HALF_TOPIC</code>中的half消息写入原本Topic对应的ConsumerQueue中。消费者就可以正常看到消息<h3 id="Broker消息零丢失方案"><a href="#Broker消息零丢失方案" class="headerlink" title="Broker消息零丢失方案"></a>Broker消息零丢失方案</h3>同步刷盘+Raft协议主从同步</li></ol><p>broker配置文件：flushDiskType</p><ul><li>SYNC_FLUSH 同步刷盘</li><li>ASYNC_FLUSH 异步刷盘，默认</li></ul><p>主从架构模式：、<br>必须让一个Master Broker有一个Slave Broker去同步他的数据，而且一条消息写入成功，必须让Salve Broker也写入成功，保证数据有多个副本的冗余</p><h3 id="Consumer消息零丢失方案"><a href="#Consumer消息零丢失方案" class="headerlink" title="Consumer消息零丢失方案"></a>Consumer消息零丢失方案</h3><p>手动提交offset+自动故障转移</p><p>注意：不能异步消费信息。</p><h3 id="消息零丢失方案的利弊"><a href="#消息零丢失方案的利弊" class="headerlink" title="消息零丢失方案的利弊"></a>消息零丢失方案的利弊</h3><p>劣势：整个消息流转链路的性能大幅度下降，让MQ的吞吐量大幅下降</p><p>适用场景：仅针对金钱，核心数据相关的链路使用</p><h2 id="MQ消息重复消费"><a href="#MQ消息重复消费" class="headerlink" title="MQ消息重复消费"></a>MQ消息重复消费</h2><h3 id="消息重复环节"><a href="#消息重复环节" class="headerlink" title="消息重复环节"></a>消息重复环节</h3><ul><li>生产者重复推送消息<ul><li>系统调用</li><li>网络延时</li><li>自身业务重试机制</li></ul></li><li>消费者重复消费<ul><li>重启，宕机等情况</li></ul></li></ul><h3 id="幂等性机制"><a href="#幂等性机制" class="headerlink" title="幂等性机制"></a>幂等性机制</h3><p>一个接口重复调用多次，自己本身的系统数据是正常的，不会多出来一些重复的数据。</p><ul><li>业务判断</li></ul><p>当系统接口被重试调用的时候，最开始应该发送消息到MQ去查询一遍业务消息是否在MQ中存在。</p><ul><li>Reids缓存的幂等性机制</li></ul><p>将业务id存一份在redis，重复调用的时候查询一遍。</p><h2 id="MQ消息处理失败"><a href="#MQ消息处理失败" class="headerlink" title="MQ消息处理失败"></a>MQ消息处理失败</h2><h3 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h3><p>当消费异常的时候，返回RECONSUME_LATER，RocketMQ会进行重试。RocketMQ会将这批消息放入这个消费组的重试队列中。比如你的消费组的名称是<code>VoucherConsumerGroup</code>，意思是优惠券系统的消费组，那么他会有一个<code>%RETRY%VoucherConsumerGroup</code>这个名字的重试队列。<br>默认最多重试16次，每次重试之间的间隔时间不一样。<br>如果超过重试次数依旧失败，这批消息会进入死信队列，名称为<code>%DLQ%VoucherConsumerGroup</code></p><h3 id="死信队列消费"><a href="#死信队列消费" class="headerlink" title="死信队列消费"></a>死信队列消费</h3><p>需要另外起一个后台线程，订阅<code>%DLQ%VoucherConsumerGroup</code>这个死信队列。对死信队列中的消息一直重试。</p><h2 id="MQ消息乱序"><a href="#MQ消息乱序" class="headerlink" title="MQ消息乱序"></a>MQ消息乱序</h2><p>原本有序的消息，可能会分到不同的MessageQueue中，不同机器上部署的consumer可能会用混乱的顺序从不同的MessageQueue连获取消息然后处理。</p><p>解决方案</p><ol><li>让同一个订单发送消息的时候选择同一个MessageQueue</li><li>消费者获取消息处理的时候，也需要有序获取</li><li>出现异常只能返回<code>SUSPEND_CURRENT_QUEUE_A_MOMENT</code>，会让这批消息等一会处理，而不是放入重试队列直接处理下一批消息</li></ol><h2 id="MQ消息过滤"><a href="#MQ消息过滤" class="headerlink" title="MQ消息过滤"></a>MQ消息过滤</h2><p>RocketMQ的数据过滤机制。</p><ol><li>在发送消息的时候，可以给消息设置tag和属性</li><li>在消费数据的时候根据tag和属性进行过滤</li></ol><h2 id="MQ延迟队列"><a href="#MQ延迟队列" class="headerlink" title="MQ延迟队列"></a>MQ延迟队列</h2><p>延迟消息<br>生产者发送一条消息到MQ里面后，可以指定这条消息是延迟消息，指定一个时间，然后消费者才可以扫描到。</p><h1 id="MQ运维"><a href="#MQ运维" class="headerlink" title="MQ运维"></a>MQ运维</h1><h2 id="权限机制"><a href="#权限机制" class="headerlink" title="权限机制"></a>权限机制</h2><p>自带功能</p><h2 id="消息轨迹跟踪"><a href="#消息轨迹跟踪" class="headerlink" title="消息轨迹跟踪"></a>消息轨迹跟踪</h2><p>自带功能</p><h2 id="消息堆积"><a href="#消息堆积" class="headerlink" title="消息堆积"></a>消息堆积</h2><ol><li>先定位到消费者的问题,快速恢复 2.怎么去解决堆积消费问题 </li><li>消息可丢失直接部署消费者丢弃消息 </li><li>消息不能丢失,消息topic对应的messagequeue较多消费者consumer较少每个消费者消费多个messagequeue,此时可以consumer加机器来加快消费 </li><li>消息不能丢失,topic指定的messagequeue过小,此时可新建一个topic调大messagequeue的数量,临时部署服务来消费堆积的topic</li></ol><h2 id="集群挂掉的情况保证高可用"><a href="#集群挂掉的情况保证高可用" class="headerlink" title="集群挂掉的情况保证高可用"></a>集群挂掉的情况保证高可用</h2><p>需要自己进行消息持久化</p><h2 id="MQ限流"><a href="#MQ限流" class="headerlink" title="MQ限流"></a>MQ限流</h2><p>桶令牌算法</p><h2 id="从Kafka迁移到RocketMQ"><a href="#从Kafka迁移到RocketMQ" class="headerlink" title="从Kafka迁移到RocketMQ"></a>从Kafka迁移到RocketMQ</h2><ol><li>双写机制。先再所有的Producer系统中引入双写代码，同时往Kafka和RocketMQ中写入消息。然后需要经过一段时间，大概一周左右。</li><li>双读机制。所有的Consumer系统都需要同时从Kafka和RocketMQ读取消息，用一模一样的逻辑消费。只是在RocketMQ落库改变数据等操作的时候，不执行具体操作。</li><li>在Consumer侧两种队列消费的时候，进行消费统计，同时对RocketMQ读取到的消息处理之后的结果写入一个临时存储中。然后进行实际比对。</li><li>比对一致后，正式切换。停机Producer系统，然后修改重新上线，修改为仅写入RocketMQ。然后将Consumer系统下线，修改基于RocketMQ消费、计算。</li></ol>]]></content>
    
    
    <categories>
      
      <category>MQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ源码</title>
    <link href="/2022/05/05/RocketMQ/RocketMQ%E8%83%8C%E6%99%AF%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/05/05/RocketMQ/RocketMQ%E8%83%8C%E6%99%AF%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="整体功能"><a href="#整体功能" class="headerlink" title="整体功能"></a>整体功能</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1649666502314-5c6c0930-2919-412b-a30c-d665a64659ae.png#clientId=ue46e4ca0-0990-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=447&id=ucef7d3f7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=447&originWidth=604&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59758&status=done&style=none&taskId=u6421d62f-460a-4f77-b962-b6e2ab9034b&title=&width=604" alt="image.png"><br>服务器数据库部署情况<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1649668320194-5947adcd-af6b-4756-9e7b-42bbd145bc82.png#clientId=ue46e4ca0-0990-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=330&id=u2e7119f2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=330&originWidth=583&originalType=binary&ratio=1&rotation=0&showTitle=false&size=72678&status=done&style=none&taskId=u6da2cf4b-e8d2-4b80-87ce-e6c917b8514&title=&width=583" alt="image.png"><br>服务器<br>4核8G的机器一般每秒抗几百请求没问题，200~300的请求CPU资源使用率不超过50%<br>数据库<br>16核32GSSD的数据库，在极限的时候每秒上万，一般在每秒4.5K的时候没有什么问题。</p><p>思考</p><ol><li>系统业务流程</li><li>系统用户量，用户使用习惯导致系统的请求负载量<ol><li>核心业务流程性能</li><li>核心流程每个步骤耗时</li><li>核心流程的性能，是否有优化空间</li><li>高峰期，服务器和数据库负载高，造成影响</li></ol></li></ol><p>订单支付流程<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1649669207521-6e2567af-a654-484f-8178-8bfe6809f784.png#clientId=ue46e4ca0-0990-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=529&id=u286621ff&margin=%5Bobject%20Object%5D&name=image.png&originHeight=529&originWidth=569&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61198&status=done&style=none&taskId=ufd3465f2-1b21-4f3a-8f4d-f3c5c41cdc3&title=&width=569" alt="image.png"><br>订单退款流程<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1649669607261-1b5bd48a-2889-4126-a92d-052af3ec1b5a.png#clientId=ue46e4ca0-0990-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=539&id=u3f1788fc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=539&originWidth=575&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60395&status=done&style=none&taskId=u32f64152-64e3-4ca5-9c94-5c92c04d78b&title=&width=575" alt="image.png"></p><h1 id="MQ部署压测"><a href="#MQ部署压测" class="headerlink" title="MQ部署压测"></a>MQ部署压测</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1649731926008-7c77b31a-5ace-4b3e-8621-e62904d91462.png#clientId=u30317928-2cbc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=321&id=uaaf6036c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=321&originWidth=592&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59853&status=done&style=none&taskId=ufcd32261-6760-495b-8d5b-f80858b2a87&title=&width=592" alt="image.png"></p><h2 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h2><h3 id="OS内核参数调整"><a href="#OS内核参数调整" class="headerlink" title="OS内核参数调整"></a>OS内核参数调整</h3><ol><li>vm.overcommit_memory</li></ol><ul><li>0</li></ul><p>在中间件申请内存的时候，os内核会检查可用内存是否足够，如果足够就会分配内存，如果剩余内存不太够，就会拒绝申请，导致申请内存失败</p><ul><li>1</li></ul><p>把所有可以用的物理内存都允许分配给你，只要有内存，就给你用</p><ul><li>2</li></ul><ol start="2"><li>vm.max_map_count</li></ol><p>参数会影响中间件系统可以开启的线程的数量</p><ol start="3"><li>vm.swappiness</li></ol><p>控制进程的swap行为。os会把一部分磁盘空间作为swap区域，然后有的进程现在不活跃，就会被系统调整为睡眠状态，把进程中的数据放入磁盘的swap区域，然后让这个进程把原来占用的内存空间腾出来，交给其他活跃运行的进程使用。</p><ul><li>0</li></ul><p>尽量别把任何一个进程放入磁盘swap区域，尽量大家都用物理内存</p><ul><li>100</li></ul><p>尽量把一些进程放到磁盘swap区域，内存腾出去给活跃的进程</p><ol start="4"><li>ulimit</li></ol><p>用来控制linux上的追到文件连接数，默认1024。大量频繁的读写磁盘文件的时候，或者进行网络通信的时候和这个参数有关。</p><h2 id="压测指标"><a href="#压测指标" class="headerlink" title="压测指标"></a>压测指标</h2><ol><li>RocketMQ的TPS和消息延时</li><li>cpu负载情况</li><li>内存使用率</li><li>JVM GC频率</li><li>磁盘IO负载</li><li>网卡流量</li></ol>]]></content>
    
    
    <categories>
      
      <category>MQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis方案</title>
    <link href="/2022/05/04/Redis/Redis%E6%96%B9%E6%A1%88/"/>
    <url>/2022/05/04/Redis/Redis%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul><li>热key</li><li>大value</li><li>缓存穿透</li><li>缓存过期和失效</li><li>LRU被清理</li><li>缓存雪崩</li><li>数据库一致性</li></ul><h1 id="读多写少的场景"><a href="#读多写少的场景" class="headerlink" title="读多写少的场景"></a>读多写少的场景</h1><ul><li>数据库+缓存双写</li><li>冷热数据分离，设置过期时间+过期时间自动延期</li><li>load db&amp;write cache</li><li>缓存惊群解决方案，随机过期时间</li><li>缓存穿透解决方案，db load null 设置 cache empty data</li><li>数据库&amp;缓存一致性方案，写和读，分布式锁+读double check</li><li>分布式锁串行转并发方案，读操作的分布式锁 tryLock,自动超时从缓存读</li></ul><h1 id="购物车-写多读多的场景"><a href="#购物车-写多读多的场景" class="headerlink" title="购物车-写多读多的场景"></a>购物车-写多读多的场景</h1><p>购物车数据并不很重要，可以丢失部分<br>将缓存作为主数据存储，抗高并发读写，落库异步</p><h1 id="库存-写多读多的场景"><a href="#库存-写多读多的场景" class="headerlink" title="库存-写多读多的场景"></a>库存-写多读多的场景</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="缓存分片"><a href="#缓存分片" class="headerlink" title="缓存分片"></a>缓存分片</h3><p>问题：<br>缓存里的库存数据，如果是大促活动，秒杀等场景，瞬时高并发的操作一个商品的库存，必然会导致对缓存集群里某个redis节点造成过大的压力，瞬时流量倾斜</p><p>处理：<br>商品库存有100个的话，拆分为10个分片，每个分片10个。redis集群假如有5个节点，可以把10个分片负载分摊到各个节点上。</p><p>库存分片数量一般和redis集群节点数量差不多。</p><p>库存入库 - 渐进式设置库存<br>假设900个库存，3个分片节点。每个预计是分配300个。但是不会一次性设置300个。而是根据数量，如果数量过多，将一个节点设置的库存分为多个组，比如10组，进行分批次入库。<br>避免设置时，redis节点挂掉一个，导致只有2个节点正常，压力倾斜</p><p>库存扣减<br>分桶库存扣减方案</p><p>渐进式同步</p><h1 id="hot-key"><a href="#hot-key" class="headerlink" title="hot key"></a>hot key</h1><p>使用HotKey探测系统</p><h1 id="大value"><a href="#大value" class="headerlink" title="大value"></a>大value</h1><p>超过1mb(假设)的值，进行监控。自动进行监控和报警，还可以自动处理value，拆分为多个kv</p><ol><li>通过crontab定时调度shell脚本，每天通过rdbtools工具解析Redis的rdb文件，过滤rdb文件中的大key导出为csv文件，然后SQL倒入csv文件存储MySQL</li><li>通过canal监听MySQL的binlog日志，发送增量数据到RocketMQ，RocketMQ的消费者进行消费</li><li>消息中包含大key的db索引，key的名称、大小、类型等消息，消费者将大key的信息通过邮件、钉钉等方式通知开发人员</li></ol><h1 id="Redis内存回收"><a href="#Redis内存回收" class="headerlink" title="Redis内存回收"></a>Redis内存回收</h1><p>Redis内存中的数据达到maxmemory指定的数值的时候，触发回收策略。</p><p>方案1<br>通过redis的发布订阅机制，与键空间通知特性，完成当key被回收时的触发。</p><h1 id="数据库与缓存异步同步最终一致性方案"><a href="#数据库与缓存异步同步最终一致性方案" class="headerlink" title="数据库与缓存异步同步最终一致性方案"></a>数据库与缓存异步同步最终一致性方案</h1><p>canal监听MySQL的binlog日志，发送给RocketMQ进行操作缓存。</p><h1 id="Redis集群故障自动探测方案"><a href="#Redis集群故障自动探测方案" class="headerlink" title="Redis集群故障自动探测方案"></a>Redis集群故障自动探测方案</h1><p>做redis操作切面，判断 是连接波动还是断开连接，如果一段时间内频繁出现，认为是redis集群故障。就会设置为hotkey，针对hotkey在获取数据的时候，降级为本地缓存。</p><h1 id="常见限流方案"><a href="#常见限流方案" class="headerlink" title="常见限流方案"></a>常见限流方案</h1><h2 id="计数器算法"><a href="#计数器算法" class="headerlink" title="计数器算法"></a>计数器算法</h2><h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis原理</title>
    <link href="/2022/05/04/Redis/Redis%E5%8E%9F%E7%90%86/"/>
    <url>/2022/05/04/Redis/Redis%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="单机版内核"><a href="#单机版内核" class="headerlink" title="单机版内核"></a>单机版内核</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651849070632-8e114bb9-5fc9-4770-bf9e-8bd13243e7de.png#clientId=uad783988-dbb9-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u33a2bc35&margin=%5Bobject%20Object%5D&name=Redis%20Server%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86.png&originHeight=782&originWidth=1893&originalType=binary&ratio=1&rotation=0&showTitle=false&size=132513&status=done&style=none&taskId=u8924894d-e68b-457b-9be6-2b681392efb&title=" alt="Redis Server运行原理.png"></p><ul><li>网络通信模型</li><li>请求缓冲</li><li>命令表</li><li>持久化机制<h2 id="基于文件事件的网络通信模型"><a href="#基于文件事件的网络通信模型" class="headerlink" title="基于文件事件的网络通信模型"></a>基于文件事件的网络通信模型</h2><h3 id="网络通信模型"><a href="#网络通信模型" class="headerlink" title="网络通信模型"></a>网络通信模型</h3></li></ul><ol><li>Redis Server启动的时候，有一个Socket专门用于监听建立连接的端口。Redis Client尝试与Redis Server建立连接的时候，会产生一个建立连接的请求，发生<code>op_readable</code>事件，然后抽象成文件事件。</li><li>收到连接请求，由事件分发器分发给连接应答处理器，与客户端进行<code>TCP三次握手</code>建立连接后，才算建立网络连接</li></ol><h3 id="为什么Redis串行化单线程模型可以抗高并发"><a href="#为什么Redis串行化单线程模型可以抗高并发" class="headerlink" title="为什么Redis串行化单线程模型可以抗高并发"></a>为什么Redis串行化单线程模型可以抗高并发</h3><p>大量的请求在短时间内建立很多连接，通过IO多路复用程序同时监听。一秒里几千个请求过来，串行化积压，redis基于存内存进行数据操作，几千个请求在1s内处理完毕。每个请求不需要去写磁盘文件，调用数据库，所以并发能力很高。</p><h1 id="集群模式内核原理"><a href="#集群模式内核原理" class="headerlink" title="集群模式内核原理"></a>集群模式内核原理</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651905999154-43fbfa03-bd6b-4b92-aa11-f3c2bfabaa4a.png#clientId=ucf423a46-8d5a-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u8a5760b7&margin=%5Bobject%20Object%5D&name=Redis%E9%9B%86%E7%BE%A4%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86.png&originHeight=1143&originWidth=2039&originalType=binary&ratio=1&rotation=0&showTitle=false&size=194608&status=done&style=none&taskId=u36a2645c-a336-40f4-b3d5-d598b81d915&title=" alt="Redis集群内核原理.png"></p><ul><li>组成集群，启动通信</li><li>槽位分配</li><li>客户端指令查找流程</li><li>扩容时slot转移</li></ul><h1 id="主从架构原理"><a href="#主从架构原理" class="headerlink" title="主从架构原理"></a>主从架构原理</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651912273200-010d0282-27de-412f-8144-cfd93f9fe310.png#clientId=u647f0982-b218-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=uc5300441&margin=%5Bobject%20Object%5D&name=Redis%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86.png&originHeight=818&originWidth=1907&originalType=binary&ratio=1&rotation=0&showTitle=false&size=138534&status=done&style=none&taskId=u9d70e5e1-001a-4ca5-96a6-cdf1ac63030&title=" alt="Redis主从架构原理.png"></p><ul><li>主从数据结构</li><li>sync和psync</li><li>故障探测和下线</li><li>选举机制和故障转移</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis进阶</title>
    <link href="/2022/05/04/Redis/Redis%E8%BF%9B%E9%98%B6/"/>
    <url>/2022/05/04/Redis/Redis%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<p>reids单机-&gt;一主多从(主从架构)-&gt;redis cluster(多master + 读写分离 + 高可用)<br>redis自带压测工具<code>redis-benchmark</code></p><h1 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h1><p>单机redis的持久化机制</p><h2 id="持久化机制概述"><a href="#持久化机制概述" class="headerlink" title="持久化机制概述"></a>持久化机制概述</h2><p>如果我们想要redis仅仅作为纯内存的缓存来用，那么可以禁止RDB和AOF所有的持久化机制<br>通过RDB或AOF，都可以将redis内存中的数据给持久化到磁盘上面来，然后可以将这些数据备份到别的地方去，比如说阿里云，云服务<br>如果redis挂了，服务器上的内存和磁盘上的数据都丢了，可以从云服务上拷贝回来之前的数据，放到指定的目录中，然后重新启动redis，redis就会自动根据持久化数据文件中的数据，去恢复内存中的数据，继续对外提供服务<br>如果同时使用RDB和AOF两种持久化机制，那么在redis重启的时候，会使用AOF来重新构建数据，因为AOF中的数据更加完整</p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>RDB持久化机制，对redis中的数据执行周期性的持久化</p><p>优点</p><ol><li>RDB会生成多个数据文件，每个数据文件都代表了某一个时刻中redis的数据，这种多个数据文件的方式，非常适合做冷备，可以将这种完整的数据文件发送到一些远程的安全存储上去，比如说Amazon的S3云服务上去，在国内可以是阿里云的ODPS分布式存储上，以预定好的备份策略来定期备份redis中的数据</li><li>RDB对redis对外提供的读写服务，影响非常小，可以让redis保持高性能，因为redis主进程只需要fork一个子进程，让子进程执行磁盘IO操作来进行RDB持久化即可</li><li>相对于AOF持久化机制来说，直接基于RDB数据文件来重启和恢复redis进程，更加快速</li></ol><p>缺点</p><ol><li>如果想要在redis故障时，尽可能少的丢失数据，那么RDB没有AOF好。一般来说，RDB数据快照文件，都是每隔5分钟，或者更长时间生成一次，这个时候就得接受一旦redis进程宕机，那么会丢失最近5分钟的数</li><li>RDB每次在fork子进程来执行RDB快照数据文件生成的时候，如果数据文件特别大，可能会导致对客户端提供的服务暂停数毫秒，或者甚至数秒</li></ol><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>AOF机制对每条写入命令作为日志，以append-only的模式写入一个日志文件中，在redis重启的时候，可以通过回放AOF日志中的写入指令来重新构建整个数据集</p><p>优点</p><ol><li>AOF可以更好的保护数据不丢失，一般AOF会每隔1秒，通过一个后台线程执行一次fsync操作，最多丢失1秒钟的数据</li><li>AOF日志文件以append-only模式写入，所以没有任何磁盘寻址的开销，写入性能非常高，而且文件不容易破损，即使文件尾部破损，也很容易修复</li><li>AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。因为在rewrite log的时候，会对其中的指导进行压缩，创建出一份需要恢复数据的最小日志出来。再创建新日志文件的时候，老的日志文件还是照常写入。当新的merge后的日志文件ready的时候，再交换新老日志文件即可。</li><li>AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。比如某人不小心用flushall命令清空了所有数据，只要这个时候后台rewrite还没有发生，那么就可以立即拷贝AOF文件，将最后一条flushall命令给删了，然后再将该AOF文件放回去，就可以通过恢复机制，自动恢复所有数据</li></ol><p>缺点</p><ol><li>对于同一份数据来说，AOF日志文件通常比RDB数据快照文件更大</li><li>AOF开启后，支持的写QPS会比RDB支持的写QPS低，因为AOF一般会配置成每秒fsync一次日志文件，当然，每秒一次fsync，性能也还是很高的</li><li>以前AOF发生过bug，就是通过AOF记录的日志，进行数据恢复的时候，没有恢复一模一样的数据出来。所以说，类似AOF这种较为复杂的基于命令日志&#x2F;merge&#x2F;回放的方式，比基于RDB每次持久化一份完整的数据快照文件的方式，更加脆弱一些，容易有bug。不过AOF就是为了避免rewrite过程导致的bug，因此每次rewrite并不是基于旧的指令日志进行merge的，而是基于当时内存中的数据进行指令的重新构建，这样健壮性会好很多。</li></ol><h3 id="RDB与AOF选择"><a href="#RDB与AOF选择" class="headerlink" title="RDB与AOF选择"></a>RDB与AOF选择</h3><ol><li>不要仅仅使用RDB，因为那样会导致你丢失很多数据</li><li>也不要仅仅使用AOF，因为那样有两个问题，第一，你通过AOF做冷备，没有RDB做冷备，来的恢复速度更快; 第二，RDB每次简单粗暴生成数据快照，更加健壮，可以避免AOF这种复杂的备份和恢复机制的bug</li><li>综合使用AOF和RDB两种持久化机制，用AOF来保证数据不丢失，作为数据恢复的第一选择; 用RDB来做不同程度的冷备，在AOF文件都丢失或损坏不可用的时候，还可以使用RDB来进行快速的数据恢复</li></ol><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h3 id="RDB-1"><a href="#RDB-1" class="headerlink" title="RDB"></a>RDB</h3><p><strong>配置RDB持久化</strong><br>redis.conf文件：<code>save 60 1000</code><br>每隔60s，如果有超过1000个key发生了变更，那么就生成一个新的dump.rdb文件，就是当前redis内存中完整的数据快照，这个操作也被称之为snapshotting，快照<br>也可以手动调用save或者bgsave命令，同步或异步执行rdb快照生成<br>save可以设置多个，就是多个snapshotting检查点，每到一个检查点，就会去check一下，是否有指定的key数量发生了变更，如果有，就生成一个新的dump.rdb文件</p><p><strong>RDB工作流程</strong></p><ol><li>redis根据配置自己尝试去生成rdb快照文件</li><li>fork一个子进程出来</li><li>子进程尝试将数据dump到临时的rdb快照文件中</li><li>完成rdb快照文件的生成之后，就替换之前的旧的快照文件</li></ol><p>dump.rdb，每次生成一个新的快照，都会覆盖之前的老快照</p><h3 id="AOF-1"><a href="#AOF-1" class="headerlink" title="AOF"></a>AOF</h3><p><strong>配置AOF持久化</strong><br>AOF持久化，默认是关闭的，默认是打开RDB持久化<br><code>appendonly yes</code><br>在生产环境里面，一般来说AOF都是要打开的</p><p><strong>AOF流程</strong><br>打开AOF持久化机制之后，redis每次接收到一条写命令，就会写入日志文件中，当然是先写入os cache的，然后每隔一定时间再fsync一下</p><p>而且即使AOF和RDB都开启了，redis重启的时候，也是优先通过AOF进行数据恢复的，因为aof数据比较完整</p><p><strong>AOF的fsync策略</strong></p><ul><li>always</li></ul><p>每次写入一条数据，立即将这个数据对应的写日志fsync到磁盘上去，性能非常非常差，吞吐量很低</p><ul><li>everysec</li></ul><p>每秒将os cache中的数据fsync到磁盘，这个最常用的，生产环境一般都这么配置，性能很高，QPS还是可以上万的</p><ul><li>no</li></ul><p> 仅仅redis负责将数据写入os cache就撒手不管了，然后后面os自己会时不时有自己的策略将数据刷入磁盘，不可控了</p><h3 id="AOF-rewrite"><a href="#AOF-rewrite" class="headerlink" title="AOF rewrite"></a>AOF rewrite</h3><p>redis中的数据其实有限的，很多数据可能会自动过期，可能会被用户删除，可能会被redis用缓存清除的算法清理掉。redis中的数据会不断淘汰掉旧的，就一部分常用的数据会被自动保留在redis内存中。所以可能很多之前的已经被清理掉的数据，对应的写日志还停留在AOF中，AOF日志文件就一个，会不断的膨胀，到很大很大<br>AOF会自动在后台每隔一定时间做rewrite操作，比如日志里已经存放了针对100w数据的写日志了; redis内存只剩下10万; 基于内存中当前的10万数据构建一套最新的日志，到AOF中; 覆盖之前的老日志; 确保AOF日志文件不会过大，保持跟redis内存数据量一致</p><p>在redis.conf中，可以配置rewrite策略</p><p><code>auto-aof-rewrite-percentage 100</code><br><code>auto-aof-rewrite-min-size 64mb</code></p><p>比如说上一次AOF rewrite之后，是128mb。然后就会接着128mb继续写AOF的日志，如果发现增长的比例，超过了之前的100%，256mb，就可能会去触发一次rewrite。但是此时还要去跟min-size，64mb去比较，256mb &gt; 64mb，才会去触发rewrite</p><ol><li>redis fork一个子进程</li><li>子进程基于当前内存中的数据，构建日志，开始往一个新的临时的AOF文件中写入日志</li><li>redis主进程，接收到client新的写操作之后，在内存中写入日志，同时新的日志也继续写入旧的AOF文件</li><li>子进程写完新的日志文件之后，redis主进程将内存中的新日志再次追加到新的AOF文件中</li><li>用新的日志文件替换掉旧的日志文件</li></ol><h3 id="AOF破损文件修复"><a href="#AOF破损文件修复" class="headerlink" title="AOF破损文件修复"></a>AOF破损文件修复</h3><p>如果redis在append数据到AOF文件时，机器宕机了，可能会导致AOF文件破损</p><p>用<code>redis-check-aof --fix</code>命令来修复破损的AOF文件</p><h3 id="AOF和RDB同时配置"><a href="#AOF和RDB同时配置" class="headerlink" title="AOF和RDB同时配置"></a>AOF和RDB同时配置</h3><ol><li>如果RDB在执行snapshotting操作，那么redis不会执行AOF rewrite; 如果redis再执行AOF rewrite，那么就不会执行RDB snapshotting</li><li>如果RDB在执行snapshotting，此时用户执行BGREWRITEAOF命令，那么等RDB快照生成之后，才会去执行AOF rewrite</li><li>同时有RDB snapshot文件和AOF日志文件，那么redis重启的时候，会优先使用AOF进行数据恢复，因为其中的日志更完整</li></ol><h2 id="企业数据备份及容灾方案"><a href="#企业数据备份及容灾方案" class="headerlink" title="企业数据备份及容灾方案"></a>企业数据备份及容灾方案</h2><h3 id="持久化的配置策略"><a href="#持久化的配置策略" class="headerlink" title="持久化的配置策略"></a>持久化的配置策略</h3><p>在企业中，RDB的生成策略，用默认的也差不多</p><p>save 60 10000<br>如果你希望尽可能确保说，RDB最多丢1分钟的数据，那么尽量就是每隔1分钟都生成一个快照，低峰期，数据量很少，也没必要<br>10000-&gt;生成RDB，1000-&gt;RDB，这个根据你自己的应用和业务的数据量，你自己去决定</p><p>fsync，everysec<br>AOF一定要打开</p><p>auto-aof-rewrite-percentage 100<br>就是当前AOF大小膨胀到超过上次100%，上次的两倍</p><p>auto-aof-rewrite-min-size 64mb<br>根据你的数据量来定，16mb，32mb</p><h3 id="数据备份方案"><a href="#数据备份方案" class="headerlink" title="数据备份方案"></a>数据备份方案</h3><p>RDB非常适合做冷备，每次生成之后，就不会再有修改了<br>数据备份方案</p><ol><li>写crontab定时调度脚本去做数据备份</li><li>每小时都copy一份rdb的备份，到一个目录中去，仅仅保留最近48小时的备份</li><li>每天都保留一份当日的rdb的备份，到一个目录中去，仅仅保留最近1个月的备份</li><li>每次copy备份的时候，都把太旧的备份给删了</li><li>每天晚上将当前服务器上所有的数据备份，发送一份到远程的云服务上去<figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local/redis<br><br>每小时copy一次备份，删除<span class="hljs-number">48</span>小时前的数据<br><br>crontab -e<br><br><span class="hljs-number">0</span> * * * * sh <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>copy/redis_rdb_copy_hourly.sh<br><br>redis_rdb_copy_hourly.sh<br><br><span class="hljs-comment">#!/bin/sh </span><br><br>cur_date=`date +%Y%m%d%k`<br>rm -rf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>snapshotting/<span class="hljs-variable">$cur_date</span><br>mkdir <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>snapshotting/<span class="hljs-variable">$cur_date</span><br>cp <span class="hljs-regexp">/var/</span>redis<span class="hljs-regexp">/6379/</span>dump.rdb <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>snapshotting/<span class="hljs-variable">$cur_date</span><br><br>del_date=`date -d -<span class="hljs-number">48</span>hour +%Y%m%d%k`<br>rm -rf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>snapshotting/<span class="hljs-variable">$del_date</span><br><br>每天copy一次备份<br><br>crontab -e<br><br><span class="hljs-number">0</span> <span class="hljs-number">0</span> * * * sh <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>copy/redis_rdb_copy_daily.sh<br><br>redis_rdb_copy_daily.sh<br><br><span class="hljs-comment">#!/bin/sh </span><br><br>cur_date=`date +%Y%m%d`<br>rm -rf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>snapshotting/<span class="hljs-variable">$cur_date</span><br>mkdir <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>snapshotting/<span class="hljs-variable">$cur_date</span><br>cp <span class="hljs-regexp">/var/</span>redis<span class="hljs-regexp">/6379/</span>dump.rdb <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>snapshotting/<span class="hljs-variable">$cur_date</span><br><br>del_date=`date -d -<span class="hljs-number">1</span>month +%Y%m%d`<br>rm -rf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>snapshotting/<span class="hljs-variable">$del_date</span><br><br>每天一次将所有数据上传一次到远程的云服务器上去<br></code></pre></td></tr></table></figure></li></ol><h3 id="数据恢复方案"><a href="#数据恢复方案" class="headerlink" title="数据恢复方案"></a>数据恢复方案</h3><ul><li>redis进程挂掉</li></ul><p>那么重启redis进程即可，直接基于AOF日志文件恢复数据<br>fsync everysec，最多就丢一秒的数</p><ul><li>redis进程所在的机器挂掉</li></ul><p>重启机器后，尝试重启redis进程，尝试直接基于AOF日志文件进行数据恢复<br>AOF没有破损，也是可以直接基于AOF恢复的<br>AOF append-only，顺序写入，如果AOF文件破损，那么用redis-check-aof fix</p><ul><li>redis当前最新的AOF和RDB文件出现了丢失&#x2F;损坏</li></ul><p>可以尝试基于该机器上当前的某个最新的RDB数据副本进行数据恢复。当前最新的AOF和RDB文件都出现了丢失&#x2F;损坏到无法恢复，一般不是机器的故障，人为导致</p><ul><li>redis机器上所有RDB文件全部损坏</li></ul><p>从远程服务上拉取最新的RDB快照回来回复数据</p><ul><li>如果发现重大的数据错误，比如某个小时上线的程序一下子将数据全部污染了，数据全错了</li></ul><p>可以选择某个更早的时间点，对数据进行恢复</p><blockquote><p>备份方案使用<code>appendonly.aof + dump.rdb</code>的时候，会优先使用appendonly.aof去恢复数据。<br>在数据完全丢失的情况下，基于rdb冷备，如何完美的恢复数据，同时还保持aof和rdb的双开：<br>停止redis，关闭aof，拷贝rdb备份，重启redis，确认数据恢复，直接在命令行热修改redis配置，打开aof，这个redis就会将内存中的数据对应的日志，写入aof文件中</p></blockquote><h1 id="主从架构"><a href="#主从架构" class="headerlink" title="主从架构"></a>主从架构</h1><p>一主多重架构<br>架构思路：redis replication -&gt; 主从架构 -&gt; 读写分离 -&gt; 水平扩容支撑读高并发<br>如果开启了主从架构，建议必须开启master node 的持久化</p><h2 id="replication-核心机制"><a href="#replication-核心机制" class="headerlink" title="replication 核心机制"></a>replication 核心机制</h2><ol><li>redis采用异步方式复制数据到slave节点，不过redis 2.8开始，slave node会周期性地确认自己每次复制的数据量</li><li>一个master node是可以配置多个slave node的</li><li>slave node也可以连接其他的slave node</li><li>slave node做复制的时候，是不会block master node的正常工作的</li><li>slave node在做复制的时候，也不会block对自己的查询操作，它会用旧的数据集来提供服务; 但是复制完成的时候，需要删除旧数据集，加载新数据集，这个时候就会暂停对外服务了</li><li>slave node主要用来进行横向扩容，做读写分离，扩容的slave node可以提高读的吞吐量</li></ol><h2 id="主从架构-1"><a href="#主从架构-1" class="headerlink" title="主从架构"></a>主从架构</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>当启动一个slave node的时候，它会发送一个PSYNC命令给master node<br>如果这是slave node重新连接master node，那么master node仅仅会复制给slave部分缺少的数据; 否则如果是slave node第一次连接master node，那么会触发一次full resynchronization（全量复制）<br>开始full resynchronization的时候，master会启动一个后台线程，开始生成一份RDB快照文件，同时还会将从客户端收到的所有写命令缓存在内存中。RDB文件生成完毕之后，master会将这个RDB发送给slave，slave会先写入本地磁盘，然后再从本地磁盘加载到内存中。然后master会将内存中缓存的写命令发送给slave，slave也会同步这些数据。<br>slave node如果跟master node有网络故障，断开了连接，会自动重连。master如果发现有多个slave node都来重新连接，仅仅会启动一个rdb save操作，用一份数据服务所有slave node。</p><h3 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h3><p>从redis 2.8开始，就支持主从复制的断点续传，如果主从复制过程中，网络连接断掉了，那么可以接着上次复制的地方，继续复制下去，而不是从头开始复制一份<br>master node会在内存中常见一个backlog，master和slave都会保存一个replica offset还有一个master id，offset就是保存在backlog中的。如果master和slave网络连接断掉了，slave会让master从上次的replica offset开始继续复制<br>但是如果没有找到对应的offset，那么就会执行一次resynchronization</p><h3 id="无磁盘化复制"><a href="#无磁盘化复制" class="headerlink" title="无磁盘化复制"></a>无磁盘化复制</h3><p>master在内存中直接创建rdb，然后发送给slave，不会在自己本地落地磁盘了<br><code>repl-diskless-sync</code><br><code>repl-diskless-sync-delay</code>，等待一定时长再开始复制，因为要等更多slave重新连接过来</p><h3 id="过期key处理"><a href="#过期key处理" class="headerlink" title="过期key处理"></a>过期key处理</h3><p>slave不会过期key，只会等待master过期key。如果master过期了一个key，或者通过LRU淘汰了一个key，那么会模拟一条del命令发送给slave。</p><h2 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h2><h3 id="复制完整流程"><a href="#复制完整流程" class="headerlink" title="复制完整流程"></a>复制完整流程</h3><ol><li>slave node启动，仅仅保存master node的信息，包括master node的host和ip(redis.conf里面的slaveof配置的)，但是复制流程没开始</li><li>slave node内部有个定时任务，每秒检查是否有新的master node要连接和复制，如果发现，就跟master node建立socket网络连接</li><li>slave node发送ping命令给master node</li><li>口令认证，如果master设置了requirepass，那么salve node必须发送masterauth的口令过去进行认证</li><li>master node第一次执行全量复制，将所有数据发给slave node</li><li>master node后续持续将写命令，异步复制给slave node</li></ol><h3 id="数据同步核心机制"><a href="#数据同步核心机制" class="headerlink" title="数据同步核心机制"></a>数据同步核心机制</h3><ul><li>master和slave都会维护一个offset</li></ul><p>master会在自身不断累加offset，slave也会在自身不断累加offset<br>slave每秒都会上报自己的offset给master，同时master也会保存每个slave的offset<br>这个倒不是说特定就用在全量复制的，主要是master和slave都要知道各自的数据的offset，才能知道互相之间的数据不一致的情况</p><ul><li>backlog</li></ul><p>master node有一个backlog，默认是1MB大小<br>master node给slave node复制数据时，也会将数据在backlog中同步写一份<br>backlog主要是用来做全量复制中断候的增量复制的</p><ul><li>master run id</li></ul><p><code>info server</code>，可以看到master run id<br>如果根据host+ip定位master node，是不靠谱的，如果master node重启或者数据出现了变化，那么slave node应该根据不同的run id区分，run id不同就做全量复制<br>如果需要不更改run id重启redis，可以使用redis-cli debug reload命令</p><ul><li>psync</li></ul><p>从节点使用psync从master node进行复制，psync runid offset<br>master node会根据自身的情况返回响应信息，可能是FULLRESYNC runid offset触发全量复制，可能是CONTINUE触发增量复制</p><h3 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h3><ol><li>master执行bgsave，在本地生成一份rdb快照文件</li><li>master node将rdb快照文件发送给salve node，如果rdb复制时间超过60秒（repl-timeout），那么slave node就会认为复制失败，可以适当调节大这个参数</li><li>对于千兆网卡的机器，一般每秒传输100MB，6G文件，很可能超过60s</li><li>master node在生成rdb时，会将所有新的写命令缓存在内存中，在salve node保存了rdb之后，再将新的写命令复制给salve node</li><li>client-output-buffer-limit slave 256MB 64MB 60，如果在复制期间，内存缓冲区持续消耗超过64MB，或者一次性超过256MB，那么停止复制，复制失败</li><li>slave node接收到rdb之后，清空自己的旧数据，然后重新加载rdb到自己的内存中，同时基于旧的数据版本对外提供服务</li><li>如果slave node开启了AOF，那么会立即执行BGREWRITEAOF，重写AOF</li></ol><p>rdb生成、rdb通过网络拷贝、slave旧数据的清理、slave aof rewrite，很耗费时间<br>如果复制的数据量在4G~6G之间，那么很可能全量复制时间消耗到1分半到2分钟</p><h3 id="增量复制"><a href="#增量复制" class="headerlink" title="增量复制"></a>增量复制</h3><ol><li>如果全量复制过程中，master-slave网络连接断掉，那么salve重新连接master时，会触发增量复制</li><li>master直接从自己的backlog中获取部分丢失的数据，发送给slave node，默认backlog就是1MB</li><li>msater就是根据slave发送的psync中的offset来从backlog中获取数据的</li></ol><h3 id="heartbeat"><a href="#heartbeat" class="headerlink" title="heartbeat"></a>heartbeat</h3><p>主从节点互相都会发送heartbeat信息<br>master默认每隔10秒发送一次heartbeat，salve node每隔1秒发送一个heartbeat</p><h3 id="异步复制"><a href="#异步复制" class="headerlink" title="异步复制"></a>异步复制</h3><p>master每次接收到写命令之后，现在内部写入数据，然后异步发送给slave node</p><h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>sentinal node<br>主从架构下的高可用实现</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>哨兵主要功能</p><ul><li>集群监控</li></ul><p>负责监控redis master和slave进程是否正常工作</p><ul><li>消息通知</li></ul><p>如果某个redis实例有故障，那么哨兵负责发送消息作为报警通知给管理员</p><ul><li>故障转移</li></ul><p>如果master node挂掉了，会自动转移到slave node上</p><ul><li>配置中心</li></ul><p>如果故障转移发生了，通知client客户端新的master地址</p><p>哨兵本身也是分布式的，作为一个哨兵集群去运行，互相协同工作</p><ol><li>故障转移时，判断一个master node是宕机了，需要大部分的哨兵都同意才行，涉及到了分布式选举的问题</li><li>即使部分哨兵节点挂掉了，哨兵集群还是能正常工作的，因为如果一个作为高可用机制重要组成部分的故障转移系统本身是单点的，那就很坑爹了</li></ol><p>核心知识</p><ol><li>哨兵至少需要3个实例，来保证自己的健壮性</li><li>哨兵 + redis主从的部署架构，是不会保证数据零丢失的，只能保证redis集群的高可用性</li><li>对于哨兵 + redis主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演练</li></ol><p>为什么至少需要3个实例？<br>假设哨兵集群仅仅部署了2个哨兵实例，quorum&#x3D;1<br>master宕机，s1和s2之间只要有一个哨兵认为master宕机就可以进行切换，同时s1和s2之间会选举出一个哨兵执行故障转移。<br>同时这个时候，需要majority，也就是大多数哨兵都是运行的。(2的majority&#x3D;2，3的majority&#x3D;2，5的majority&#x3D;3，4的majority&#x3D;2)<br>哨兵如果宕机了一个，就没有majority来允许执行故障转移，和单机差不多。</p><h2 id="数据丢失"><a href="#数据丢失" class="headerlink" title="数据丢失"></a>数据丢失</h2><h3 id="异步复制-1"><a href="#异步复制-1" class="headerlink" title="异步复制"></a>异步复制</h3><p>master -&gt; slave的复制是异步的，所以可能有部分数据还没复制到slave，master就宕机了，此时这些部分数据就丢失了</p><h3 id="脑裂"><a href="#脑裂" class="headerlink" title="脑裂"></a>脑裂</h3><p>脑裂，也就是说，某个master所在机器突然脱离了正常的网络，跟其他slave机器不能连接，但是实际上master还运行着。此时哨兵可能就会认为master宕机了，然后开启选举，将其他slave切换成了master。这个时候，集群里就会有两个master，也就是所谓的脑裂<br>此时虽然某个slave被切换成了master，但是可能client还没来得及切换到新的master，还继续写向旧master的数据可能也丢失了<br>因此旧master再次恢复的时候，会被作为一个slave挂到新的master上去，自己的数据会清空，重新从新的master复制数据</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><code>min-slaves-to-write 1</code><br><code>min-slaves-max-lag 10</code><br>要求至少有1个slave，数据复制和同步的延迟不能超过10秒<br>如果说一旦所有的slave，数据复制和同步的延迟都超过了10秒钟，那么这个时候，master就不会再接收任何请求了，上面两个配置可以减少异步复制和脑裂导致的数据丢失</p><ul><li>减少异步复制的数据丢失</li></ul><p>有了min-slaves-max-lag这个配置，就可以确保说，一旦slave复制数据和ack延时太长，就认为可能master宕机后损失的数据太多了，那么就拒绝写请求，这样可以把master宕机时由于部分数据未同步到slave导致的数据丢失降低的可控范围内</p><ul><li>减少脑裂的数据丢失</li></ul><p>如果一个master出现了脑裂，跟其他slave丢了连接，那么上面两个配置可以确保说，如果不能继续给指定数量的slave发送数据，而且slave超过10秒没有给自己ack消息，那么就直接拒绝客户端的写请求。这样脑裂后的旧master就不会接受client的新数据，也就避免了数据丢失<br>上面的配置就确保了，如果跟任何一个slave丢了连接，在10秒后发现没有slave给自己ack，那么就拒绝新的写请求。因此在脑裂场景下，最多就丢失10秒的数据</p><h2 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h2><h3 id="sdown和odown转换机制"><a href="#sdown和odown转换机制" class="headerlink" title="sdown和odown转换机制"></a>sdown和odown转换机制</h3><p>sdown和odown两种失败状态</p><p>sdown是主观宕机，就一个哨兵如果自己觉得一个master宕机了，那么就是主观宕机<br>odown是客观宕机，如果quorum数量的哨兵都觉得一个master宕机了，那么就是客观宕机</p><p>sdown达成的条件很简单，如果一个哨兵ping一个master，超过了<code>is-master-down-after-milliseconds</code>指定的毫秒数之后，就主观认为master宕机</p><p>sdown到odown转换的条件很简单，如果一个哨兵在指定时间内，收到了quorum指定数量的其他哨兵也认为那个master是sdown了，那么就认为是odown了，客观认为master宕机</p><h3 id="哨兵集群的自动发现机制"><a href="#哨兵集群的自动发现机制" class="headerlink" title="哨兵集群的自动发现机制"></a>哨兵集群的自动发现机制</h3><p>哨兵互相之间的发现，是通过redis的pub&#x2F;sub系统实现的，每个哨兵都会往__sentinel__:hello这个channel里发送一个消息，这时候所有其他哨兵都可以消费到这个消息，并感知到其他的哨兵的存在</p><p>每隔两秒钟，每个哨兵都会往自己监控的某个master+slaves对应的__sentinel__:hello channel里发送一个消息，内容是自己的host、ip和runid还有对这个master的监控配置</p><p>每个哨兵也会去监听自己监控的每个master+slaves对应的__sentinel__:hello channel，然后去感知到同样在监听这个master+slaves的其他哨兵的存在</p><p>每个哨兵还会跟其他哨兵交换对master的监控配置，互相进行监控配置的同步</p><h3 id="slave配置的自动纠正"><a href="#slave配置的自动纠正" class="headerlink" title="slave配置的自动纠正"></a>slave配置的自动纠正</h3><p>哨兵会负责自动纠正slave的一些配置，比如slave如果要成为潜在的master候选人，哨兵会确保slave在复制现有master的数据;<br>如果slave连接到了一个错误的master上，比如故障转移之后，那么哨兵会确保它们连接到正确的master上</p><h3 id="选举算法"><a href="#选举算法" class="headerlink" title="选举算法"></a>选举算法</h3><p>如果一个master被认为odown了，而且majority哨兵都允许了主备切换，那么某个哨兵就会执行主备切换操作，此时首先要选举一个slave来</p><p>会考虑slave的一些信息</p><ul><li>跟master断开连接的时长</li><li>slave优先级</li><li>复制offset</li><li>run id</li></ul><p>如果一个slave跟master断开连接已经超过了down-after-milliseconds的10倍，外加master宕机的时长，那么slave就被认为不适合选举为master<br><code>(down-after-milliseconds * 10) + milliseconds_since_master_is_in_SDOWN_state</code></p><p>接下来会对slave进行排序</p><ul><li>按照slave优先级进行排序，slave priority越低，优先级就越高</li><li>如果slave priority相同，那么看replica offset，哪个slave复制了越多的数据，offset越靠后，优先级就越高</li><li>如果上面两个条件都相同，那么选择一个run id比较小的那个slave</li></ul><h3 id="quorum和majority"><a href="#quorum和majority" class="headerlink" title="quorum和majority"></a>quorum和majority</h3><p>每次一个哨兵要做主备切换，首先需要quorum数量的哨兵认为odown，然后选举出一个哨兵来做切换，这个哨兵还得得到majority哨兵的授权，才能正式执行切换<br>如果quorum &lt; majority，比如5个哨兵，majority就是3，quorum设置为2，那么就3个哨兵授权就可以执行切换<br>但是如果quorum &gt;&#x3D; majority，那么必须quorum数量的哨兵都授权，比如5个哨兵，quorum是5，那么必须5个哨兵都同意授权，才能执行切换</p><h3 id="configuration-epoch"><a href="#configuration-epoch" class="headerlink" title="configuration epoch"></a>configuration epoch</h3><p>哨兵会对一套redis master+slave进行监控，有相应的监控的配置<br>执行切换的那个哨兵，会从要切换到的新master（salve-&gt;master）那里得到一个configuration epoch，这就是一个version号，每次切换的version号都必须是唯一的<br>如果第一个选举出的哨兵切换失败了，那么其他哨兵，会等待failover-timeout时间，然后接替继续执行切换，此时会重新获取一个新的configuration epoch，作为新的version号</p><h3 id="configuraiton传播"><a href="#configuraiton传播" class="headerlink" title="configuraiton传播"></a>configuraiton传播</h3><p>哨兵完成切换之后，会在自己本地更新生成最新的master配置，然后同步给其他的哨兵，就是通过之前说的pub&#x2F;sub消息机制<br>这里之前的version号就很重要了，因为各种消息都是通过一个channel去发布和监听的，所以一个哨兵完成一次新的切换之后，新的master配置是跟着新的version号的<br>其他的哨兵都是根据版本号的大小来更新自己的master配置的</p><h1 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h1><p>redis cluster<br>多master + 读写分离 + 高可用</p><h2 id="redis-cluster"><a href="#redis-cluster" class="headerlink" title="redis cluster"></a>redis cluster</h2><p>作用</p><ul><li>自动将数据进行分片，每个master上放一部分数据</li><li>提供内置的高可用支持，部分master不可用时，还是可以继续工作的</li></ul><p>在redis cluster架构下，每个redis要放开两个端口号，比如一个是6379，另外一个就是加10000的端口号，比如16379。16379端口号是用来进行节点间通信的，也就是cluster bus的东西，集群总线。cluster bus的通信，用来进行故障检测，配置更新，故障转移授权</p><h3 id="一致性hash算法-虚拟节点"><a href="#一致性hash算法-虚拟节点" class="headerlink" title="一致性hash算法+虚拟节点"></a>一致性hash算法+虚拟节点</h3><p>一致性hash算法：<br>key过来以后，计算hash值，然后会用hash值在圆环上对应的各个点上(每个点都有一个hash值)去比对，看hash值应该落在圆环的哪个部位。<br>key落在圆环上以后，会顺时针去寻找距离最近的一个节点。<br>一致性hash算法，保证任何一个master宕机，只有之前在那个master上的数据，会受到影响。<br>虚拟节点：<br>给每个master都做了均匀分布的虚拟节点，保证在每个区间内，大量的数据，都会均匀分布到不同的节点内，而不是按照顺时针的顺序全部涌入同一个master。</p><h3 id="hash-slot算法"><a href="#hash-slot算法" class="headerlink" title="hash slot算法"></a>hash slot算法</h3><p>redis cluster有固定的16384个hash slot，对每个key计算CRC16值，然后对16384取模，可以获取key对应的hash slot<br>redis cluster中每个master都会持有部分slot，比如有3个master，那么可能每个master持有5000多个hash slot<br>hash slot让node的增加和移除很简单，增加一个master，就将其他master的hash slot移动部分过去，减少一个master，就将它的hash slot移动到其他master上去</p><h2 id="节点间内部通信机制"><a href="#节点间内部通信机制" class="headerlink" title="节点间内部通信机制"></a>节点间内部通信机制</h2><h3 id="基础通信原理"><a href="#基础通信原理" class="headerlink" title="基础通信原理"></a>基础通信原理</h3><ul><li>redis cluster节点间采取gossip协议进行通信</li></ul><p>跟集中式不同，不是将集群元数据（节点信息，故障，等等）集中存储在某个节点上，而是互相之间不断通信，保持整个集群所有节点的数据是完整的<br>维护集群的元数据用得，集中式，一种叫做gossip</p><p>集中式：好处在于，元数据的更新和读取，时效性非常好，一旦元数据出现了变更，立即就更新到集中式的存储中，其他节点读取的时候立即就可以感知到; 不好在于，所有的元数据的跟新压力全部集中在一个地方，可能会导致元数据的存储有压力<br>gossip：好处在于，元数据的更新比较分散，不是集中在一个地方，更新请求会陆陆续续，打到所有节点上去更新，有一定的延时，降低了压力; 缺点，元数据更新有延时，可能导致集群的一些操作会有一些滞后</p><ul><li>10000端口</li></ul><p>每个节点都有一个专门用于节点间通信的端口，就是自己提供服务的端口号+10000，比如7001，那么用于节点间通信的就是17001端口<br>每隔节点每隔一段时间都会往另外几个节点发送ping消息，同时其他几点接收到ping之后返回pong</p><ul><li>交换的信息</li></ul><p>故障信息，节点的增加和移除，hash slot信息，等等</p><h3 id="gossip协议"><a href="#gossip协议" class="headerlink" title="gossip协议"></a>gossip协议</h3><p>gossip协议包含多种消息，包括ping，pong，meet，fail，等等</p><p>meet: 某个节点发送meet给新加入的节点，让新节点加入集群中，然后新节点就会开始与其他节点进行通信<br>redis-trib.rb add-node<br>其实内部就是发送了一个gossip meet消息，给新加入的节点，通知那个节点去加入我们的集群<br>ping: 每个节点都会频繁给其他节点发送ping，其中包含自己的状态还有自己维护的集群元数据，互相通过ping交换元数据<br>每个节点每秒都会频繁发送ping给其他的集群，ping，频繁的互相之间交换数据，互相进行元数据的更新<br>pong: 返回ping和meet，包含自己的状态和其他信息，也可以用于信息广播和更新<br>fail: 某个节点判断另一个节点fail之后，就发送fail给其他节点，通知其他节点，指定的节点宕机了</p><h3 id="ping消息"><a href="#ping消息" class="headerlink" title="ping消息"></a>ping消息</h3><p>ping很频繁，而且要携带一些元数据，所以可能会加重网络负担</p><p>每个节点每秒会执行10次ping，每次会选择5个最久没有通信的其他节点<br>当然如果发现某个节点通信延时达到了cluster_node_timeout &#x2F; 2，那么立即发送ping，避免数据交换延时过长，落后的时间太长了<br>比如说，两个节点之间都10分钟没有交换数据了，那么整个集群处于严重的元数据不一致的情况，就会有问题<br>所以cluster_node_timeout可以调节，如果调节比较大，那么会降低发送的频率<br>每次ping，一个是带上自己节点的信息，还有就是带上1&#x2F;10其他节点的信息，发送出去，进行数据交换<br>至少包含3个其他节点的信息，最多包含总节点-2个其他节点的信息</p><h2 id="面向集群的jedis原理"><a href="#面向集群的jedis原理" class="headerlink" title="面向集群的jedis原理"></a>面向集群的jedis原理</h2><h3 id="基于重定向的客户端"><a href="#基于重定向的客户端" class="headerlink" title="基于重定向的客户端"></a>基于重定向的客户端</h3><p>redis-cli -c，自动重定向</p><p>（1）请求重定向</p><p>客户端可能会挑选任意一个redis实例去发送命令，每个redis实例接收到命令，都会计算key对应的hash slot</p><p>如果在本地就在本地处理，否则返回moved给客户端，让客户端进行重定向</p><p>cluster keyslot mykey，可以查看一个key对应的hash slot是什么</p><p>用redis-cli的时候，可以加入-c参数，支持自动的请求重定向，redis-cli接收到moved之后，会自动重定向到对应的节点执行命令</p><p>（2）计算hash slot</p><p>计算hash slot的算法，就是根据key计算CRC16值，然后对16384取模，拿到对应的hash slot</p><p>用hash tag可以手动指定key对应的slot，同一个hash tag下的key，都会在一个hash slot中，比如set mykey1:{100}和set mykey2:{100}</p><p>（3）hash slot查找</p><p>节点间通过gossip协议进行数据交换，就知道每个hash slot在哪个节点上</p><h3 id="smart-jedis"><a href="#smart-jedis" class="headerlink" title="smart jedis"></a>smart jedis</h3><p>（1）什么是smart jedis</p><p>基于重定向的客户端，很消耗网络IO，因为大部分情况下，可能都会出现一次请求重定向，才能找到正确的节点</p><p>所以大部分的客户端，比如java redis客户端，就是jedis，都是smart的</p><p>本地维护一份hashslot -&gt; node的映射表，缓存，大部分情况下，直接走本地缓存就可以找到hashslot -&gt; node，不需要通过节点进行moved重定向</p><p>（2）JedisCluster的工作原理</p><p>在JedisCluster初始化的时候，就会随机选择一个node，初始化hashslot -&gt; node映射表，同时为每个节点创建一个JedisPool连接池</p><p>每次基于JedisCluster执行操作，首先JedisCluster都会在本地计算key的hashslot，然后在本地映射表找到对应的节点</p><p>如果那个node正好还是持有那个hashslot，那么就ok; 如果说进行了reshard这样的操作，可能hashslot已经不在那个node上了，就会返回moved</p><p>如果JedisCluter API发现对应的节点返回moved，那么利用该节点的元数据，更新本地的hashslot -&gt; node映射表缓存</p><p>重复上面几个步骤，直到找到对应的节点，如果重试超过5次，那么就报错，JedisClusterMaxRedirectionException</p><p>jedis老版本，可能会出现在集群某个节点故障还没完成自动切换恢复时，频繁更新hash slot，频繁ping节点检查活跃，导致大量网络IO开销</p><p>jedis最新版本，对于这些过度的hash slot更新和ping，都进行了优化，避免了类似问题</p><p>（3）hashslot迁移和ask重定向</p><p>如果hash slot正在迁移，那么会返回ask重定向给jedis</p><p>jedis接收到ask重定向之后，会重新定位到目标节点去执行，但是因为ask发生在hash slot迁移过程中，所以JedisCluster API收到ask是不会更新hashslot本地缓存</p><p>已经可以确定说，hashslot已经迁移完了，moved是会更新本地hashslot-&gt;node映射表缓存的</p><h2 id="高可用性与主备切换原理"><a href="#高可用性与主备切换原理" class="headerlink" title="高可用性与主备切换原理"></a>高可用性与主备切换原理</h2><p>redis cluster的高可用的原理，几乎跟哨兵是类似的</p><h3 id="判断节点宕机"><a href="#判断节点宕机" class="headerlink" title="判断节点宕机"></a>判断节点宕机</h3><p>如果一个节点认为另外一个节点宕机，那么就是pfail，主观宕机</p><p>如果多个节点都认为另外一个节点宕机了，那么就是fail，客观宕机，跟哨兵的原理几乎一样，sdown，odown</p><p>在cluster-node-timeout内，某个节点一直没有返回pong，那么就被认为pfail</p><p>如果一个节点认为某个节点pfail了，那么会在gossip ping消息中，ping给其他节点，如果超过半数的节点都认为pfail了，那么就会变成fail</p><h3 id="从节点过滤"><a href="#从节点过滤" class="headerlink" title="从节点过滤"></a>从节点过滤</h3><p>对宕机的master node，从其所有的slave node中，选择一个切换成master node</p><p>检查每个slave node与master node断开连接的时间，如果超过了cluster-node-timeout * cluster-slave-validity-factor，那么就没有资格切换成master</p><p>这个也是跟哨兵是一样的，从节点超时过滤的步骤</p><h3 id="从节点选举"><a href="#从节点选举" class="headerlink" title="从节点选举"></a>从节点选举</h3><p>哨兵：对所有从节点进行排序，slave priority，offset，run id</p><p>每个从节点，都根据自己对master复制数据的offset，来设置一个选举时间，offset越大（复制数据越多）的从节点，选举时间越靠前，优先进行选举</p><p>所有的master node开始slave选举投票，给要进行选举的slave进行投票，如果大部分master node（N&#x2F;2 + 1）都投票给了某个从节点，那么选举通过，那个从节点可以切换成master</p><p>从节点执行主备切换，从节点切换为主节点</p><h3 id="与哨兵比较"><a href="#与哨兵比较" class="headerlink" title="与哨兵比较"></a>与哨兵比较</h3><p>整个流程跟哨兵相比，非常类似，所以说，redis cluster功能强大，直接集成了replication和sentinal的功能</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="fork耗时导致高并发请求延时"><a href="#fork耗时导致高并发请求延时" class="headerlink" title="fork耗时导致高并发请求延时"></a>fork耗时导致高并发请求延时</h2><p>RDB和AOF的时候，其实会有生成RDB快照，AOF rewrite，耗费磁盘IO的过程，主进程fork子进程</p><p>fork的时候，子进程是需要拷贝父进程的空间内存页表的，也是会耗费一定的时间的</p><p>一般来说，如果父进程内存有1个G的数据，那么fork可能会耗费在20ms左右，如果是10G~30G，那么就会耗费20 * 10，甚至20 * 30，也就是几百毫秒的时间</p><p>info stats中的latest_fork_usec，可以看到最近一次form的时长</p><p>redis单机QPS一般在几万，fork可能一下子就会拖慢几万条操作的请求时长，从几毫秒变成1秒</p><p>优化思路</p><p>fork耗时跟redis主进程的内存有关系，一般控制redis的内存在10GB以内，slave -&gt; master，全量复制</p><h2 id="AOF的阻塞问题"><a href="#AOF的阻塞问题" class="headerlink" title="AOF的阻塞问题"></a>AOF的阻塞问题</h2><p>redis将数据写入AOF缓冲区，单独开一个现场做fsync操作，每秒一次</p><p>但是redis主线程会检查两次fsync的时间，如果距离上次fsync时间超过了2秒，那么写请求就会阻塞</p><p>everysec，最多丢失2秒的数据</p><p>一旦fsync超过2秒的延时，整个redis就被拖慢</p><p>优化思路</p><p>优化硬盘写入速度，建议采用SSD，不要用普通的机械硬盘，SSD，大幅度提升磁盘读写的速度</p><h2 id="主从复制延迟问题"><a href="#主从复制延迟问题" class="headerlink" title="主从复制延迟问题"></a>主从复制延迟问题</h2><p>主从复制可能会超时严重，这个时候需要良好的监控和报警机制</p><p>在info replication中，可以看到master和slave复制的offset，做一个差值就可以看到对应的延迟量</p><p>如果延迟过多，那么就进行报警</p><h2 id="主从复制风暴问题"><a href="#主从复制风暴问题" class="headerlink" title="主从复制风暴问题"></a>主从复制风暴问题</h2><p>如果一下子让多个slave从master去执行全量复制，一份大的rdb同时发送到多个slave，会导致网络带宽被严重占用</p><p>如果一个master真的要挂载多个slave，那尽量用树状结构，不要用星型结构</p><h2 id="vm-overcommit-memory"><a href="#vm-overcommit-memory" class="headerlink" title="vm.overcommit_memory"></a>vm.overcommit_memory</h2><p>0: 检查有没有足够内存，没有的话申请内存失败<br>1: 允许使用内存直到用完为止<br>2: 内存地址空间不能超过swap + 50%</p><p>如果是0的话，可能导致类似fork等操作执行失败，申请不到足够的内存空间</p><p>cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;overcommit_memory<br>echo “vm.overcommit_memory&#x3D;1” &gt;&gt; &#x2F;etc&#x2F;sysctl.conf<br>sysctl vm.overcommit_memory&#x3D;1</p><h2 id="swapiness"><a href="#swapiness" class="headerlink" title="swapiness"></a>swapiness</h2><p>cat &#x2F;proc&#x2F;version，查看linux内核版本</p><p>如果linux内核版本&lt;3.5，那么swapiness设置为0，这样系统宁愿swap也不会oom killer（杀掉进程）<br>如果linux内核版本&gt;&#x3D;3.5，那么swapiness设置为1，这样系统宁愿swap也不会oom killer</p><p>保证redis不会被杀掉</p><p>echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness<br>echo vm.swapiness&#x3D;0 &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</p><h2 id="最大打开文件句柄"><a href="#最大打开文件句柄" class="headerlink" title="最大打开文件句柄"></a>最大打开文件句柄</h2><p>ulimit -n 10032 10032</p><p>自己去上网搜一下，不同的操作系统，版本，设置的方式都不太一样</p><h2 id="tcp-backlog"><a href="#tcp-backlog" class="headerlink" title="tcp backlog"></a>tcp backlog</h2><p>cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn<br>echo 511 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn</p><h1 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h1><h2 id="第一套架构"><a href="#第一套架构" class="headerlink" title="第一套架构"></a>第一套架构</h2><p>如果你的数据量不大，单master就可以容纳，一般来说你的缓存的总量在10G以内就可以，那么建议按照以下架构去部署redis</p><p>redis持久化+备份方案+容灾方案+replication（主从+读写分离）+sentinal（哨兵集群，3个节点，高可用性）</p><p>可以支撑的数据量在10G以内，可以支撑的写QPS在几万左右，可以支撑的读QPS可以上10万以上（随你的需求，水平扩容slave节点就可以），可用性在99.99%</p><h2 id="第二套架构"><a href="#第二套架构" class="headerlink" title="第二套架构"></a>第二套架构</h2><p>如果你的数据量很大，大型电商网站的商品详情页的架构（对标那些国内排名前三的大电商网站），数据量是很大的</p><p>redis cluster</p><ul><li>多master分布式存储数据，水平扩容</li><li>支撑更多的数据量，1T+以上没问题，只要扩容master即可</li><li>读写QPS分别都达到几十万都没问题，只要扩容master即可，redis cluster，读写分离，支持不太好，readonly才能去slave上读</li><li>支撑99.99%可用性，也没问题，slave -&gt; master的主备切换，冗余slave去进一步提升可用性的方案（每个master挂一个slave，但是整个集群再加个3个slave冗余一下）</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis基础</title>
    <link href="/2022/05/04/Redis/Redis%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/05/04/Redis/Redis%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/04/hello-world/"/>
    <url>/2022/05/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello World</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Netty源码与调优</title>
    <link href="/2022/05/03/Netty/Netty%E6%BA%90%E7%A0%81%E4%B8%8E%E8%B0%83%E4%BC%98/"/>
    <url>/2022/05/03/Netty/Netty%E6%BA%90%E7%A0%81%E4%B8%8E%E8%B0%83%E4%BC%98/</url>
    
    <content type="html"><![CDATA[<p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty进阶</title>
    <link href="/2022/05/03/Netty/Netty%E8%BF%9B%E9%98%B6/"/>
    <url>/2022/05/03/Netty/Netty%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty入门</title>
    <link href="/2022/05/03/Netty/Netty%E5%85%A5%E9%97%A8/"/>
    <url>/2022/05/03/Netty/Netty%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NIO编程</title>
    <link href="/2022/05/03/Netty/NIO%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/05/03/Netty/NIO%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分库分表</title>
    <link href="/2022/05/02/MySQL/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    <url>/2022/05/02/MySQL/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>分库分表问题点</p><ol><li>现在跑的是单库单表的数据库，代码也是对接单库单表；部署一套多库多表的数据库环境，无非就是准备多台数据库服务器，每台服务器上装一个mysql实例，每个mysql实例里创建一个库，每个库建一堆的表，这是第一步</li><li>多库多表的数据库环境，是空的，数据是没有的，历史上所有的数据，单表千万级，亿级，十亿级，单个库，很多表，多个表都是这种大表，千万级，亿级，历史数据量就很大，还在不停的更新，能够完整的把你单库单表里的历史全量数据都同步复制到你的多库多表的环境里去，复制的过程中，数据还在不停的变化，把全量复制过程中的，不停变化的数据，同步的进行增量复制</li><li>上述第二点不停的进行，一直到单库单表的数据库环境跟多库多表的数据库环境，完全一致，完全同步，完善的数据校验</li><li>多库多表的数据库环境是完全ready了，数据历史和增量已经跟生产库（单库单表）完全一致了，把你的支持多库多表的系统最新的代码，在线上进行部署，后续系统运行，全部是基于分库分表环境去跑了，单库单表老数据库下线掉</li><li>对多库多表的数据库环境，日常库表结构变更，线上系统基于多库多表环境在跑的时候，如果库表结构不变化，改改代码倒是也可以，如果你要对一个大表进行ddl操作，加索引，加字段，修改字段，都是常规的线上数据库的运维的操作</li><li>库和表的扩容，线上8库8表，16库16表，增加库和表的数量，数据量是固定有限的，在8库8表里面，新增了8个库，如何把你已有的数据分散到新增的8个库里去呢，分库分表扩容，数据扩容到更多的库和表去，这个过程应该怎么来做</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生产经验与案例</title>
    <link href="/2022/05/02/MySQL/%E7%94%9F%E4%BA%A7%E7%BB%8F%E9%AA%8C%E4%B8%8E%E6%A1%88%E4%BE%8B/"/>
    <url>/2022/05/02/MySQL/%E7%94%9F%E4%BA%A7%E7%BB%8F%E9%AA%8C%E4%B8%8E%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="生产经验"><a href="#生产经验" class="headerlink" title="生产经验"></a>生产经验</h1><h2 id="IO调度优化"><a href="#IO调度优化" class="headerlink" title="IO调度优化"></a>IO调度优化</h2><p>IO调度算法：</p><ul><li>CFQ公平调度算法</li></ul><p>按照执行顺序，进行IO调度。<br>可能会出现小数据量sql排队在大数据量sql后面，导致延迟很久</p><ul><li>deadline调度算法 (MySQL推荐算法)</li></ul><p>任何一个IO操作都不能一直不停的等待，在指定时间范围内，都必须让他执行</p><h2 id="RAID存储架构"><a href="#RAID存储架构" class="headerlink" title="RAID存储架构"></a>RAID存储架构</h2><p>RAID就是一个磁盘冗余阵列。服务器放了多块磁盘，使用RAID进行机器磁盘管理。<br>RAID可以实现数据冗余机制</p><p>数据冗余机制<br>将你写入的一份数据，在两块磁盘上都写入。让两块磁盘上的数据一样，作为冗余备份。然后当一块磁盘坏掉的时候，从另一块磁盘读取冗余数据。</p><p>电池充放电<br>防止停电的时候，缓存未刷入磁盘，在RAID卡上会配置独立的锂电池或者电容。考虑锂电池的性能衰减问题，需要让锂电池配置定时充放电，每隔30-90太难自动对锂电池充放电一次，可以延长锂电池的寿命和校准电池容量。<br>当锂电池自动充放电的时候，会导致数据库服务器的RAID存储定期的性能出现几十倍的抖动，间接导致数据库每隔一段时间出现性能抖动。</p><p>RAID锂电池充放电池引起的性能抖动解决方案：</p><ol><li>将RAID卡的锂电池换成电容。电容不需要频繁充电，不会导致充放电的性能抖动。并且电容可以支持透明充放电。即自动检查电量，自动进行充电，不会说在充放电的时候让写IO直接走磁盘。缺点：更换电容麻烦，且电容比较容易老化。不太推荐</li><li>手动充放电。关闭RAID自动充放电，然后通过脚本每隔一段时间在低峰期触发充放电。</li><li>充放电的时候不关闭write back。设置锂电池充放电的时候不将缓存级别从write back修改为write through。配合方案二一起使用。</li></ol><h1 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h1><h2 id="数据库无法连接，Too-many-connections"><a href="#数据库无法连接，Too-many-connections" class="headerlink" title="数据库无法连接，Too many connections"></a>数据库无法连接，Too many connections</h2><h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><p>数据库连接数配置</p><blockquote><h1 id="my-cnf文件"><a href="#my-cnf文件" class="headerlink" title="my.cnf文件"></a>my.cnf文件</h1><p>max_connections</p></blockquote><p>查看目前连接数配置</p><blockquote><p>show variables like ‘max_connections’</p></blockquote><p>启动日志<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650962115756-876262c5-2aef-458f-acc2-632d892d0964.png#clientId=u1e7a8eb8-c29c-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=109&id=uec71f8fc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=109&originWidth=580&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8847&status=done&style=none&taskId=u453bdde0-af03-4454-b164-a25d7394ad0&title=&width=580" alt="image.png"></p><p>linux默认对单个进程设置文件句柄数为1024，因为MySQL服务实例还包括输入输出和服务监控，以及其他进程间通讯，除去这些开销，留给连接池数量的并不多，特别是高并发情况下。<br>文件句柄如果太少的话，会导致没有办法创建大量的网络连接。</p><h3 id="处理方案"><a href="#处理方案" class="headerlink" title="处理方案"></a>处理方案</h3><blockquote><p>查看openfile数量<br>ulimit -a<br>修改设置<br>ulimit -HSn 65535</p><p>cat &#x2F;etc&#x2F;security&#x2F;limits.conf<br>cat &#x2F;etc&#x2F;rc.local</p></blockquote><h2 id="刷盘导致性能抖动"><a href="#刷盘导致性能抖动" class="headerlink" title="刷盘导致性能抖动"></a>刷盘导致性能抖动</h2><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><ol><li>buffer pool的缓存页满了，此时执行一个sql查询很多数据，一下子会把很多缓存页flush到磁盘上，刷盘很慢，会导致查询语句执行的很慢</li><li>可能执行更新语句的时候，redo log在磁盘上所有文件都写满了，此时需要回到第一个redo log文件覆盖写。覆盖写的时候，会涉及到第一个redo log文件里很多redo log日志对应的更新操作改动了缓存页，那些缓存页还没有flush到磁盘，此时必须把缓存页flush到磁盘，才能执行后续的更新语句。</li></ol><h3 id="处理方案-1"><a href="#处理方案-1" class="headerlink" title="处理方案"></a>处理方案</h3><p>仅仅只能尽可能减少这种性能抖动，无法完全避免<br>核心思路</p><ul><li>尽量减少缓存页flush到磁盘的频率</li><li>尽量提升缓存页flush到磁盘的速度</li></ul><p>主要进行第二点优化，关键是尽量减少flush缓存页到磁盘的时间开销到最小。</p><ol><li><code>innodb_io_capacity</code></li></ol><p>数据库采用多大的IO速率把缓存页flush到磁盘去。<br>fio工具<br>用于测试磁盘最大随机IO速率的linux工具。</p><ol start="2"><li><code>innodb_flush_neighbors</code></li></ol><p>在flush缓存页到磁盘的时候，会控制把缓存页临近的其他缓存页也刷到磁盘，这样有时候会导致flush的缓存页过多。如果使用SSD固态，可以将这个参数设置为0，禁止刷临近缓存页。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>执行计划</title>
    <link href="/2022/05/02/MySQL/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
    <url>/2022/05/02/MySQL/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p><code>select * from table where id=x</code><br><code>select * from table where name=x</code><br>通过聚簇索引或者二级索引+聚簇索引回源，这种根据索引直接快速查找数据的过程叫做<code>const</code>，标识性能超高的常量级。<br>此时二级索引必须是唯一索引<code>unique key</code></p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p><code>select * from table where name=x</code><br>二级索引是个普通的key索引，不是唯一索引。查询速度也很快</p><p><code>select * from table where name = x and age = x and xx =xx</code><br><code>KEY(name,age,xx)</code><br>如果是包含多列的普通索引的话，必须从索引最左侧开始连续多个列都是等值比较</p><p><code>name IS NULL</code><br>name即使是主键或者唯一索引，还是只能走ref的方式</p><p>ref就是用了普通的索引，或者主键&#x2F;唯一索引改了一个IS NULL&#x2F;IS NOT NULL</p><h3 id="ref-or-null"><a href="#ref-or-null" class="headerlink" title="ref_or_null"></a>ref_or_null</h3><p><code>select * from table where name = x or name IS NULL</code><br>这种同时比较了一个值还限定了IS NULL，就叫做<code>ref_or_null</code></p><p>ref_or_null实际上就是在二级索引里搜你要的值以及是NULL的值，再回源到聚簇索引里查。</p><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>SQL查询里有范围查询的时候</p><p><code>select* from table where age &gt;= x and age &lt;=x</code><br>age为普通索引，此时用索引进行范围筛选。一旦用了索引做范围筛选，就是range</p><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><p>只需要遍历二级索引就可以得到的数据，而不需要回源到聚簇索引的访问方式，叫做index访问方式</p><p><code>select x1,x2,x3 from table where x2 = xxx</code><br><code>KEY(x1,x2,x3)</code><br>此时无法从联合索引的根节点开始二分查找，由于查询的字段就是联合索引的字段，数据直接在普通索引的叶子结点存储。所以就遍历这个联合索引树的叶子结点，找到x2&#x3D;xxx的数据。<br>遍历二级索引的过程要比遍历聚簇索引快。</p><h3 id="index-merge"><a href="#index-merge" class="headerlink" title="index_merge"></a>index_merge</h3><p>特殊场景下针对单表查询可能会基于多个索引提取数据后进行合并，此时查询方式为index_merge</p><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>全表扫描，直接扫描聚簇索引的所有叶子节点</p><h2 id="多表关联查询"><a href="#多表关联查询" class="headerlink" title="多表关联查询"></a>多表关联查询</h2><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p><code>select * from t1,t2 where t1.x1 = xxx and t1.x2=t2.x2 and t2.x3 = xxx</code></p><ol><li>根据t1.x1&#x3D;xxx 去t1走t1索引筛选一部分数据</li><li>假设筛选2个数据，根据每个数据x2的值，以及x3 &#x3D; xxx两个条件，去t2表找x2字段值和x3字段值匹配的数据。</li></ol><p>先从一个表查询一波数据，比如t1,叫做驱动表<br>根据前面的数据去另一个表进行关联，比如t2，叫做被驱动表</p><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p><code>LEFT JOIN  ON</code></p><h3 id="eq-ref"><a href="#eq-ref" class="headerlink" title="eq_ref"></a>eq_ref</h3><p><code>EXPLAIN SELECT * FROM t1 INNER JOIN t2 ON t1.id = t2.id</code><br>关联查询的时候，针对t2的type为<code>eq_ref</code>表示针对t1表全表扫描获取到的每条数据，都会去t2表基于主键进行等值匹配，此时会在t2表的聚簇索引里根据主键值进行快速查找。所以在连接查询时，针对被驱动表如果基于主键进行了等值匹配，那么查询方式就是eq_ref。</p><h3 id="嵌套循环关联nested-loop-join"><a href="#嵌套循环关联nested-loop-join" class="headerlink" title="嵌套循环关联nested-loop join"></a>嵌套循环关联nested-loop join</h3><p>假设两个表一起执行关联，会先在一个驱动表里根据where筛选出一波数据，比如10条。<br>在根据10条数据走循环，用每条数据到另一个驱动表去根据ON连接条件和WHERE里的被驱动表筛选条件去查询数据，找出来的数据就进行关联。<br>针对多表查询的语句，要尽量给两个表都加上索引，确保从驱动表的查询通过索引去查询，对被驱动表的查询也通过索引去查找。</p><h1 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h1><h2 id="索引选择"><a href="#索引选择" class="headerlink" title="索引选择"></a>索引选择</h2><ul><li>单索引选择</li></ul><p>选择一个最优的索引路径进行查询</p><ul><li>多索引选择</li></ul><p>比较少出现，对多个索引树进行查找，用intersection交集、union并集的方式合并数据<br><code>select *from table where x1 = xx and x2 = xx</code><br>如果x1索引和x2索引查出来的数据都很多，可能会针对两个索引查出两个结果集，取交集<br>有硬性条件要求：</p><ol><li>如果有联合索引，必须把联合索引里每个字段都放在SQL中，且必须是等值匹配</li><li>如果是通过主键查询+其他二级索引等值匹配</li></ol><h2 id="MySQL成本与执行计划优化"><a href="#MySQL成本与执行计划优化" class="headerlink" title="MySQL成本与执行计划优化"></a>MySQL成本与执行计划优化</h2><h3 id="成本预估"><a href="#成本预估" class="headerlink" title="成本预估"></a>成本预估</h3><p>从磁盘读数据到内存的IO成本，MySQL是一页一页读取的，约定读一页的成本为1.0。<br>得到数据后，对数据进行运算，比如排序和分组等，约定读取和检测一条数据是否符合条件的成本为0.2。</p><h3 id="全表扫描执行计划成本计算"><a href="#全表扫描执行计划成本计算" class="headerlink" title="全表扫描执行计划成本计算"></a>全表扫描执行计划成本计算</h3><p><code>show table status like &quot;表名&quot;</code><br>获取表的统计信息。</p><ul><li>rows</li></ul><p>表里的记录数</p><ul><li>data_length</li></ul><p>表的聚簇索引的字节数大小<br>data_length&#x2F;1024&#x2F;16(默认一页大小) &#x3D; 数据页数量</p><p>IO成本 &#x3D; 数据页数量 * 1.0 + 微调值<br>CPU成本 &#x3D; 行记录数 * 0.2 + 微调值<br>总成本 &#x3D; IO成本 + CPU成本</p><h3 id="索引执行计划成本计算"><a href="#索引执行计划成本计算" class="headerlink" title="索引执行计划成本计算"></a>索引执行计划成本计算</h3><ol><li>首先在二级索引里面根据条件查询一部分数据的IO成本，一般看查询条件涉及几个范围。</li></ol><p>一般一个范围区间大概认为等同于一个数据页，所以此时可能根据二级索引查询的时候，这个IO成本都会预估很小，n * 1.0 &#x3D; n 基本都是个位数级别</p><ol start="2"><li>估算从二级索引里读取符合条件的数据的成本，估算在二级索引里查出多少数据。 行记录数 * 0.2 + 微调值</li><li>回表到聚簇索引查询数据，直接默认一条数据会需要回表到聚簇索引查询一个数据页 行记录数 * 1.0 + 微调值</li><li>二级索引查询数据，回表得到完整值后，进行后续条件判断。 行记录数 * 0.2 + 微调值</li></ol><h3 id="Mysql执行执行计划规则"><a href="#Mysql执行执行计划规则" class="headerlink" title="Mysql执行执行计划规则"></a>Mysql执行执行计划规则</h3><ol><li>MySQL在真正执行的时候，会对SQL进行一些改动</li><li>针对子查询进行优化</li></ol><p><code>select * from t1 where x1 = (select x1 from t2 where id = xxx)</code></p><ol><li>先执行子查询，直接根据主键定位一条数据的x1字段</li><li>执行<code>select * from t1 where x1 = 结果</code></li></ol><p><code>select * from t1 where x1 = (select x1 from t2 where t1.x2 = t2.x2)</code><br>子查询的条件需要依赖t1的值</p><ol><li>先遍历t1表中每一条数据，对每一条数据取出x2，放到子查询</li><li>t2表的某条数据的x1字段值放到外层去判断</li></ol><p><code>select * from t1 where x1 in (select x2 from t2 where x3 = xxx)</code></p><ol><li>先执行子查询，将查询出来的数据写入临时表，也叫物化表</li></ol><p>物化表可能基于memory存储引擎通过内存存放。如果结果集太大，则可能用普通的B+树聚簇索引的方式放在磁盘上。物化表都会建立索引。中间结果数据写入物化表是有索引的</p><ol start="2"><li>如果t1数据量大，会将物化表作为驱动表先查询。</li></ol><p><code>select * from t1 where x1 in (select x2 from t2 where x3 = xxx)</code><br>底层会将这个转化为半连接<br><code>select t1.* from t1 semi join t2 on t1.x1 = t2.x2 and t2.x3 = xxx</code><br>语义上和IN语句+子查询一样。对于t1表而言，只要在t2表有符合t1.x1 &#x3D; t2.x2 和 t2.x3 &#x3D; xxx的数据，就可以筛选出来</p><h1 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h1><p><code>EXPLAIN 查询语句</code></p><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs jboss-cli">+<span class="hljs-params">----</span>+<span class="hljs-params">-------------</span>+<span class="hljs-params">---------------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">---------------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">----------</span>+<span class="hljs-params">-------</span>+<br>| id | select_type | table         | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |<br>+<span class="hljs-params">----</span>+<span class="hljs-params">-------------</span>+<span class="hljs-params">---------------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">---------------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">----------</span>+<span class="hljs-params">-------</span>+<br>|  1 | SIMPLE      | table_name    | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | NULL  |<br>+<span class="hljs-params">----</span>+<span class="hljs-params">-------------</span>+<span class="hljs-params">---------------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">---------------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">----------</span>+<span class="hljs-params">-------</span>+<br></code></pre></td></tr></table></figure><ul><li>id</li></ul><p>有一个SELECT语句就会对应一个id。<br>有时候一个SELECT语句涉及到了多个表，所以会对应多条执行计划，但是他们的执行计划id是一样的。<br>id越大越先执行，相同id从上到下执行。</p><ul><li>select_type</li></ul><p>这一条执行计划对应的查询是什么查询类型。一个大SQL中，不同的SELECT代表了一个什么角色。</p><ul><li>SIMPLE</li></ul><p>简单的 select 查询,查询中不包含子查询或者UNION</p><ul><li>PRIMARY</li></ul><p>为复杂查询创建的首要表(也是最外层的表) 这种类型通常与DERIVED 或者 UNION 混合使用见到</p><ul><li>UNION</li></ul><p>当SELECT 之前的关键字为UNION 或 UNION ALL时 会出现UNION 关键字</p><ul><li>DEPENDENT UNION</li></ul><p>当子查询中存在UNION时UNION 后的 select_type 会出现 DEPENDENT UNION 而union 语句的第一行为 DEPENDENT SUBQUERY</p><ul><li>UNION RESULT</li></ul><p>出现在UNION 或UNION ALL语句中 代表把所有结果集联合起来</p><ul><li>SUBQUERY</li></ul><p>出现在复杂非相关子查询中 ,简单相关子查询MySQL会进行改写</p><ul><li>DEPENDENT SUBQUERY</li></ul><p>出现在相关子查询中而非相关子查询MySQL可以进行改写</p><ul><li>DERIVED</li></ul><p>衍生表当查询使用内联视图时会出现此关键字</p><ul><li>MATERIALIZED</li></ul><p>子查询物化 ,当表出现在非相关子查询中并且需要进行物化时会出现MATERIALIZED关键词</p><ul><li>UNCACHEABLE SUBQUERY</li></ul><p>表示子查询不可被物化需要逐次运行</p><ul><li>UNCACHEABLE UNION</li></ul><p>子查询中出现UNION并且不可被缓存在UNION 后的 SELECT 语句出现此关键词</p><ul><li>table</li></ul><p>要查询的表名</p><ul><li>partitions</li></ul><p>表分区</p><ul><li>type</li></ul><p>针对当前表的访问方法，比如const、ref、rang、index、all。分别岱庙了聚簇索引、二级索引、全表扫描之类。</p><ul><li><p>const</p></li><li><p>ref</p></li><li><p>ref_or_null</p></li><li><p>eq_ref</p></li><li><p>range</p></li><li><p>index</p></li><li><p>index_merge</p></li><li><p>all</p></li><li><p>possible_keys</p></li></ul><p>与type结合，type确定了访问方式，可供选择的索引类型会放在这</p><ul><li>key</li></ul><p>实际选择的索引</p><ul><li>key_len</li></ul><p>索引长度</p><ul><li>ref</li></ul><p>使用某个字段的索引进行等值匹配搜索的时候，跟索引列进行等值匹配的那个目标值的信息</p><ul><li>rows</li></ul><p>预估通过索引或别的方式访问这个表的时候，大概会读取多少数据</p><ul><li>filtered</li></ul><p>经过搜索条件过滤之后的剩余数据的百分比</p><ul><li>extra</li></ul><p>额外的信息</p><h3 id="extra信息"><a href="#extra信息" class="headerlink" title="extra信息"></a>extra信息</h3><ul><li>Using index</li></ul><p><code>select * from t1 where x1=&#39;xxx&#39;</code><br>这次查询，仅仅涉及到了一个二级索引，不需要回表。</p><ul><li>Using index condition</li></ul><p><code>select * from t1 where x1&gt;&#39;xxx&#39; and x1 like &#39;%xxx&#39;</code><br>二级索引查询出来的结果还需要进行额外的条件比对。</p><ul><li>Using where</li></ul><p>针对一个表扫描，没用到索引，并且where里好几个条件，就会表示使用了Using where。<br>或者用到了索引，除了索引之外，还需要使用其他字段进行筛选。</p><ul><li>join buffer</li></ul><p>在多表关联的时候，关联条件并不是索引，此时会用join buffer的内存技术提升关联的性能</p><ul><li>Using filesort</li></ul><p>如如果排序的时候没有用到索引，会基于内存或者磁盘文件排序，大部分的时候都基于磁盘文件排序。<br>此时性能极差。</p><ul><li>Using temporary</li></ul><p>如果group by、union、distinct之类的语法没法直接使用索引进行分组聚合，那么会基于临时表完成，也存在大量的磁盘文件操作，效率极低。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><p>单表查询<br><code>EXPLAIN SELECT * FROM t1</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651154231783-dc794190-9b5e-4a43-9f9e-93feb50cf432.png#clientId=u6f51e465-8d3d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=185&id=ufe0d7622&margin=%5Bobject%20Object%5D&name=image.png&originHeight=185&originWidth=702&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11279&status=done&style=none&taskId=uc59c3420-2eaa-4dc6-a8cb-a03ea1cc254&title=&width=702" alt="image.png"><br>走全表扫描</p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><p>多表关联查询<br><code>EXPLAIN SELECT * FROM t1 join t2</code><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651154222755-07924e56-b3a4-4f44-ae72-4a50d00e50b7.png#clientId=u6f51e465-8d3d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=248&id=u64de7c72&margin=%5Bobject%20Object%5D&name=image.png&originHeight=248&originWidth=861&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17630&status=done&style=none&taskId=ufe6096c4-73ae-4004-82e5-1769e7f0096&title=&width=861" alt="image.png"></p><ol><li>首先访问第一个表t1，使用ALL方式全表扫描，扫出了3457条数据</li><li>访问表t2，因为是多表关联，存在笛卡尔积，t1表的每条数据都会去t2表全表扫描所有的4568条数据，和t2每条数据进行一个关联。Extra表明<code>Nested Loop</code>，就是嵌套循环的访问方式</li></ol><p>由于一个select所以id是一个。</p><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><p>子查询语句<br><code>EXPLAIN SELECT * FROM t1 WHERE x1 IN (SELECT x1 FROM t2) OR x3 = &#39;xxx&#39;</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651154054622-60564c68-52ed-4557-9c67-bec17dabd82c.png#clientId=u6f51e465-8d3d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=209&id=u4474de85&margin=%5Bobject%20Object%5D&name=image.png&originHeight=209&originWidth=779&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17900&status=done&style=none&taskId=u4b3f4d6d-339d-4b86-b52f-0a055a3eb2c&title=&width=779" alt="image.png"></p><ol><li>主查询的id为1，子查询id为2</li><li>第一条执行计划的select_type为<code>PRIMARY</code>,说明第一个执行计划的查询类型是主查询。possible_keys里存在index_x3，但是key里实际为NULL，并且type为ALL，说明查询并没有会用索引，而是走了全表扫描</li></ol><p>根据成本分析，可能x3字段使用索引扫描xxx的值，和全表扫描的代价差不多。</p><ol start="3"><li>第二条执行计划，select_type为<code>SUBQUERY</code>子查询。子查询针对t2表，子查询本身就是全表查询，但是对主查询而言，会使用x1 in这个筛选条件，type为index,key为index_x1，说明使用了x1字段的二级索引的方式，直接扫描x1字段的二级索引，跟子查询的结果集比对。<h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3>union语句<br><code>EXPLAIN SELECT * FROM t1 UNION SELECT * FROM t2</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651155312125-059a8a52-b570-4dae-a73d-5ed55a89d5ac.png#clientId=u6f51e465-8d3d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=253&id=u4a29867c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=253&originWidth=844&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19959&status=done&style=none&taskId=u9fe19f38-221f-421d-8cb6-1e6f6e19c78&title=&width=844" alt="image.png"><br>union会将两个结果集合并然后去重。第三条执行计划去进行去重。</li></ol><p>table是&lt;union1,2&gt;,是一个临时表名。extra里面是Using temporary，就是表示使用了临时表。</p><h1 id="SQL调优"><a href="#SQL调优" class="headerlink" title="SQL调优"></a>SQL调优</h1><p>SQL调优的核心，分析执行计划里哪些地方出现了全表扫描或者扫描数据过大，尽可能通过合理优化索引保证执行计划每个步骤都可以基于索引执行，避免扫描过多的数据。</p><ul><li>禁止MySQL半连接或者改变SQL预计结构避免自动半连接优化</li><li>通过force index强制某个SQL走指定索引</li><li>可能是MySQL机器负载过高导致SQL执行慢</li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="profiling"><a href="#profiling" class="headerlink" title="profiling"></a>profiling</h3><p>可以对SQL语句的执行耗时进行深入和细致的分析。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>索引</title>
    <link href="/2022/05/02/MySQL/%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/05/02/MySQL/%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h1 id="物理存储结构"><a href="#物理存储结构" class="headerlink" title="物理存储结构"></a>物理存储结构</h1><h2 id="数据页"><a href="#数据页" class="headerlink" title="数据页"></a>数据页</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>数据页之间组成双向链表，然后数据页内部的数据行组成单向链表，并且数据行根据主键从小到大排序。<br>每个数据页存在一个页目录，里面根据数据行的主键存放了一个目录，同时数据行是被分散到存储到不同槽位中。所以实际上每个数据页的目录中，就是这个页里每个主键跟所在槽位的映射。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651048696308-946a5d8e-8394-4554-a912-76b478e290d2.png#clientId=u4cacf8be-677a-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=309&id=u20009c1f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=309&originWidth=722&originalType=binary&ratio=1&rotation=0&showTitle=false&size=123366&status=done&style=none&taskId=uacf34772-7c59-46a2-b740-0581d3de3d0&title=&width=722" alt="image.png"></p><h3 id="全表扫描"><a href="#全表扫描" class="headerlink" title="全表扫描"></a>全表扫描</h3><ol><li>如果查询的是主键，会在页目录中进行二分查找</li><li>然后到对应数据页继续进行二分查找</li><li>如果查询的不是主键，会读取表对应的第一个数据页到buffer pool进行数据行遍历</li><li>如果第一个数据页查询不到，会继续加载下一个数据页继续遍历。</li><li></li></ol><h3 id="页分裂"><a href="#页分裂" class="headerlink" title="页分裂"></a>页分裂</h3><p>当后一页数据页中的所有行不一定比前一页中的行的id大，触发页分裂。</p><p>页分裂会保证后一个数据页中的所有行主键值比前一个数据页中主键值大。</p><h1 id="索引"><a href="#索引" class="headerlink" title="索引*"></a>索引*</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>聚簇索引</p><h3 id="非主键索引"><a href="#非主键索引" class="headerlink" title="非主键索引"></a>非主键索引</h3><h3 id="回表查询"><a href="#回表查询" class="headerlink" title="回表查询"></a>回表查询</h3><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><h2 id="索引使用规则"><a href="#索引使用规则" class="headerlink" title="索引使用规则"></a>索引使用规则</h2><h3 id="where语句索引规则"><a href="#where语句索引规则" class="headerlink" title="where语句索引规则"></a>where语句索引规则</h3><ul><li>等值匹配</li></ul><p>where条件里的字段基于等值查询，并且where条件里的字段名称和联合索引一样。就是等值匹配规则<br>针对联合索引而言，依次按照各个字段进行二分查找，先定位到第一个字段对应的值在哪个页里，然后如果第一个字段有多条数据值一样，就根据第二个字段查找。<br>where语句的字段顺序和联合索引不一致没关系，MySQL会自动优化。</p><ul><li>最左侧列匹配</li></ul><p>联合索引KEY(A,B,C)，并不需要完全一致，只需要最左侧的部分字段匹配，也可以用上索引</p><ul><li>最左前缀匹配</li></ul><p>如果使用like语法，那么也可以匹配到索引</p><ul><li>范围查找规则</li></ul><p>where语句如果有范围查询，那只对联合索引里最左侧的列进行范围查询才能用上索引</p><ul><li>等值匹配+范围匹配</li></ul><h3 id="order-by语句索引规则"><a href="#order-by语句索引规则" class="headerlink" title="order by语句索引规则"></a>order by语句索引规则</h3><h3 id="group-by语句索引规则"><a href="#group-by语句索引规则" class="headerlink" title="group by语句索引规则"></a>group by语句索引规则</h3><h1 id="索引设计"><a href="#索引设计" class="headerlink" title="索引设计"></a>索引设计</h1><ol><li>针对SQL语句的where条件、order by条件以及group by条件去设计索引，最好让where、order by和group by都可以用上联合索引最左侧开始的部分字段</li><li>一般建立索引尽量使用那些基数比较大的字段，才能发挥B+树的二分查找的优势</li><li>尽量对字段类型比较小的列设计索引，针对较长的字符串类型的列，可以设计前缀索引，仅仅包含部分字符到索引树中</li><li>索引列套函数，就会导致索引失效</li><li>索引设计不要太多，尽量两三个联合索引覆盖掉这个表的全部查询</li><li>主键建议自增，不要使用UUID。为了让聚簇索引不要频繁的分裂。</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>锁机制</title>
    <link href="/2022/05/02/MySQL/%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/05/02/MySQL/%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="锁机制流程"><a href="#锁机制流程" class="headerlink" title="锁机制流程"></a>锁机制流程</h3><ol><li>当事务A需要更新一行数据，发现没有锁，就会创建一个锁，包含trx_id和等待状态false。</li><li>事务B需要对同一行数据更新的时候，发现已经存在锁了，也会创建一个锁，包含trx_id和等待状态true，排在A后面。</li><li>事务A执行完后，会将自己的锁释放，然后检查后面是否还有其他锁。</li><li>事务B就会锁等待状态改为true，然后唤醒事务B继续执行。</li></ol><h3 id="锁类型"><a href="#锁类型" class="headerlink" title="锁类型"></a>锁类型</h3><ul><li>共享锁</li><li>独占锁<table><thead><tr><th>锁类型</th><th>独占锁</th><th>共享锁</th></tr></thead><tbody><tr><td>独占锁</td><td>互斥</td><td>互斥</td></tr><tr><td>共享锁</td><td>互斥</td><td>不互斥</td></tr></tbody></table></li></ul><h3 id="独占锁"><a href="#独占锁" class="headerlink" title="独占锁"></a>独占锁</h3><p>独占锁Exclude，也叫X锁。<br>当一个事务加了独占锁之后，其他事务要再更新这行数据，都要加独占锁，但是只能生成独占锁在后面等待。</p><p>此时对一行数据的读和写两个操作默认是不会加锁互斥。通过MVCC机制为了解决这个问题，避免频繁加锁互斥。 </p><p>查询操作也可以加锁：<code>select * from table for update</code><br>查询加了独占锁，在事务提交之前，任何人都不能更新数据，只能在本事务中更新数据，等你提交了，别人才可以更新数据。</p><h3 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h3><p>共享锁，也叫S锁。</p><p>查询方式加锁：在查询语句后面加上<code>lock in share mode</code></p><h3 id="元数据锁"><a href="#元数据锁" class="headerlink" title="元数据锁"></a>元数据锁</h3><p>Metadata Locks<br>执行DDL语句的时候会阻塞所有增删改操作，执行增删改操作的时候也会阻塞DDL操作。</p><h1 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>如果要读取别的事务在更新中的数据，有两个可能</p><ul><li>基于MVCC机制进行事务隔离，读取快照版本</li><li>查询的同时基于特殊语法去加独占锁或者共享锁<ul><li>查询的时候加独占锁，那么跟其他更新数据的事务加的独占锁互斥</li><li>查询的时候加共享锁，那么跟其他查询加的共享锁不互斥，但是跟其他事务更新数据加的独占锁互斥，跟其他查询加的独占锁也互斥</li></ul></li></ul><p>表锁分为两种</p><ul><li>表锁</li><li>表级的意向锁</li></ul><p>手动加表锁语法</p><ul><li>加表级共享锁<code>LOCK TABLES xxx READ</code></li><li>加表级独占锁<code>LOCK TABLES xxx WRITE</code></li></ul><p>意向锁加锁场景</p><ul><li>如果有事务在表里执行增删改操作，那在行级会加独占锁，同时会在表级加一个意向独占锁</li><li>如果有事务在表里执行查询操作，那么会在表级加一个意向共享锁</li></ul><table><thead><tr><th>锁类型</th><th>独占锁</th><th>意向独占锁</th><th>共享锁</th><th>意向共享锁</th></tr></thead><tbody><tr><td>独占锁</td><td>互斥</td><td>互斥</td><td>互斥</td><td>互斥</td></tr><tr><td>意向独占锁</td><td>互斥</td><td>不互斥</td><td>互斥</td><td>不互斥</td></tr><tr><td>共享锁</td><td>互斥</td><td>互斥</td><td>不互斥</td><td>不互斥</td></tr><tr><td>意向共享锁</td><td>互斥</td><td>不互斥</td><td>不互斥</td><td>不互斥</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事务机制</title>
    <link href="/2022/05/02/MySQL/%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/05/02/MySQL/%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="多事务并发问题"><a href="#多事务并发问题" class="headerlink" title="多事务并发问题"></a>多事务并发问题</h2><h3 id="脏写"><a href="#脏写" class="headerlink" title="脏写"></a>脏写</h3><p>两个事务在没有提交的情况下，修改同一个事务，结果其中一个事务回滚，将另一个事务修改的值也回滚了。</p><p>事务A和事务B同事更新一条数据，事务A先更新为值A，事务B然后更新为值B。<br>事务A在更新后写入一条undo log，值为NULL。事务B写入一条undo log，值为A。<br>事务B先提交事务，更新值为B。然后事务A进行回滚，读取undo log，将值回滚为NULL。<br>针对事务B而言就是脏写。</p><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>某个事务还未提交的时候，修改的数据，就让别的事务读取到了。</p><h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>在一个事务内多次重复读取的数据准确性</p><p>事务A先读取了一次数据，然后事务B进行修改，提交事务。事务A又读取了一次数据，会导致两次读取数据不一致。</p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>事务A 按照一定条件进行数据读取， 期间事务B 插入了相同搜索条件的新数据，事务A再次按照原先条件进行读取时，发现了事务B 新插入的数据</p><h2 id="数据库事务隔离级别"><a href="#数据库事务隔离级别" class="headerlink" title="数据库事务隔离级别"></a>数据库事务隔离级别</h2><p>不同的隔离级别可以避免不同的事务并发问题</p><table><thead><tr><th>隔离级别</th><th>脏写</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>读已提交</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>可重复读</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr><td>可串行化</td><td>×</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="read-uncommitted-读未提交"><a href="#read-uncommitted-读未提交" class="headerlink" title="read uncommitted 读未提交"></a>read uncommitted 读未提交</h3><p>不允许脏写</p><h3 id="read-commited-读已提交"><a href="#read-commited-读已提交" class="headerlink" title="read commited 读已提交"></a>read commited 读已提交</h3><p>不会发生脏写和脏读<br>简称RC级别</p><h3 id="repeatable-read-可重复读"><a href="#repeatable-read-可重复读" class="headerlink" title="repeatable read 可重复读"></a>repeatable read 可重复读</h3><p>不会发生脏写、脏读和不可重复读<br>简称RR级别，MySQL默认设置的事务隔离级别</p><h3 id="serializable-串行化"><a href="#serializable-串行化" class="headerlink" title="serializable 串行化"></a>serializable 串行化</h3><p>不允许事务并发执行，只能串行执行。</p><h3 id="Spring调整事务隔离级别"><a href="#Spring调整事务隔离级别" class="headerlink" title="Spring调整事务隔离级别"></a>Spring调整事务隔离级别</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql">@<span class="hljs-keyword">Transaction</span>(<span class="hljs-keyword">isolation</span>=<span class="hljs-keyword">Isolation</span>.<span class="hljs-keyword">DEFAULT</span>)<br></code></pre></td></tr></table></figure><ul><li>DEFAULT</li><li>READ_UNCOMMITTED</li><li>READ_COMMITTED</li><li>REPEATABLE_READ</li><li>SERIALIZABLE</li></ul><h1 id="MVCC多版本并发控制机制"><a href="#MVCC多版本并发控制机制" class="headerlink" title="MVCC多版本并发控制机制"></a>MVCC多版本并发控制机制</h1><p>multi-version concurrent control</p><h2 id="undo-log版本链"><a href="#undo-log版本链" class="headerlink" title="undo log版本链"></a>undo log版本链</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>每个数据存在两个隐藏字段trx_id和roll_pointer。trx_id标识最近一次更新这条数据的事务id，roll_pointer指向更新这个事务之前生成的undo log。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651029518144-5e661fdf-7abb-4f0e-93f0-7c3db9335730.png#clientId=u20432978-2835-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=326&id=uc9a8f7dd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=403&originWidth=562&originalType=binary&ratio=1&rotation=0&showTitle=false&size=81669&status=done&style=none&taskId=u57fce88d-27aa-4e39-ad81-89bdd749e30&title=&width=455" alt="image.png"></p><ol><li>事务A先更新数据，数据的值为A，trx_id为50，roll_pointer指向空的undo log</li><li>事务B修改数据，数据的值改为B，trx_id为58，然后更新之前会生成一个undo log记录值A，roll_pointer指向生成的undo log</li><li>事务C修改数据，数据的值改为C，trx_id为69，然后生成一条undo log记录记录值B，trx_id以及roll_pointer。数据的roll_pointer指向这个undo log。</li></ol><h3 id="ReadView机制"><a href="#ReadView机制" class="headerlink" title="ReadView机制"></a>ReadView机制</h3><p>执行一个事务的时候，会生成一个ReadView。</p><p>ReadView关键的字段</p><ul><li>m_ids</li></ul><p>此时有哪些事务在MySQL里执行还没有提交</p><ul><li>min_trx_id</li></ul><p>m_ids里最小的值</p><ul><li>max_trx_id</li></ul><p>mysql下一个要生成的事务id，即最大事务id</p><ul><li>creator_trx_id</li></ul><p>自身的事务id</p><p>保证自己只能读取到事务开启前，别的提交事务更新的值，还有自己事务更新的值。<br>如果事务开启前，别的事务正在运行，你事务开启之后，别的事务更新了值，自己绝对读不到。<br>如果事务开启后，比你晚开启的事务更新了值，也绝对读不到。</p><h3 id="RR数据隔离机制"><a href="#RR数据隔离机制" class="headerlink" title="RR数据隔离机制"></a>RR数据隔离机制</h3><p>事务只会开启一个ReadView</p><p>流程</p><ol><li>假设存在原始数据，trx_id&#x3D;32。</li><li>两个事务：事务A(id&#x3D;45)和事务B(id&#x3D;59)并发执行过来，事务B需要进行数据更新，事务A进行数据读取。</li><li>事务A开启一个ReadView。这个ReadView里m_ids包含事务A和事务B的两个id，45和59，min_trx_id是45，max_trx_id是60,creator_trx_id是45。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651031647526-72f57feb-f66d-4b44-9962-a9ed58a85ab9.png#clientId=u20432978-2835-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=157&id=u5063c28d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=226&originWidth=607&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51901&status=done&style=none&taskId=u862d3bba-8425-44a1-aaed-691ef99d32a&title=&width=422" alt="image.png"></p><ol start="4"><li>事务A第一次查询这行数据，判断当前这行数据的trx_id是否小于ReadView的min_trx_id，发现trx_id&#x3D;32，小于ReadView的min_trx_id。说明你的事务开启前，修改这行数据的事务已经提交了，此时可以查询这个数据。</li><li>然后事务B修改了这个值，将这个数据的trx_id改为自己的id59，同时roll_pointer指向了修改之前生成的一个undo log。然后事务B提交</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651032168697-67c35815-c164-4f7c-a8dc-79bd5f265cad.png#clientId=u20432978-2835-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=277&id=u352b7c95&margin=%5Bobject%20Object%5D&name=image.png&originHeight=338&originWidth=690&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95044&status=done&style=none&taskId=ua741a04c-c9be-4eba-bfe5-4937610955d&title=&width=565" alt="image.png"></p><ol start="6"><li>此时事务A再次查询，发现此时trx_id为59，大于ReadView的min_trx_id，同时小于max_trx_id，说明更新这条数据的事务，可能和自己差不多同时开启。然后会去看txr_id是否在ReadView的m_ids列表中，发现数据在其中，就表示这个修改数据的事务和自己同一时段并发执行提交的，所以这行数据不能查询。</li></ol><p>然后会根据roll_pointer，顺着undo log日志链去找最近的一条undo log。判断是否可读。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651032340660-14e5436b-4509-4e0c-8164-c8209d292887.png#clientId=u20432978-2835-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=314&id=u8323eb92&margin=%5Bobject%20Object%5D&name=image.png&originHeight=375&originWidth=611&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87144&status=done&style=none&taskId=u71997f1f-b65c-4518-a459-6be76cddd92&title=&width=512" alt="image.png"></p><ol start="7"><li>此时事务A自己更新了这个数据，改为值A，trx_id改为45，同时保存之前事务B修改的值的快照。</li><li>事务A又查询了这条数据，发现trx_id&#x3D;45，等于ReadView里的creator_trx_id，说明这行数据是自己修改的可以读到。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651032475880-2c600f3d-6867-4497-a59d-9899404e6091.png#clientId=u20432978-2835-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=386&id=u2324543b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=464&originWidth=603&originalType=binary&ratio=1&rotation=0&showTitle=false&size=127094&status=done&style=none&taskId=ua1e641d9-70e0-4f54-829e-c0c91ac3c67&title=&width=501" alt="image.png"></p><ol start="9"><li>事务A执行的过程中，又开启了事务C，将数据修改为值C，trx_id&#x3D;78。</li><li>事务A又进行了查询，发现trx_id大于ReadView中的max_trx_id，说明事务A开启之后，另一个事务更新了数据不可见。然后顺着undo log链找到之前版本，发现是自己修改的，就读出来。</li></ol><h3 id="RC数据隔离机制"><a href="#RC数据隔离机制" class="headerlink" title="RC数据隔离机制"></a>RC数据隔离机制</h3><p>当事务处于RC隔离级别的时候，每次发起查询，都会重新生成一个ReadView.</p><p>重新生成的ReadView，m_ids里的值不会存在已提交事务的id。所以会让当前事务可以读到事务期间提交的数据。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>log日志</title>
    <link href="/2022/05/02/MySQL/log%E6%97%A5%E5%BF%97/"/>
    <url>/2022/05/02/MySQL/log%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="为什么需要redo-log不直接刷盘"><a href="#为什么需要redo-log不直接刷盘" class="headerlink" title="为什么需要redo log不直接刷盘"></a>为什么需要redo log不直接刷盘</h3><p>如果把修改过的缓存页都刷入磁盘，首先磁盘页16KB，数据比较大，刷入磁盘比较耗时。并且可能只修改了缓存页的几个字段，直接刷盘很费资源<br>其次缓存页刷入磁盘是随机读写，性能很差。<br>redo log相对小，就记录表空间号+数据页号+偏移量+修改几个字节的值+具体的值，并且是顺序写入磁盘，速度很快。</p><h3 id="日志类型"><a href="#日志类型" class="headerlink" title="日志类型"></a>日志类型</h3><ul><li>MLOG_1BYTE</li><li>MLOG_2BYTE</li><li>…..</li><li>MLOG_WRITE_STRING</li></ul><p>redo lgo根据修改了数据页的几个字节的值，划分了不同的日志类型。<br>MLOG_1BYTE就是修改了1个字节的值，MLOG_2BYTE修改了2个字节的值，以此列推<br>如果一下子修改了一大串的值，就用MLOG_WRITE_STRING代表那个数据页的某个偏移量的位置插入或者修改一大串值。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>通常日志格式<br>日志类型，表空间ID，数据页号，数据页中的偏移量，具体修改的数据</p><p>如果是MLOG_WRITE_STRING类型，会带上修改数据长度<br>日志类型，表空间ID，数据页号，数据页中的偏移量，修改数据长度，具体修改的数据</p><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>默认情况下，redo log都会写入一个目录中，可以通过<code>show variables like &#39;datadir&#39;</code>查看，可以通过<code>innodb_log_group_home</code>设置目录路径。</p><p>redo log可以存在多个，一个写满了就会写下一个redo log。<br>通过<code>innodb_log_file_size</code>设置每个redo log文件的大小，默认48MB。<br>通过<code>innodb_log_files_in_group</code>设置日志文件的数量，默认两个。分别是ib_logfile0和ib_logfile1，每个48MB。第一个写满了，写第二个。第二个写满了，覆盖第一个继续写。</p><h2 id="redo-log-block"><a href="#redo-log-block" class="headerlink" title="redo log block"></a>redo log block</h2><p>redo log block存储多个单行日志。要写入磁盘的redo log先进入到redo log block这个数据结构，在写入磁盘文件。<br>一个redo log block512字节。这个redo log block的512字节分为3部分</p><ul><li>header12字节<ul><li>block no：4字节，块唯一编号</li><li>data length：2字节，block写入了多少字节数据</li><li>first record group：2字节，每个事务都会有多个redo log,是一个redo log group。在这个block里的第一组redo log的偏移量，用这个存储。</li><li>checkpoint on：4字节</li></ul></li><li>body496字节</li><li>trailer4字节</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650976507345-7d18c221-55c5-490a-a4b0-bc160a310d15.png#clientId=u10e5ea76-a38d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=318&id=u860d4b4b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=413&originWidth=571&originalType=binary&ratio=1&rotation=0&showTitle=false&size=83683&status=done&style=none&taskId=uf6d5cade-ef26-44d8-b56e-0bb699ca2a3&title=&width=440" alt="image.png"></p><h2 id="redo-log-buffer"><a href="#redo-log-buffer" class="headerlink" title="redo log buffer"></a>redo log buffer</h2><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>redo log buffer也是申请出来的一片连续内存，里面划分了很多个空的redo log block。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650978335343-6ab774aa-3da5-4624-bb2a-c69fbaff1b01.png#clientId=u10e5ea76-a38d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=297&id=u5ed805d9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=297&originWidth=766&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85902&status=done&style=none&taskId=u71a2c694-1eda-455d-8ed9-171c0151760&title=&width=766" alt="image.png"><br><code>innodb_log_buffer_size</code>设置redo log buffer大小，默认16MB。</p><p>redo log先写入内存的redo log block数据结构，然后才会吧redo log block写入磁盘文件。当要写一条redo log的时候，会从第一个redo log block开始写入，写满了会继续写下一个，直到所有的redo log block写满。<br>redo log buffer中所有的redo log block都写满了就会强制把redo log block刷入磁盘中。</p><p>执行事务的时候，会存在多个操作，就会有多个redo log，这多个redo log 就是一组redo log。每次一组redo log会先暂存在别的地方，然后等事务执行完，再把一组redo log写入到redo log buffer的block块中。如果一组redo log太多了，就可能放在两个redo log block中。</p><h3 id="刷盘时机"><a href="#刷盘时机" class="headerlink" title="刷盘时机"></a>刷盘时机</h3><ul><li>如果写入redo log buffer的日志文件已经占据了redo log buffer总容量的一半，就是超过8MB的redo log在缓存中，就会将他们刷入磁盘文件中</li><li>一个事务提交的时候，必须把他的那些redo log所在的redo log block都刷入到磁盘文件里。这样事务提交之后，修改的数据才不会丢失</li><li>后台线程定时刷新。有一个后台线程每隔1秒就会把redo log buffer里的redo log block刷到磁盘文件里</li><li>MySQL关闭的时候，redo log block都会刷入到磁盘里。</li></ul><h1 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>回滚日志，用于事务回滚场景。<br>记录与操作日志相反的记录，select语句不会记录。</p><ul><li>insert语句，会记录一个主键和一个对应的delete操作</li><li>delete语句，会记录原本数据，回滚的时候insert原本数据</li><li>update语句，会将更新前的值记录，回滚的时候重新update回去</li></ul><h2 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h2><h3 id="INSERT语句"><a href="#INSERT语句" class="headerlink" title="INSERT语句"></a>INSERT语句</h3><p>INSERT语句的undo log类型是TRX_UNDO_INSERT_REC<br>包含</p><ul><li>这条日志的开始位置</li><li>主键的各列长度和值</li></ul><p>主键的各列长度和值。自己指定的一个主键或联合主键、或隐藏row_id字段</p><ul><li>表id</li><li>undo log日志编号</li></ul><p>每个undo log都有自己的编号</p><ul><li>undo log日志类型</li></ul><p>INSERT的类型为TRX_UNDO_INDEX_REC</p><ul><li>这条日志的结束位置</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1651023836867-67b1643e-c751-411a-bf2c-36e1444ccea0.png#clientId=u7b54eaab-518c-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=103&id=u8635e76c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=103&originWidth=734&originalType=binary&ratio=1&rotation=0&showTitle=false&size=43019&status=done&style=none&taskId=u028f43ca-7cfe-4df4-b920-7d544981eda&title=&width=734" alt="image.png"></p><ol><li>在buffer pool的一个缓存页插入了一条数据，执行了insert语句，然后写了一条undo日志。</li><li>事务进行回滚，将整个INSERT语句对应的undo log拿出来</li><li>根据undo log去找到表和主键对应的缓存页，从里面删除insert语句写入的数据</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>物理存储</title>
    <link href="/2022/05/02/MySQL/%E7%89%A9%E7%90%86%E5%AD%98%E5%82%A8/"/>
    <url>/2022/05/02/MySQL/%E7%89%A9%E7%90%86%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="行数据的物理存储"><a href="#行数据的物理存储" class="headerlink" title="行数据的物理存储"></a>行数据的物理存储</h2><h3 id="行格式设置"><a href="#行格式设置" class="headerlink" title="行格式设置"></a>行格式设置</h3><ul><li>COMPACT<figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span>(cloums) ROW_FORMAT=COMPACT<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> ROW_FORMAT=COMPACT<br></code></pre></td></tr></table></figure>建表的时候，可以指定行存储格式，可以后序修改行存储格式<h3 id="行数据格式"><a href="#行数据格式" class="headerlink" title="行数据格式"></a>行数据格式</h3></li></ul><h4 id="变长存储格式"><a href="#变长存储格式" class="headerlink" title="变长存储格式"></a>变长存储格式</h4><p>在进行数据存储的时候，遇到变长字段，会带上一些额外的附加信息，比如变长字段的长度列表。当有多个变长字段的时候，是逆序存储的。</p><p>比如一行数据：VARCHAR(10) VARCHAR(5) VARCHAR(20) CHAR(1) CHAR(1)一共五个字段，其中三个是变长字段。此时存入一行数据：hello hi hao a a<br>实际存储格式可能为：0x03 0x02 0x05 值列表 头字段 hello hi hao a a</p><h4 id="NULL值列表"><a href="#NULL值列表" class="headerlink" title="NULL值列表"></a>NULL值列表</h4><p>所有允许值为NULL的字段，在这个列表中每个字段都会有一个二进制bit位的值，bit值为1说明NULL，0说明不是NULL，也是逆序排列.<br>一般起码是8bit的倍数，如果不足8bit位，会高位补0</p><h4 id="NULL值存储"><a href="#NULL值存储" class="headerlink" title="NULL值存储"></a>NULL值存储</h4><p>对于NULL值，不通过字符串在磁盘上存储，而是通过二进制的bit位来存储。一行数据如果有多个字段都是NULL，那么这个多个字段的NULL，会以bit的形式存放在NULL值列表中。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> customer (<br>  <span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  gender <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>),<br>  job <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>  school <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>)ROW_FORMAT=COMPACT;<br></code></pre></td></tr></table></figure><p>假设插入<code>jack NULL m NULL xx_school</code><br>磁盘存储为：0x09 0x04 头信息 cloumn1&#x3D;value1 cloumn2&#x3D;value2…..<br>NULL值列表存放除name外的字段：0101</p><p>数据读取</p><ol><li>将变长字段长度列表和NULL值列表读取出来，解析出有几个变长字段，哪几个变长字段是NULL。</li><li>根据变长字段长度列表中解析出不为NULL的变长字段的值长度，然后也知道哪些字段不是NULL</li><li>从实际的列值存储区域将每个字段读取出来<ol><li>如果是变长字段的值，就按变长值长度读取</li><li>如果是NULL值，则没有值存储</li><li>如果是定长字段，就按照定长长度读取</li></ol></li></ol><h4 id="数据头"><a href="#数据头" class="headerlink" title="数据头"></a>数据头</h4><p>每一行数据存储的时候，还有一个40bit的数据头，用来描述这行数据。</p><p>按照为顺序如下：</p><ul><li>第一位和第二位</li></ul><p>预留位，没有任何含义</p><ul><li>delete_mask 1bit</li></ul><p>标识这个数据是否被删除，MySQL删除一行数据的时候，不是马上从磁盘上删除，而是在数据头里搞一个标识</p><ul><li>min_rec_mask 1bit</li></ul><p>B+数每一层的非叶子节点里的最小值标记</p><ul><li>n_owned 4bit</li></ul><p>记录了一个记录数</p><ul><li>heap_no 13bit</li></ul><p>这行数据在记录堆里的位置</p><ul><li>record_type 3bit</li></ul><p>这行数据的类型</p><ul><li>0普通类型</li><li>1B+数非叶子节点</li><li>2最小值数据</li><li>3最大值数据</li><li>next_record 16bit</li></ul><p>指向下一条数据的指针</p><h4 id="隐藏字段格式"><a href="#隐藏字段格式" class="headerlink" title="隐藏字段格式"></a>隐藏字段格式</h4><p>实际存储一行数据的时候，会在正式的数据部分加入一些隐藏字段</p><ul><li>DB_ROW_ID</li></ul><p>行唯一标识，不是主键ID字段。如果没有指定主键和unique key唯一索引的时候，会自动加一个ROW_ID作为主键</p><ul><li>DB_TRX_ID</li></ul><p>事务ID，记录哪个事务更新的数据</p><ul><li>DB_ROLL_PTR</li></ul><p>回滚指针，用于进行事务回滚</p><h3 id="磁盘存储格式"><a href="#磁盘存储格式" class="headerlink" title="磁盘存储格式"></a>磁盘存储格式</h3><p><code>jack NULL m NULL xx_school</code></p><p>存储<br><code>0x09 0x04 00000101 0000000000000000000010000000000000011001 00000000094C（DB_ROW_ID）00000000032D（DB_TRX_ID） EA000010078E（DB_ROL_PTR） 616161 636320 6262626262</code></p><ul><li>0x09 0x04</li></ul><p>十六进制的变长字段长度</p><ul><li>00000101</li></ul><p>8bit倍数的NULL值列表</p><ul><li>0000000000000000000010000000000000011001</li></ul><p>40bit的数据头</p><ul><li>00000000094C（DB_ROW_ID）00000000032D（DB_TRX_ID） EA000010078E（DB_ROL_PTR）</li></ul><p>隐藏字段</p><ul><li><code>616161 636320 6262626262</code></li></ul><p><code>jack m xx_school</code>根据字符编码解码后的二进制</p><h3 id="行溢出"><a href="#行溢出" class="headerlink" title="行溢出"></a>行溢出</h3><p>一行数据存储的内容太多了，一个数据页放不下，此时只能溢出这个数据页，将数据溢出存放到其他数据页中，那些数据页就叫溢出页。</p><p>场景：<br>每一行数据都是存放在一个数据页中，数据页默认大小16KB。要是一个表字段类型为VARCHAR(65532),那么就会超长。实际上在存储这行数据的这个字段时，仅仅包含他的一部分数据，同事包含一个20直接的指针，指向其他的一些数据页，哪些数据页用链表串联起来，存放VARCHAR(65532)超大字段里的数据。</p><h2 id="数据页的物理存储"><a href="#数据页的物理存储" class="headerlink" title="数据页的物理存储"></a>数据页的物理存储</h2><h3 id="数据页数据格式"><a href="#数据页数据格式" class="headerlink" title="数据页数据格式"></a>数据页数据格式</h3><p>数据页默认16KB</p><ul><li>文件头 38字节</li><li>数据页头 56字节</li><li>最大记录&#x2F;最小记录 26字节</li><li>数据行区域  不固定</li><li>空闲区域不固定</li><li>数据页目录不固定</li><li>文件尾部8字节</li></ul><p>数据加载流程<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650947880616-7cf0389b-5943-4db2-be47-00eea16c4d2c.png#clientId=udbd5d66a-4fe3-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=254&id=u72c94638&margin=%5Bobject%20Object%5D&name=image.png&originHeight=254&originWidth=175&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29754&status=done&style=none&taskId=u0b1fb02e-a636-4cdf-b556-a4d69b51258&title=&width=175" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650947990421-08dc5e1b-f6d3-4e3c-bac7-124042946532.png#clientId=udbd5d66a-4fe3-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=310&id=u64b70956&margin=%5Bobject%20Object%5D&name=image.png&originHeight=310&originWidth=178&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34524&status=done&style=none&taskId=u17761352-f675-4d4c-86ba-bdb5434fb7c&title=&width=178" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650948036400-6d8d93d0-fecf-42ed-8dea-a929d2ddc2b9.png#clientId=udbd5d66a-4fe3-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=303&id=ucd2c94ff&margin=%5Bobject%20Object%5D&name=image.png&originHeight=303&originWidth=163&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37778&status=done&style=none&taskId=uc41649de-382e-4d49-968d-13986b9e303&title=&width=163" alt="image.png"></p><ol><li>最开始的数据页是空的，所以没有数据行的区域</li><li>插入一行数据，从磁盘上加载一个空的数据页到缓存里。在Buffer Pool中的一个空的缓存页插入一条数据。实际上就是在数据行那个区域插入一行数据，然后空闲区域的空间会减少一些。</li><li>随着不停的将数据插入缓存页空闲区域都耗尽了，就是缓存页满了。此时数据行区域会有很多行数据，空闲区域就没了。</li><li>之后通过刷盘机制刷回磁盘数据页。</li></ol><h3 id="表空间与数据区"><a href="#表空间与数据区" class="headerlink" title="表空间与数据区"></a>表空间与数据区</h3><p><strong>表空间</strong><br>创建的表，在磁盘上对应着<code>表名.ibd</code>的磁盘数据文件</p><p>系统表空间可能对应多个磁盘文件，自己创建的表对应的表空间，可能就是对应一个。<br>一个表空间的磁盘文件里，有很多数据页。<br>表空间用数据区管理数据页</p><p><strong>数据区-extent</strong><br>一个数据区对应64个数据页，每个数据页16KB，即一个数据区1MB。<br>一组数据区为256个数据区。<br>对于表空间而言，第一组数据区的第一个数据区的前3个数据页是固定的，存放一些描述性数据。</p><ul><li>FSP_HDR存放表空间和这一组数据区的一些属性</li><li>IBUF_BITMAP存放这一组数据页和所有insert buffer的一些信息</li><li>INODE存放一些特殊信息</li></ul><p>表空间的其他组数据区，每一组数据区的第一个数据区的头两个数据页，也是存放特殊信息。</p><ul><li>XDES存放这一组数据区的一些相关属性</li></ul><p>当我们需要执行CRUD操作的时候，就是从磁盘上的表空间的数据文件里，加载一些数据页到Buffer Pool的缓存页去使用。</p><ol><li>根据表找到一个表空间</li><li>找到表空间后，定位到对应的磁盘文件</li><li>根据磁盘文件，找到一个extent组</li><li>找到组内的一个extent</li><li>找到对应的数据页</li><li>将数据页从磁盘加载出来，放入Buffer Pool</li></ol><h2 id="读写机制"><a href="#读写机制" class="headerlink" title="读写机制"></a>读写机制</h2><h3 id="磁盘顺序读写"><a href="#磁盘顺序读写" class="headerlink" title="磁盘顺序读写"></a>磁盘顺序读写</h3><p>对redo log、binlog这种日志进行磁盘顺序读写</p><p>在Buffer Pool的缓存页更新了数据之后，必须要一条redo log日志。日志直接顺序写，追加在磁盘文件末尾。<br>磁盘顺序写的性能很高，如果使用了os cache机制，效率和内存差不多。<br>对顺序读写而言，需要关注指标磁盘每秒读写数据量和吞吐量指标</p><h3 id="磁盘随机读写"><a href="#磁盘随机读写" class="headerlink" title="磁盘随机读写"></a>磁盘随机读写</h3><p>对表空间的磁盘文件里的数据页进行磁盘随机读写<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650958145670-c299fd39-665c-4a57-9016-fb4090fa8662.png#clientId=udbd5d66a-4fe3-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=441&id=uc7dd6151&margin=%5Bobject%20Object%5D&name=image.png&originHeight=441&originWidth=681&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86613&status=done&style=none&taskId=u0ab7c825-3535-45ef-9d88-ba6588a80fa&title=&width=681" alt="image.png"><br>一个磁盘文件里有很多数据页，写入的时候会在一个随机的位置读取一个数据页到缓存。<br>由于要读取的这个数据页可能在磁盘的任意位置，所以在读取磁盘里的数据页的时候，只能使用随机读这种方式。<br>磁盘随机读的性能比较差，所以不可能每次更新数据都进行磁盘随机读，必须读取一个数据页后，放入缓存池中，下次直接基于缓存更新数据。</p><p>磁盘随机读需要关注IOPS和响应延迟</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Buffer Pool</title>
    <link href="/2022/05/02/MySQL/BufferPool/"/>
    <url>/2022/05/02/MySQL/BufferPool/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Buffer Pool缓存了磁盘上的真实数据。数据的增删改操作其实是对Buffer Pool里的数据进行的，同时配合了后序的redo log、刷盘等机制</p></blockquote><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>Buffer Pool默认配置128MB。<br>16核32G的机器，可以给Buffer Pool配置2GB内存</p><blockquote><p>[server]<br>innodb_buffer_pool_size &#x3D; 2147483648</p></blockquote><h1 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650791907107-69ca6ee0-5331-4e42-bdc3-6c95b584cdb1.png#clientId=uda449db4-43e4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=585&id=u70ea4a1c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=585&originWidth=1224&originalType=binary&ratio=1&rotation=0&showTitle=false&size=446663&status=done&style=none&taskId=uda47e78b-a7d6-4e94-bf55-59edf571f21&title=&width=1224" alt="image.png"></p><h2 id="缓冲页"><a href="#缓冲页" class="headerlink" title="缓冲页"></a>缓冲页</h2><p>MySQL对数据抽象出一个数据页的概念，把很多行数据放在一个数据页里面，即磁盘文件中会有很多数据页，每一页数据放了很多行数据。<br>如果要更新一行数据，数据库会找到这行数据所在的数据页，然后从磁盘中把这行数据所在的数据页直接加载到Buffer Pool中。<br>默认情况下，磁盘中存放的数据页大小是16KB。<br>存放入Buffer Pool中的数据页，被叫做缓存页。Buffer Pool在默认情况下，一个缓存页的大小和磁盘上的一个数据页大小一一对应，都是16KB。<br>每个缓存页又会有一个描述数据(又叫做控制数据)，大致包含信息：数据页所属的表空间、数据页的编号、缓存页在Buffer Pool中的地址等。<br>由于描述信息的存在，Buffer Pool中的描述数据大概相当于缓存页的5%左右。所以Buffer Pool的大小会比实际设定的大一部分。</p><p>初始化流程</p><ol><li>数据库启动的时候，会按照设置的Buffer Pool大小，再加大一点，去操作系统申请一块内存区域，作为Buffer Pool内存区域</li><li>内存区域申请完毕之后，会按照默认的缓存页的16KB大小以及800字节左右的描述数据大小，在Buffer Pool中划分出一个个缓存页和一个个对应的描述数据</li><li>数据库划分完毕后，所有的缓存页都是空闲的，此时所有的缓存页的描述数据都会放入free链表。</li></ol><p>使用流程</p><ol><li>数据加载到一个缓存页，free链表会移除这个缓存页，然后lru链表的冷数据区域的头部会放入这个缓存页</li><li>如果修改了一个缓存页，flush链表会记住这个脏页，lru链表中还可能会把数据从冷数据区域移动到热数据区域头部去</li><li>如果是查询了一个缓存页，那么此时就会把这个缓存页在lru链表中移动到热数据区域头部去，或者原本在热数据区域中，就移动到头部去。</li></ol><h2 id="free链表"><a href="#free链表" class="headerlink" title="free链表"></a>free链表</h2><p>free链表是一个双向链表数据结构，每个节点就是一个空闲的缓存页的描述数据块的地址。只要一个缓存页是空闲的，他的描述数据块就会放入这个free链表中，每个节点双向链接前后节点，组成双向链表。<br>free链表还存在一个基础节点，引用链表的头节点和尾节点，里面存储了链表中有多少个描述数据块的节点。<br>当磁盘上的数据页读取到对应的缓存页后，会将对应的描述数据写入缓存页的描述数据块中，并将描述数据块从free链表中去除。</p><h2 id="数据页缓存哈希表"><a href="#数据页缓存哈希表" class="headerlink" title="数据页缓存哈希表"></a>数据页缓存哈希表</h2><p>数据库还存在一个哈希表，用表空间号+数据页号作为key，缓存页的地址作为value。<br>当要使用一个数据页的时候，通过表空间号+数据页号作为key，去找个哈希表里查询，如果没有就读取数据页，如果有了就从缓存页读取。<br>每次读取一天个数据页到缓存后，就会在哈希表写入一条数据。</p><h2 id="flush链表"><a href="#flush链表" class="headerlink" title="flush链表"></a>flush链表</h2><p>flush链表也是通过缓存页的描述块中的两个指针，让被修改过的缓存页的描述数据块组成一个双向链表。<br>flush链表中的数据，就是内存里更新过的脏数据，后面需要被刷新回磁盘文件。</p><h2 id="LRU链表"><a href="#LRU链表" class="headerlink" title="LRU链表"></a>LRU链表</h2><p>LRU链表，Least Recently Used，最近最少使用的链表。用于数据淘汰使用。</p><h3 id="简单LRU链表"><a href="#简单LRU链表" class="headerlink" title="简单LRU链表"></a>简单LRU链表</h3><p><strong>流程</strong></p><ol><li>从磁盘加载一个数据页到缓存页的时候，就会将缓存页的描述数据块放到LRU链表的头部。即只要有数据的缓存页，都会在LRU里，并且最近加载的数据的缓存页，会放到LRU链表的头部。</li><li>如果某个缓存页的描述数据块本来在LRU链表尾部，后续只要查询或修改了这个缓存页的数据，也会把这个缓存页挪动到LRU链表的头部去。即最近被访问 过的缓存页都在LRU链表的头部。</li><li>当缓存页满的时候，就把LRU链表尾部的缓存页刷入磁盘，将需要的磁盘数据加载到空闲出来的缓存页中。</li></ol><p><strong>隐患</strong></p><ol><li>当触发了预读机制的时候，LRU链表中其实并不是按访问频繁排序，而是按加载顺序排序。会导致访问频繁的数据给刷掉</li><li>发生全表扫描的时候，会导致加载过多无用数据页，LRU链表的频繁访问数据被排到链尾，被过期掉</li></ol><h3 id="基于冷热数据分离的LRU链表"><a href="#基于冷热数据分离的LRU链表" class="headerlink" title="基于冷热数据分离的LRU链表"></a>基于冷热数据分离的LRU链表</h3><p>LRU链表被拆分为两个部分，一部分是热数据，一部分是冷数据。</p><ul><li>innodb_old_blocks_pct</li></ul><p>冷热数据比例，默认37，冷数据占比37%</p><ul><li>innodb_old_blocks_time</li></ul><p>默认1000毫秒。数据页被加载到缓存页后，过1秒访问这个缓存页，才会被挪动到热数据区</p><p>流程</p><ol><li>第一次被加载的缓存页，会不停的移动到冷数据区域的链表头部</li><li>在第一次加载之后，经过1秒(<code>innodb_old_blocks_time</code>)再被访问，会将他移动到热数据区域的链表头部</li></ol><p>LRU刷盘时机</p><ol><li>主动刷盘</li></ol><p>后台线程每隔一段时间就会把LRU链表的冷数据区域的尾部的一些缓存页，刷入磁盘，清除这几个缓存页，将他们加入回free链表。同时也会将flush链表数据刷回磁盘。</p><ol start="2"><li>被动刷盘</li></ol><p>当没有空闲的缓存页的时候，可能所有的free链表都被使用，flush链表中有很多被修改过的缓存页，lru链表中有一大堆的缓存页进行了冷热隔离。<br>此时需要从磁盘数据页加在一个到空闲缓存页中，就会从LRU链表的冷数据区域的尾部找到一个缓存页，将他收入磁盘并清空，然后将数据页加载到这个这个空闲缓存页中。</p><h1 id="生产经验"><a href="#生产经验" class="headerlink" title="生产经验"></a>生产经验</h1><h2 id="多个Buffer-Pool优化并发能力"><a href="#多个Buffer-Pool优化并发能力" class="headerlink" title="多个Buffer Pool优化并发能力"></a>多个Buffer Pool优化并发能力</h2><p>背景</p><blockquote><p>多线程操作Buffer Pool的时候，必然需要加锁。Buffer Pool属于内存中的操作，比较快，但是还是有一定影响。</p></blockquote><p>配置<br>MySQL默认规则：当Buffer Pool分配的内存小于1GB的时候，最多只会给一个Buffer Pool<br>可以修改Buffer Pool数量</p><figure class="highlight ini"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[server]</span><br><span class="hljs-comment"># 将Buffer Pool大小设置为8G</span><br><span class="hljs-attr">innodb_buffer_pool_size</span> = <span class="hljs-number">8589934592</span><br><span class="hljs-comment"># Buffer Pool实例数量设置为4</span><br><span class="hljs-attr">innodb_buffer_pool_instances</span> = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="通过chunk来支持数据库运行期间的Buffer-Pool动态调整"><a href="#通过chunk来支持数据库运行期间的Buffer-Pool动态调整" class="headerlink" title="通过chunk来支持数据库运行期间的Buffer Pool动态调整"></a>通过chunk来支持数据库运行期间的Buffer Pool动态调整</h2><p><strong>chunk机制</strong><br>Buffer Pool由很多个chunk组成，大小由<code>innodb_buffer_pool_size</code>控制，默认值128MB。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650886913648-f7bee7cb-4cd2-4025-a803-7bc40d0dd5cb.png#clientId=u75ab20fb-b04d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=409&id=ub95dbcc4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=409&originWidth=794&originalType=binary&ratio=1&rotation=0&showTitle=false&size=240929&status=done&style=none&taskId=u02e00e08-d6e7-4851-a800-58f95f1d2dd&title=&width=794" alt="image.png"></p><p>假如Buffer Pool现在8G需要动态加到16G，此时需要申请一系列的128MB大小的chunk，每个chunk是连续的128MB内存。然后将申请到的chunk内存分配给buffer pool。</p><h2 id="设置Buffer-Pool"><a href="#设置Buffer-Pool" class="headerlink" title="设置Buffer Pool"></a>设置Buffer Pool</h2><p>Buffer Pool总大小 &#x3D; (chunk大小 * Buffer Pool数量) 的倍数<br>比如：默认chunk代销128MB，此时机器内存32GB，假如给Buffer Pool总大小20G上下，那么需要估算Buffer Pool数量。假设Buffer Pool数量16个，此时chunk大小 * Buffer Pool数量 &#x3D; 2048MB，Buffer Pool总大小是2048MB的10倍，可以。</p><h2 id="参数查看"><a href="#参数查看" class="headerlink" title="参数查看"></a>参数查看</h2><p><code>SHOW ENGINE INNODB STATUS</code> 查看InnoDB信息<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650888171833-057058f0-7ebf-4956-a76d-c902ddaddfe5.png#clientId=u75ab20fb-b04d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=487&id=u7a17c79f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=487&originWidth=575&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34262&status=done&style=none&taskId=u518f58a5-1c0a-4f94-a860-f163dc13692&title=&width=575" alt="image.png"></p><ul><li>Total memory allocated</li></ul><p>buffer pool最终的总大小</p><ul><li>Buffer pool size</li></ul><p>buffer pool一共能容纳多少缓存页</p><ul><li>Free buffers</li></ul><p>free链表中一共多少个空闲的缓存页可用</p><ul><li>Database pages&#x2F;Old database pages</li></ul><p>lru链表中一共多少个缓存页，以及冷热数据区域里的缓存页数量</p><ul><li>Modified db pages</li></ul><p>flush链表中的缓存页数量</p><ul><li>Pending reads和Pending writes</li></ul><p>等待从磁盘上加载进缓存页的数量，还有就是即将从lru链表中刷入磁盘的数量、即将从flush链表中刷入磁盘的数量</p><ul><li>Pages made young和not young</li></ul><p>lru冷数据区域里访问之后转移到热数据区域的缓存页的数量，以及在lru冷数据区域里1s内被访问了没进入热数据区域的缓存页的数量</p><ul><li>youngs&#x2F;s和not youngs&#x2F;s</li></ul><p>每秒从冷数据区域进入热数据区域的缓存页的数量，以及每秒在冷数据区域里被访问了但是不能进入热数据区域的缓存页的数量</p><ul><li>Pages read xxxx, created xxx, written xxx，xx reads&#x2F;s, xx creates&#x2F;s, 1xx writes&#x2F;s</li></ul><p>已经读取、创建和写入了多少个缓存页，以及每秒钟读取、创建和写入的缓存页数量</p><ul><li>Buffer pool hit rate xxx &#x2F; 1000</li></ul><p>每1000次访问，有多少次是直接命中了buffer pool里的缓存的</p><ul><li>young-making rate xxx &#x2F; 1000 not xx &#x2F; 1000</li></ul><p>每1000次访问，有多少次访问让缓存页从冷数据区域移动到了热数据区域，以及没移动的缓存页数量</p><ul><li>LRU len</li></ul><p>lru链表里的缓存页的数量</p><ul><li>I&#x2F;O sum</li></ul><p>最近50s读取磁盘页的总数</p><ul><li>I&#x2F;O cur</li></ul><p>现在正在读取磁盘页的数量</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL部署与扩展</title>
    <link href="/2022/05/02/MySQL/MySQL%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%89%A9%E5%B1%95/"/>
    <url>/2022/05/02/MySQL/MySQL%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL机器选型"><a href="#MySQL机器选型" class="headerlink" title="MySQL机器选型"></a>MySQL机器选型</h1><ul><li>Java应用系统部署机器</li></ul><p>2核4G或者4核8G<br>4核8G的机器根据请求处理速度，从每秒1.200到每秒7.800都可能。正常情况在4.500左右</p><ul><li>数据库部署机器</li></ul><p>最低配置8核16G,一般16核32G<br>16核32G的机器每秒2.3000并发没问题</p><h1 id="MySQL压测"><a href="#MySQL压测" class="headerlink" title="MySQL压测"></a>MySQL压测</h1><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>QPS：Query Per Second 每秒处理请求数<br>TPS：Transaction Per Second 每秒可处理的事务量</p><h2 id="压测指标"><a href="#压测指标" class="headerlink" title="压测指标"></a>压测指标</h2><h3 id="IO相关指标"><a href="#IO相关指标" class="headerlink" title="IO相关指标"></a>IO相关指标</h3><ul><li>IOPS</li></ul><p>机器的随机IO并发处理能力<br>内存中更新的脏数据库，最后由后台IO线程在不确定时间刷回磁盘。IOPS指标太低，会导致内存脏数据刷回磁盘的效率不高。<br>200 IOPS表示每秒可以执行200个随机IO读写请求</p><ul><li>吞吐量</li></ul><p>机器的磁盘存储每秒可以读写多少字节的数据量</p><ul><li>latency</li></ul><p>往磁盘写入一条数据的延迟<br>磁盘读写延迟越低，数据库性能就越高，执行每个SQL语句和事务的时候速度就越快。</p><h3 id="机器指标"><a href="#机器指标" class="headerlink" title="机器指标"></a>机器指标</h3><ul><li>CPU负载</li><li>网络负载</li></ul><p>观察在压测到一定的QPS和TPS的时候，每秒机器的网卡会输入多少MB数据，输出多少MB数据</p><ul><li>内存负载</li></ul><p>观察内存使用情况</p><h2 id="压测工具-sysbench"><a href="#压测工具-sysbench" class="headerlink" title="压测工具-sysbench"></a>压测工具-sysbench</h2><h3 id="压测参数"><a href="#压测参数" class="headerlink" title="压测参数"></a>压测参数</h3><ul><li>–db-driver&#x3D;mysql</li></ul><p>基于mysql驱动去连接mysql数据库</p><ul><li>–time&#x3D;300</li></ul><p>连续访问300秒</p><ul><li>–threads&#x3D;10</li></ul><p>10个线程模拟并发访问</p><ul><li>–report-interval&#x3D;1</li></ul><p>每隔1秒输出压测情况</p><ul><li>–mysql-host&#x3D;127.0.0.1 –mysql-port&#x3D;3306 –mysql-user&#x3D;test_user –mysql-password&#x3D;test_user</li></ul><p>mysql连接参数</p><ul><li>–mysql-db&#x3D;test_db –tables&#x3D;20 –table_size&#x3D;1000000</li></ul><p>在test_db库里，构造20个测试表，每个表构造100W条测试数据</p><ul><li>oltp_read_write</li></ul><p>执行oltp数据库的读写测试</p><ul><li>–db-ps-mode&#x3D;disable</li></ul><p>禁止ps模式</p><h3 id="压测命令"><a href="#压测命令" class="headerlink" title="压测命令"></a>压测命令</h3><ul><li><p>构造测试表和测试数据</p><blockquote><p>sysbench –db-driver&#x3D;mysql –time&#x3D;300 –threads&#x3D;10 –report-interval&#x3D;1 –mysql-host&#x3D;127.0.0.1 –mysql-port&#x3D;3306 –mysql-user&#x3D;test_user –mysql-password&#x3D;test_user –mysql-db&#x3D;test_db –tables&#x3D;20 –table_size&#x3D;1000000 oltp_read_write –db-ps-mode&#x3D;disable prepare</p></blockquote></li><li><p>测试综合读写TPS</p></li></ul><p>使用oltp_read_write模式</p><blockquote><p>sysbench –db-driver&#x3D;mysql –time&#x3D;300 –threads&#x3D;10 –report-interval&#x3D;1 –mysql-host&#x3D;127.0.0.1 –mysql-port&#x3D;3306 –mysql-user&#x3D;test_user –mysql-password&#x3D;test_user –mysql-db&#x3D;test_db –tables&#x3D;20 –table_size&#x3D;1000000 oltp_read_write –db-ps-mode&#x3D;disable run</p></blockquote><ul><li>测试只读性能</li></ul><p>使用oltp_read_only模式</p><blockquote><p>sysbench –db-driver&#x3D;mysql –time&#x3D;300 –threads&#x3D;10 –report-interval&#x3D;1 –mysql-host&#x3D;127.0.0.1 –mysql-port&#x3D;3306 –mysql-user&#x3D;test_user –mysql-password&#x3D;test_user –mysql-db&#x3D;test_db –tables&#x3D;20 –table_size&#x3D;1000000 oltp_read_only –db-ps-mode&#x3D;disable run</p></blockquote><ul><li>测试删除性能</li></ul><p>使用oltp_delete模式</p><blockquote><p>sysbench –db-driver&#x3D;mysql –time&#x3D;300 –threads&#x3D;10 –report-interval&#x3D;1 –mysql-host&#x3D;127.0.0.1 –mysql-port&#x3D;3306 –mysql-user&#x3D;test_user –mysql-password&#x3D;test_user –mysql-db&#x3D;test_db –tables&#x3D;20 –table_size&#x3D;1000000 oltp_delete –db-ps-mode&#x3D;disable run</p></blockquote><ul><li>测试更新索引字段性能</li></ul><p>使用oltp_update_index模式</p><blockquote><p>sysbench –db-driver&#x3D;mysql –time&#x3D;300 –threads&#x3D;10 –report-interval&#x3D;1 –mysql-host&#x3D;127.0.0.1 –mysql-port&#x3D;3306 –mysql-user&#x3D;test_user –mysql-password&#x3D;test_user –mysql-db&#x3D;test_db –tables&#x3D;20 –table_size&#x3D;1000000 oltp_update_index –db-ps-mode&#x3D;disable run</p></blockquote><ul><li>测试更新非索引字段性能</li></ul><p>使用oltp_update_non_index模式</p><blockquote><p>sysbench –db-driver&#x3D;mysql –time&#x3D;300 –threads&#x3D;10 –report-interval&#x3D;1 –mysql-host&#x3D;127.0.0.1 –mysql-port&#x3D;3306 –mysql-user&#x3D;test_user –mysql-password&#x3D;test_user –mysql-db&#x3D;test_db –tables&#x3D;20 –table_size&#x3D;1000000 oltp_update_non_index –db-ps-mode&#x3D;disable run</p></blockquote><ul><li>测试插入性能</li></ul><p>使用oltp_insert模式</p><blockquote><p>sysbench –db-driver&#x3D;mysql –time&#x3D;300 –threads&#x3D;10 –report-interval&#x3D;1 –mysql-host&#x3D;127.0.0.1 –mysql-port&#x3D;3306 –mysql-user&#x3D;test_user –mysql-password&#x3D;test_user –mysql-db&#x3D;test_db –tables&#x3D;20 –table_size&#x3D;1000000 oltp_insert –db-ps-mode&#x3D;disable run</p></blockquote><ul><li>测试写入性能</li></ul><p>使用oltp_write_only模式</p><blockquote><p>sysbench –db-driver&#x3D;mysql –time&#x3D;300 –threads&#x3D;10 –report-interval&#x3D;1 –mysql-host&#x3D;127.0.0.1 –mysql-port&#x3D;3306 –mysql-user&#x3D;test_user –mysql-password&#x3D;test_user –mysql-db&#x3D;test_db –tables&#x3D;20 –table_size&#x3D;1000000 oltp_write_only –db-ps-mode&#x3D;disable run</p></blockquote><ul><li>清除数据<blockquote><p>sysbench –db-driver&#x3D;mysql –time&#x3D;300 –threads&#x3D;10 –report-interval&#x3D;1 –mysql-host&#x3D;127.0.0.1 –mysql-port&#x3D;3306 –mysql-user&#x3D;test_user –mysql-password&#x3D;test_user –mysql-db&#x3D;test_db –tables&#x3D;20 –table_size&#x3D;1000000 oltp_read_write –db-ps-mode&#x3D;disable cleanup</p></blockquote></li></ul><h3 id="压测结果分析"><a href="#压测结果分析" class="headerlink" title="压测结果分析"></a>压测结果分析</h3><blockquote><p>[ 22s ] thds: 10 tps: 380.99 qps: 7312.66 (r&#x2F;w&#x2F;o: 5132.99&#x2F;1155.86&#x2F;1321.35) lat (ms, 95%): 21.33 err&#x2F;s: 0.00 reconn&#x2F;s: 0.00</p></blockquote><ul><li>thds: 10</li></ul><p>10个线程在压测</p><ul><li>tps: 380.99</li></ul><p>每秒执行了380.99个事务</p><ul><li>qps: 7312.66</li></ul><p>每秒执行了7312.66个请求</p><ul><li>(r&#x2F;w&#x2F;o: 5132.99&#x2F;1155.86&#x2F;1321.35)</li></ul><p>大于qps解释<br>在每秒7312.66个请求中，有5132.99个读请求，1155.86个写请求，1321.35个其他请求</p><ul><li>lat (ms, 95%): 21.33</li></ul><p>95%的请求延迟在21.33ms以下</p><ul><li>err&#x2F;s: 0.00 reconn&#x2F;s: 0.00</li></ul><p>每秒0个请求失败，发生了0次网络重试</p><h3 id="压测报告分析"><a href="#压测报告分析" class="headerlink" title="压测报告分析"></a>压测报告分析</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650773289834-f739eb4a-1b96-4830-9b2b-bb6aea2f6c93.png#clientId=ua04f6b6d-21e8-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=631&id=u035355f1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=631&originWidth=531&originalType=binary&ratio=1&rotation=0&showTitle=false&size=49502&status=done&style=none&taskId=u41ef970e-5f72-4bae-81de-945629a13e2&title=&width=531" alt="image.png"></p><h2 id="机器性能指标"><a href="#机器性能指标" class="headerlink" title="机器性能指标"></a>机器性能指标</h2><h3 id="CPU负载"><a href="#CPU负载" class="headerlink" title="CPU负载"></a>CPU负载</h3><p>top - 15:52:00 up 42:35, 1 user, load average: 0.15, 0.05, 0.01</p><ul><li>15:52:00</li></ul><p>当前时间</p><ul><li>up 42:35</li></ul><p>机器已经运行了多久</p><ul><li>1 user</li></ul><p>一个用户在使用</p><ul><li>load average: 0.15, 0.05, 0.01</li></ul><p>CPU在1分钟、5分钟、15分钟内的负载情况</p><h3 id="内存负载"><a href="#内存负载" class="headerlink" title="内存负载"></a>内存负载</h3><p>Mem: 33554432k total, 20971520k used, 12268339 free, 307200k buffers<br>总内存、已使用内存、空闲内存、OS缓冲区内存</p><h3 id="磁盘IO"><a href="#磁盘IO" class="headerlink" title="磁盘IO"></a>磁盘IO</h3><p>dstat -d</p><blockquote><p>-dsk&#x2F;total -<br>read writ<br>103k 211k<br>0   11k</p></blockquote><p>存储的IO每秒读取103kb的数据，每秒写入211kb的数据<br>普通机械硬盘可以每秒上百MB读写数据量</p><p>dstat -r</p><blockquote><p>–io&#x2F;total-<br>read writ<br>0.25 31.9<br>0   253<br>0   39.0</p></blockquote><p>读IOPS和写IOPS分别多少，也就是随机磁盘读取每秒多少次，随机磁盘写入每秒多少次<br>随机磁盘读写在每秒2.300次是可以承受的</p><h3 id="网卡流量"><a href="#网卡流量" class="headerlink" title="网卡流量"></a>网卡流量</h3><p>dstat -n</p><blockquote><p>-net&#x2F;total-<br>recv send<br>16k  17k</p></blockquote><p>每秒网卡接收到的流量、每秒网卡发送出去的流量<br>机器如果是千兆网卡，每秒网卡总流量在100MB左右</p><h1 id="数据库监控"><a href="#数据库监控" class="headerlink" title="数据库监控"></a>数据库监控</h1><h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><p>一个监控数据采集和存储系统，可以利用监控数据采集组件(如mysql_exporter)从指定的MySQL数据库中采集需要的监控数据。然后自己有一个时序数据库，会将采集到的监控数据放入时序数据库中。</p><h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><p>一个可视化的监控数据展示系统，将Prometheus采集到的的数据展示层报表。</p><h1 id="MySQL高可用架构"><a href="#MySQL高可用架构" class="headerlink" title="MySQL高可用架构"></a>MySQL高可用架构</h1><ul><li>主从集群</li><li>主从间读写分离<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2></li></ul><ol><li>从库有一个io线程和主库的dump线程建立tcp连接</li><li>从库io线程发送一个拉取binlog日志的请求</li><li>主库的dump线程接收到请求后，根据binlog的position到主库的binlog中找到之后的数据发送给从库</li><li>从库的io线程收到数据后写入到relay中</li><li>从库的sql线程从relay中读取数据后重放数据到从库的数据页中</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL概述</title>
    <link href="/2022/05/02/MySQL/MySQL%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/05/02/MySQL/MySQL%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL概览"><a href="#MySQL概览" class="headerlink" title="MySQL概览"></a>MySQL概览</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/12966419/1650765459867-10901ffd-302f-435d-b5f7-a42b0a456a6c.jpeg"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>数据库连接池的工作线程监听网络连接中的请求，读取和解析一条我们发送给MySQL的SQL语句</li><li>工作线程接收到SQL语句后，转交给SQL接口执行</li><li>SQL接口会找到查询解析器，进行SQL解析</li><li>然后会找查询优化器选择最优的查询路径</li><li>执行器根据优化器生成的一套执行计划，然后不停的调用存储引擎的各种接口去完成SQL语句的执行计划<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2></li></ol><ul><li>数据库连接池</li></ul><p>数据库连接池用于维护与系统之间的多个连接</p><ul><li>SQL接口 SQL Interface</li></ul><p>SQL接口，就是一套执行SQL的接口，专门用于执行我们发送给MySQL的SQL语句</p><ul><li>查询解析器 Parser</li></ul><p>负责对SQL语句进行解析，按照设定的SQL语法，对接收的SQL进行解析</p><ul><li>查询优化器 Optimizer</li></ul><p>针对SQL语句，生成查询路径树，然后从中选择一条最优路径</p><ul><li>存储引擎接口</li></ul><p>负责执行SQL语句，帮助我们去访问内存以及磁盘上的数据</p><ul><li>InnoDB</li><li>MyISAM</li><li>Memory</li><li>执行器</li></ul><p>根据执行计划调用存储引擎的接口</p><ul><li>binlog</li></ul><p>归档日志，记录偏向逻辑性的日志，在事务提交的时候，同时会将这次更新对应的binlog写入磁盘文件中<br>binlog刷盘策略：sync_binlog</p><ul><li>0 默认值</li></ul><p>将binlog写入os cache内存缓存</p><ul><li>1</li></ul><p>强制提交事务的时候，把binlog直接写入到磁盘文件里</p><h1 id="InnoDB概览"><a href="#InnoDB概览" class="headerlink" title="InnoDB概览"></a>InnoDB概览</h1><h2 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h2><p>一条更新语句的流程</p><ol><li>先检查数据是否在缓冲池，如果不在，会从磁盘加载到缓冲池，然后对这行记录加独占锁</li><li>更新数据前，将原本要的值更写入undo日志文件中</li><li>更新数据，先更新缓存池中的记录，此时数据就是脏数据(磁盘上的数据未修改)</li><li>将redo日志写入Redo Log Buffe的redo log blockr中</li><li>（宕机）不要紧，内存里修改过的缓冲数据以及redo日志丢失，还未写入磁盘，所以没关系</li><li>将redo日志写入磁盘，将binlog写入磁盘，提交事务</li><li>将本次更新对应的binlog文件名和这次更新的binlog日志在文件里的位置，都写入redo log日志文件，同时在redo log日志文件写入一个commit标记（保持redo log日志和binlog日志一致）</li><li>后台线程一段时间后，随机的将内存buffer pool中的修改后的脏数据刷回磁盘上的数据文件中</li></ol><h2 id="组件-1"><a href="#组件-1" class="headerlink" title="组件"></a>组件</h2><ul><li>缓冲池Buffer Pool</li></ul><p>缓存很多数据，以便在以后查询的时候，不需要从磁盘查询。</p><ul><li>undo日志</li></ul><p>存储更新前的值，为了回滚数据。</p><ul><li>Redo Log Buffer</li></ul><p>内存的缓冲区，存放redo日志，记录对数据做了什么修改<br>redo日志刷盘策略：innodb_flush_log_at_trx_commit</p><ul><li>0</li></ul><p>提交事务的时候，不会将redo log buffer里的数据刷入磁盘文件</p><ul><li>1</li></ul><p>提交事务的时候，必须将redo log从内存刷入磁盘文件。只要事务提交成功，那么redo log就必然在磁盘里</p><ul><li>2</li></ul><p>提交事务的时候，将redo日志写入磁盘文件对应的os cache中，而不是直接进入磁盘文件，等后面操作系统线程自动刷入磁盘</p><h1 id="MySQL机制"><a href="#MySQL机制" class="headerlink" title="MySQL机制"></a>MySQL机制</h1><h2 id="预读机制"><a href="#预读机制" class="headerlink" title="预读机制"></a>预读机制</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>从磁盘上加载一个数据页的时候，可能会连带这把这个数据页相邻的其他数据页也加载到缓存中。</p><h3 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h3><ol><li>参数：innodb_read_ahead_threshold</li></ol><p>默认值56<br>如果顺序的访问了一个区里的多个数据页，访问的数据页的数量超过了这个阈值，就会触发预读机制，把下一个相邻区中的所有数据页都加载到缓存中</p><ol start="2"><li>参数：innodb_random_read_ahead</li></ol><p>默认OFF<br>如果Buffer Pool里缓存了一个区里的13个连续的数据页，并且这些数据页都是比较频繁被访问的，此时会直接触发预读机制，把这个区的其他数据页加载到缓存里。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OOM优化</title>
    <link href="/2022/05/01/JVM/OOM%E4%BC%98%E5%8C%96/"/>
    <url>/2022/05/01/JVM/OOM%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="可能发生OOM的区域"><a href="#可能发生OOM的区域" class="headerlink" title="可能发生OOM的区域"></a>可能发生OOM的区域</h2><h3 id="Metaspace发生OOM"><a href="#Metaspace发生OOM" class="headerlink" title="Metaspace发生OOM"></a>Metaspace发生OOM</h3><p>设置Metaspace大小的参数</p><ul><li>-XX:MetaspaceSize&#x3D;512m</li><li>-XX:MaxMetaspaceSize&#x3D;512m</li></ul><p>发生Metaspace OOM的可能问题</p><ul><li>Metaspace参数为默认值，导致大型系统运行会OOM</li><li>通过cglib等技术动态生成一些类，使用过的话，很容易将Metaspace塞满，引发内存溢出。</li></ul><h3 id="线程的栈内存发生OOM"><a href="#线程的栈内存发生OOM" class="headerlink" title="线程的栈内存发生OOM"></a>线程的栈内存发生OOM</h3><p>每次方法调用的栈帧都是要占用内存的。<br>每个线程的虚拟机栈大小固定，一般设置1MB，每次线程调用一个方法，就会将本次方法调用的栈帧压入虚拟机内，栈帧内有发放的局部变量。</p><p>发生栈内存溢出的可能问题</p><ul><li>错误的递归调用导致</li></ul><h3 id="堆内存发生OOM"><a href="#堆内存发生OOM" class="headerlink" title="堆内存发生OOM"></a>堆内存发生OOM</h3><p>堆内存内存溢出的可能</p><ul><li>系统承载高并发请求，因为请求量过大，导致大量对象都是存活的，所以要继续放入新的对象放不下，引发OOM</li><li>系统有内存泄漏问题，莫名其妙弄了很多对象并且对象都是存活的，没有及时取消对他们的应用。导致触发GC还是无法回收，只能引发内存溢出<h3 id="堆外内存发生OOM"><a href="#堆外内存发生OOM" class="headerlink" title="堆外内存发生OOM"></a>堆外内存发生OOM</h3><code>Direct buffer memory</code></li></ul><h2 id="空间分配"><a href="#空间分配" class="headerlink" title="空间分配"></a>空间分配</h2><p>4核8G的机器<br>Metaspace一般设置512MB大小<br>堆内存一般占机器内存的一半差不多，大概4GB<br>剩余的栈内存根据线程来，每个线程设置1MB。一般一个Tomcat内部总线程在1000个内大部分时间几百个，预计总大小1GB</p><h2 id="问题解决思路"><a href="#问题解决思路" class="headerlink" title="问题解决思路"></a>问题解决思路</h2><ol><li>确定内存溢出类型</li></ol><p>确定是堆内存溢出、栈内存溢出还是Metaspace内存溢出</p><ol start="2"><li>确定是哪个线程内存溢出了</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM优化</title>
    <link href="/2022/05/01/JVM/JVM%E4%BC%98%E5%8C%96/"/>
    <url>/2022/05/01/JVM/JVM%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM工具"><a href="#JVM工具" class="headerlink" title="JVM工具"></a>JVM工具</h1><h2 id="Jstat"><a href="#Jstat" class="headerlink" title="Jstat"></a>Jstat</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>可以看到当前运行中的系统JVM内的Eden、Survivor、老年代的内存使用情况，还有Young GC和Full GC的执行次数以及耗时。</p><p>开源的工具还有JConsole、VisualVM等监控工具，Jstat为最基础的工具。</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li>jstat -gc PID</li></ul><p>首先找到Java进程的PID，然后用这个命令看这个Java进程的内存和GC情况</p><ul><li><p>S0CFrom Survivor区的大小</p></li><li><p>S1CTo Survivor区的大小</p></li><li><p>S0UFrom Survivor区当前使用的内存大小</p></li><li><p>S1UTo Survivor区当前使用的内存大小</p></li><li><p>ECEden区的大小</p></li><li><p>EUEden区当前使用的内存大小</p></li><li><p>OC老年代的大小</p></li><li><p>OU老年代当前使用的内存大小</p></li><li><p>MC方法区(永久代、元数据区)的大小</p></li><li><p>MU方法区(永久代、元数据区)的当前使用的内存大小</p></li><li><p>YGC系统迄今为止的Young GC次数</p></li><li><p>YGCTYoung GC的耗时</p></li><li><p>FGC系统迄今为止的Full GC次数</p></li><li><p>FGCTFull GC的耗时</p></li><li><p>GCT所有GC的总耗时</p></li><li><p>jstat -gccapacity PID</p></li></ul><p>堆内存分析</p><ul><li>jstat -gcnew PID</li></ul><p>年轻代GC分析，TT和MTT可以看到对象在年轻代存活的年龄和存活的最大年龄</p><ul><li>jstat -gcnewcapacity PID</li></ul><p>年轻代内存分析</p><ul><li>jstat -gcold PID<br>老年代GC分析</li><li>jstat -gcoldcapacity PID</li></ul><p>老年代内存分析</p><ul><li>jstat -gcmetacapacity PID</li></ul><p>元数据区内存分析</p><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><p>线上JVM进程需要知道的参数</p><ul><li>新生代对象增长的速率</li><li>Young GC的触发频率</li><li>Young GC的耗时</li><li>每次Young GC后多少对象存活下来</li><li>每次Young GC后多少对象进入老年代</li><li>老年代对象增长的速率</li><li>Full GC的触发频率</li><li>Full GC的耗时</li></ul><ol><li>新生代对象增长的速率</li></ol><p>jstat -gc PID 1000 10<br>每隔1秒钟更新一行jstat统计信息，总共执行10次jstat统计<br>按照实际系统的负载情况调整频率，预估增长速率</p><ol start="2"><li>Young GC的触发频率和每次耗时</li></ol><p>根据日常和系统高峰期的增长速率，以及新生代空间分配推算Young GC触发频率。<br>每次耗时就直接jstat里面有参数</p><ol start="3"><li>每次Young GC之后多少对象存活和进入老年代</li></ol><p>根据Young GC频率，设置监测频率<br>jstat -gc PID 18000 10<br>相当于每隔三分钟统计一次，连续执行10次</p><ol start="4"><li>Full GC的触发时机和耗时</li></ol><p>根据老年代对象的增长速率，推算Full GC触发频率。<br>根据jstat参数得知每次耗时</p><h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>查看系统运行时的内存区域</p><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><ul><li>jmap -heap PID</li></ul><p>打印出堆内存相关的一些线程设置，及当前堆内存内的各个区的一些基本情况。<br>如：Eden区总容量，已使用容量，剩余容量，<br>两个Survivor区的总容量，已使用容量，剩余容量<br>老年代的总容量，已使用容量，剩余容量</p><ul><li>jmap -histo PID</li></ul><p>简单了解当前JVM中的对象对内存占用的情况</p><ul><li>生成堆内存转储快照</li></ul><p>jmap -dump:live,format&#x3D;b,file&#x3D;dump.hprof PID<br>在当前目录下生成一个dump.hprof文件。</p><h2 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>通过图形化的方式去分析堆内存里的对象分布情况</p><h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><ul><li>jhat -port 7000 dump.hprof</li></ul><p>在7000端口开启dump.hprof文件分析。</p><h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h2><h3 id="可视化监控平台"><a href="#可视化监控平台" class="headerlink" title="可视化监控平台"></a>可视化监控平台</h3><ul><li>Zabbix</li><li>Ganglia</li><li>Open-Falcon</li><li>Prometheus</li></ul><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><ul><li>VisualVM</li><li>MAT</li></ul><h1 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h1><h2 id="优化流程"><a href="#优化流程" class="headerlink" title="优化流程"></a>优化流程</h2><h3 id="预估性优化"><a href="#预估性优化" class="headerlink" title="预估性优化"></a>预估性优化</h3><p>根据代码，预估一下系统每秒多少请求，每次创建多少对象，占用内存，机器配置，年轻代分配多少内存，Young GC频率，对象进入老年代的速率，老年代应该给多少内存，Full GC触发的频率</p><p>优化思路：<br>尽量让每次Young GC后的存活对象小于Survivor区域的50%，都留在年轻代里面，尽量别让对象进入老年代。尽量减少Full GC的频率，避免频繁Full GC对JVM性能的影响。</p><h3 id="系统压测时的JVM优化"><a href="#系统压测时的JVM优化" class="headerlink" title="系统压测时的JVM优化"></a>系统压测时的JVM优化</h3><p>在压测时候，使用Jstat观察数据。</p><h3 id="线上系统进行JVM监控"><a href="#线上系统进行JVM监控" class="headerlink" title="线上系统进行JVM监控"></a>线上系统进行JVM监控</h3><ul><li>每天在高峰期和日常使用的时候，用原生工具jstat、jmap、jhat等工具观察JVM情况</li><li>部署监控系统</li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p>-XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction&#x3D;0<br>CMS垃圾回收器在每次回收后进行内存整理。适用内存碎片过多的场景</p><p>-XX:+CMSParallelInitialMarkEnabled<br>CMS垃圾回收器在初始标记阶段开启多线程并发执行</p><p>-XX:+CMSScavengeBeforeRemark<br>CMS重新标记阶段之前，先尽量执行一次Young GC</p><p>-XX:+HeapDumpOnOutOfMemoryError<br>设置OOM的时候自动dump内存快照<br>-XX:HeapDumpPath&#x3D;&#x2F;usr&#x2F;loacl&#x2F;app&#x2F;oom<br>内存快照保存位置</p><h3 id="少见参数"><a href="#少见参数" class="headerlink" title="少见参数"></a>少见参数</h3><p>-XX:TraceClassLoading -XX:TraceClassUnLoading<br>追踪类的加载和卸载情况</p><p>SoftRefLRUPolicyMSPerMB<br>默认1000毫秒，设定软引用对象存活间隔</p><p>-XX:+DisableExplicitGC<br>禁止显示的执行GC，比如代码触发<code>System.gc()</code>。<br>但是注意框架是否需要使用此方法调用清理，不然可能会造成内存溢出。</p><h3 id="强制GC"><a href="#强制GC" class="headerlink" title="强制GC"></a>强制GC</h3><p><code>System.gc()</code>每次执行的时候，会让JVM去尝试执行一次Full GC</p><h2 id="JVM参数模板"><a href="#JVM参数模板" class="headerlink" title="JVM参数模板"></a>JVM参数模板</h2><p>-Xms4096M -Xmx4096M -Xmn3072M -Xss1M  -XX:MetaspaceSize&#x3D;256M -XX:MaxMetaspaceSize&#x3D;256M<br>-XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFaction&#x3D;92<br>-XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction&#x3D;0<br>-XX:+CMSParallelInitialMarkEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC<br>-XX:+PrintGCDetails -Xloggc:gc.log -XX:+HeapDumpOnOutOfMemoryError<br>-XX:HeapDumpPath&#x3D;&#x2F;usr&#x2F;local&#x2F;app&#x2F;oom</p><p>4核8G的机器，JVM堆内存分配4G，年轻代3G，每次Full GC 之后整理内存碎片</p><h2 id="常见问题排查"><a href="#常见问题排查" class="headerlink" title="常见问题排查"></a>常见问题排查</h2><h3 id="频繁Full-GC现象"><a href="#频繁Full-GC现象" class="headerlink" title="频繁Full GC现象"></a>频繁Full GC现象</h3><ul><li><p>机器CPU负载过高</p></li><li><p>频繁Full GC警报</p></li><li><p>系统无法处理请求或者请求过慢</p><h3 id="频繁Full-GC问题"><a href="#频繁Full-GC问题" class="headerlink" title="频繁Full GC问题"></a>频繁Full GC问题</h3></li><li><p>内存分配不合理，导致对象频繁进入老年代，引发频繁的Full GC</p></li><li><p>系统一次性加载过多数据，搞出很多大对象，导致频繁有大对象进入老年代</p></li><li><p>存在内存泄漏等问题，内存里驻留了大量的对象，塞满了老年代，导致对象进入老年代的时候，会触发Full GC</p></li><li><p>永久代类过多，触发Full GC</p></li><li><p>手动执行<code>System.gc()</code>导致</p></li></ul><h1 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h1><h2 id="服务于百万级商家的BI系统"><a href="#服务于百万级商家的BI系统" class="headerlink" title="服务于百万级商家的BI系统"></a>服务于百万级商家的BI系统</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JVMDemo4</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        -XX:NewSize=104857600 -XX:MaxNewSize=104857600 -XX:InitialHeapSize=209715200</span><br><span class="hljs-comment">        -XX:MaxHeapSize=209715200 -XX:SurvivorRatio=8  -XX:MaxTenuringThreshold=15</span><br><span class="hljs-comment">        -XX:PretenureSizeThreshold=3145728 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</span><br><span class="hljs-comment">        -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">30</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            loadData();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">byte</span>[] data = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">100</span> * <span class="hljs-number">1024</span>];<br>        &#125;<br>        data = <span class="hljs-literal">null</span>;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs apache"> <span class="hljs-attribute">S0C</span>    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">16255</span>.<span class="hljs-number">2</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">21256</span>.<span class="hljs-number">0</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">26256</span>.<span class="hljs-number">8</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">31257</span>.<span class="hljs-number">5</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">36258</span>.<span class="hljs-number">3</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">41259</span>.<span class="hljs-number">1</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">46259</span>.<span class="hljs-number">9</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">51260</span>.<span class="hljs-number">7</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">56261</span>.<span class="hljs-number">4</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">61262</span>.<span class="hljs-number">2</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">66263</span>.<span class="hljs-number">0</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">71263</span>.<span class="hljs-number">8</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">76264</span>.<span class="hljs-number">6</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">81265</span>.<span class="hljs-number">4</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4480</span>.<span class="hljs-number">0</span> <span class="hljs-number">775</span>.<span class="hljs-number">8</span>  <span class="hljs-number">384</span>.<span class="hljs-number">0</span>   <span class="hljs-number">76</span>.<span class="hljs-number">4</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>   <span class="hljs-number">4473</span>.<span class="hljs-number">3</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>   <span class="hljs-number">9474</span>.<span class="hljs-number">0</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">14474</span>.<span class="hljs-number">8</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">19475</span>.<span class="hljs-number">6</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">24476</span>.<span class="hljs-number">4</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">29477</span>.<span class="hljs-number">2</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">34478</span>.<span class="hljs-number">0</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">39478</span>.<span class="hljs-number">7</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">44479</span>.<span class="hljs-number">5</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">49480</span>.<span class="hljs-number">3</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">54481</span>.<span class="hljs-number">1</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">59481</span>.<span class="hljs-number">9</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">64482</span>.<span class="hljs-number">6</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">69483</span>.<span class="hljs-number">4</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">74484</span>.<span class="hljs-number">2</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1164</span>.<span class="hljs-number">0</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">79485</span>.<span class="hljs-number">0</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3711</span>.<span class="hljs-number">8</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>   <span class="hljs-number">4333</span>.<span class="hljs-number">7</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>   <span class="hljs-number">9334</span>.<span class="hljs-number">5</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">14335</span>.<span class="hljs-number">3</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">19336</span>.<span class="hljs-number">1</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">24336</span>.<span class="hljs-number">8</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">29337</span>.<span class="hljs-number">6</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">34338</span>.<span class="hljs-number">4</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">39339</span>.<span class="hljs-number">2</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">44340</span>.<span class="hljs-number">0</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">49340</span>.<span class="hljs-number">8</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">54341</span>.<span class="hljs-number">5</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">59342</span>.<span class="hljs-number">3</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">64343</span>.<span class="hljs-number">1</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">69343</span>.<span class="hljs-number">9</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">74344</span>.<span class="hljs-number">7</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1316</span>.<span class="hljs-number">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">79345</span>.<span class="hljs-number">4</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">1</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">002</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>   <span class="hljs-number">2598</span>.<span class="hljs-number">3</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>   <span class="hljs-number">7599</span>.<span class="hljs-number">1</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">12599</span>.<span class="hljs-number">8</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">17600</span>.<span class="hljs-number">6</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">22601</span>.<span class="hljs-number">4</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">27602</span>.<span class="hljs-number">2</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">32603</span>.<span class="hljs-number">0</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">37603</span>.<span class="hljs-number">8</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">42604</span>.<span class="hljs-number">5</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">47605</span>.<span class="hljs-number">3</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">52606</span>.<span class="hljs-number">1</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">57606</span>.<span class="hljs-number">9</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">62607</span>.<span class="hljs-number">7</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">67608</span>.<span class="hljs-number">4</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">72609</span>.<span class="hljs-number">2</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1536</span>.<span class="hljs-number">9</span> <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">77610</span>.<span class="hljs-number">0</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">003</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1595</span>.<span class="hljs-number">4</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1811</span>.<span class="hljs-number">6</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">4</span>    <span class="hljs-number">0</span>.<span class="hljs-number">004</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">004</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1595</span>.<span class="hljs-number">4</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>   <span class="hljs-number">6946</span>.<span class="hljs-number">2</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">4</span>    <span class="hljs-number">0</span>.<span class="hljs-number">004</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">004</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1595</span>.<span class="hljs-number">4</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">12080</span>.<span class="hljs-number">8</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">4</span>    <span class="hljs-number">0</span>.<span class="hljs-number">004</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">004</span><br><span class="hljs-attribute">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">10240</span>.<span class="hljs-number">0</span> <span class="hljs-number">1595</span>.<span class="hljs-number">4</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">81920</span>.<span class="hljs-number">0</span>  <span class="hljs-number">17215</span>.<span class="hljs-number">5</span>   <span class="hljs-number">102400</span>.<span class="hljs-number">0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">4864</span>.<span class="hljs-number">0</span> <span class="hljs-number">3712</span>.<span class="hljs-number">3</span> <span class="hljs-number">512</span>.<span class="hljs-number">0</span>  <span class="hljs-number">409</span>.<span class="hljs-number">1</span>       <span class="hljs-number">4</span>    <span class="hljs-number">0</span>.<span class="hljs-number">004</span>   <span class="hljs-number">0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">004</span><br></code></pre></td></tr></table></figure><h2 id="每日上亿数据的计算系统"><a href="#每日上亿数据的计算系统" class="headerlink" title="每日上亿数据的计算系统"></a>每日上亿数据的计算系统</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JVMDemo5</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        优化前</span><br><span class="hljs-comment">        -XX:NewSize=104857600 -XX:MaxNewSize=104857600 -XX:InitialHeapSize=209715200</span><br><span class="hljs-comment">        -XX:MaxHeapSize=209715200 -XX:SurvivorRatio=8  -XX:MaxTenuringThreshold=15</span><br><span class="hljs-comment">        -XX:PretenureSizeThreshold=20971520 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</span><br><span class="hljs-comment">        -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log</span><br><span class="hljs-comment">        优化后</span><br><span class="hljs-comment">        -XX:NewSize=209715200 -XX:MaxNewSize=209715200 -XX:InitialHeapSize=314572800</span><br><span class="hljs-comment">        -XX:MaxHeapSize=314572800 -XX:SurvivorRatio=2  -XX:MaxTenuringThreshold=15 </span><br><span class="hljs-comment">        -XX:PretenureSizeThreshold=20971520 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC </span><br><span class="hljs-comment">        -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">30</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            loadData();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  每秒都会执行一次loadData方法，分配4个10MB数组，但是立马成为垃圾</span><br><span class="hljs-comment">     *  但是data1和data2两个10MB数组被变量引用必须存活。</span><br><span class="hljs-comment">     *  data3变量依次指向两个10MB数组，为了1S内触发Young GC。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">byte</span>[] data = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        &#125;<br>        data = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">byte</span>[] data1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        <span class="hljs-type">byte</span>[] data2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br><br>        <span class="hljs-type">byte</span>[] data3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        data3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GC与日志分析</title>
    <link href="/2022/05/01/JVM/GC%E4%B8%8E%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    <url>/2022/05/01/JVM/GC%E4%B8%8E%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="GC日志"><a href="#GC日志" class="headerlink" title="GC日志"></a>GC日志</h1><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>-XX:+PringGCDetails</li></ul><p>打印详细的gc日志</p><ul><li>-XX:+PrintGCTimeStamps</li></ul><p>打印每次出来GC发生的时间</p><ul><li>-XLoggc:gc.log</li></ul><p>设置将GC写入一个磁盘文件</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="YoungGC案例"><a href="#YoungGC案例" class="headerlink" title="YoungGC案例"></a>YoungGC案例</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JVMDemo1</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        -XX:NewSize=5242880 -XX:MaxNewSize=5242880 -XX:InitialHeapSize=10485760</span><br><span class="hljs-comment">        -XX:MaxHeapSize=10485760 -XX:SurvivorRatio=8 -XX:PretenureSizeThreshold=10485760</span><br><span class="hljs-comment">        -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails</span><br><span class="hljs-comment">        -XX:+PrintGCTimeStamps -Xloggc:gc.log</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        arr1 = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">byte</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><p>-XX:InitialHeapSize&#x3D;10485760 -XX:MaxHeapSize&#x3D;10485760<br>设置初始堆大小和最大堆大小为10MB</p><p>-XX:NewSize&#x3D;5242880 -XX:MaxNewSize&#x3D;5242880<br>设置新生代大小和最大新生代大小5MB，老年代大小计算出为5MB</p><p>-XX:PretenureSizeThreshold&#x3D;10485760<br>设置大对象阈值为10MB<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650510960987-5f7965fc-6a2e-4e7c-90df-1f36430513df.png#clientId=udf8be31a-b8df-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=297&id=uf473530a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=297&originWidth=320&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5595&status=done&style=none&taskId=u5205e7c0-4bec-438b-9043-37eee2ee088&title=&width=320" alt="image.png"></p><h3 id="运行步骤"><a href="#运行步骤" class="headerlink" title="运行步骤"></a>运行步骤</h3><ol><li>byte[] arr1 &#x3D; new byte[1024 * 1024]</li></ol><p>首先会在Eden区放入1MB对象，同时在mian线程的虚拟机栈中压入main()方法的栈帧。在mian()方法的栈帧内部，会有一个arr1变量，指向堆内存的Eden区数组<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650511101073-94451cc8-8a22-41d2-95a0-3b0debea008a.png#clientId=udf8be31a-b8df-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=314&id=u4055d3ee&margin=%5Bobject%20Object%5D&name=image.png&originHeight=314&originWidth=559&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12147&status=done&style=none&taskId=u9ac7e5a1-cc26-44f9-a96a-c90f8905a71&title=&width=559" alt="image.png"></p><ol start="2"><li>arr1 &#x3D; new byte[1024 * 1024]</li></ol><p>在Eden区创建第二个数组，并让局部变量指向第二个数组，然后第一个数组没人引用了<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650511159116-f34edcf2-f7a2-487c-9fd4-6688e03d04cd.png#clientId=udf8be31a-b8df-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=388&id=u5e8d87dc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=388&originWidth=548&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14558&status=done&style=none&taskId=ua5dd68a5-b2f1-4445-abba-6e21000e724&title=&width=548" alt="image.png"></p><ol start="3"><li>arr1 &#x3D; new byte[1024 * 1024]</li></ol><p>在Eden区创建了第三个数组，同时arr1指向第三个数组，前两个变成垃圾对象<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650511228326-ce23f224-fbd3-485b-837b-4eb0a7b67a03.png#clientId=udf8be31a-b8df-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=375&id=u8c3e4bbb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=375&originWidth=585&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15071&status=done&style=none&taskId=ue7c925c2-75e2-4872-83b4-04655d2cddc&title=&width=585" alt="image.png"></p><ol start="4"><li>arr1 &#x3D; null</li></ol><p>arr1对象什么都不指向，前三个数组全部变成垃圾对象<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650511273562-f1df4d21-f4ca-4635-bfaf-5ad47c2ecb1a.png#clientId=udf8be31a-b8df-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=347&id=u6f7ba24b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=347&originWidth=538&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13243&status=done&style=none&taskId=u0773b115-22ef-42b6-b256-16f369ae4b2&title=&width=538" alt="image.png"></p><ol start="5"><li>byte[] arr2 &#x3D; new byte[ 2 * 1024 * 1024]</li></ol><p>分配一个2MB数组，尝试放入Eden区。由于Eden区总共4MB，放不下，就会触发Young GC</p><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Java</span> <span class="hljs-variable">HotSpot</span><span class="hljs-punctuation">(</span><span class="hljs-variable">TM</span><span class="hljs-punctuation">)</span> <span class="hljs-number">64</span><span class="hljs-operator">-</span><span class="hljs-variable">Bit</span> <span class="hljs-variable">Server</span> <span class="hljs-variable">VM</span> <span class="hljs-punctuation">(</span><span class="hljs-number">25.192</span><span class="hljs-operator">-</span><span class="hljs-variable">b12</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">for</span> <span class="hljs-variable">windows</span><span class="hljs-operator">-</span><span class="hljs-variable">amd64</span> <span class="hljs-variable">JRE</span> <span class="hljs-punctuation">(</span><span class="hljs-number">1.8</span><span class="hljs-number">.0</span><span class="hljs-type">_</span><span class="hljs-number">192</span><span class="hljs-operator">-</span><span class="hljs-variable">b12</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-variable">built</span> <span class="hljs-variable">on</span> <span class="hljs-variable">Oct</span>  <span class="hljs-number">6</span> <span class="hljs-number">2018</span> <span class="hljs-number">17</span><span class="hljs-operator">:</span><span class="hljs-number">12</span><span class="hljs-operator">:</span><span class="hljs-number">23</span> <span class="hljs-variable">by</span> <span class="hljs-string">&quot;java_re&quot;</span> <span class="hljs-variable">with</span> <span class="hljs-variable">MS</span> <span class="hljs-variable">VC</span><span class="hljs-operator">++</span> <span class="hljs-number">10.0</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">VS2010</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">Memory</span><span class="hljs-operator">:</span> <span class="hljs-number">4</span><span class="hljs-variable">k</span> <span class="hljs-variable">page</span><span class="hljs-operator">,</span> <span class="hljs-variable">physical</span> <span class="hljs-number">16647476</span><span class="hljs-variable">k</span><span class="hljs-punctuation">(</span><span class="hljs-number">7350912</span><span class="hljs-variable">k</span> <span class="hljs-variable">free</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-variable">swap</span> <span class="hljs-number">17761588</span><span class="hljs-variable">k</span><span class="hljs-punctuation">(</span><span class="hljs-number">4895500</span><span class="hljs-variable">k</span> <span class="hljs-variable">free</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">/*</span><br>本次运行采取的<span class="hljs-variable">JVM</span>参数是什么<br><span class="hljs-operator">*/</span><br><span class="hljs-variable">CommandLine</span> <span class="hljs-variable">flags</span><span class="hljs-operator">:</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">InitialHeapSize</span><span class="hljs-operator">=</span><span class="hljs-number">10485760</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">MaxHeapSize</span><span class="hljs-operator">=</span><span class="hljs-number">10485760</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">MaxNewSize</span><span class="hljs-operator">=</span><span class="hljs-number">5242880</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">NewSize</span><span class="hljs-operator">=</span><span class="hljs-number">5242880</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">OldPLABSize</span><span class="hljs-operator">=</span><span class="hljs-number">16</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">PretenureSizeThreshold</span><span class="hljs-operator">=</span><span class="hljs-number">10485760</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGC</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCDetails</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCTimeStamps</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">SurvivorRatio</span><span class="hljs-operator">=</span><span class="hljs-number">8</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseCompressedClassPointers</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseCompressedOops</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseConcMarkSweepGC</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:-</span><span class="hljs-variable">UseLargePagesIndividualAllocation</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseParNewGC</span> <br><br><span class="hljs-operator">/*</span><br>本次<span class="hljs-variable">GC</span>的执行情况<span class="hljs-operator">:</span><br><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <br>对象分配失败，触发<span class="hljs-variable">GC</span><br><br><span class="hljs-number">0.163</span> <br>系统运行了多少秒之后发生了本次<span class="hljs-variable">GC</span><br><br><span class="hljs-variable">ParNew</span><span class="hljs-operator">:</span> <span class="hljs-number">3706</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0020715</span> <span class="hljs-variable">secs</span><br><span class="hljs-variable">ParNew</span><br>触发了年轻代<span class="hljs-variable">Young</span> <span class="hljs-variable">GC</span><br><span class="hljs-punctuation">(</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><br>代表年轻代可用空间<span class="hljs-number">4608</span><span class="hljs-built_in">K</span>，即<span class="hljs-number">4.5</span><span class="hljs-variable">MB</span>，为<span class="hljs-variable">Eden</span>区<span class="hljs-operator">+</span>一个<span class="hljs-variable">Survivor</span>区的空间<br><span class="hljs-number">3706</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">512</span><span class="hljs-built_in">K</span><br>对年轻代执行了一次<span class="hljs-variable">GC</span>，<span class="hljs-variable">GC</span>之前使用了<span class="hljs-number">3706</span><span class="hljs-variable">KB</span>，<span class="hljs-variable">GC</span>之后只有<span class="hljs-number">512</span><span class="hljs-variable">KB</span>的对象存活<br><span class="hljs-number">0.0020715</span> <span class="hljs-variable">secs</span><br>本次<span class="hljs-variable">GC</span>的耗时<br><br><span class="hljs-number">3706</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">1643</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">9728</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0029033</span> <span class="hljs-variable">secs</span><br>表示整个<span class="hljs-variable">Java</span>堆内存是总可用空间<span class="hljs-number">9728</span><span class="hljs-variable">KB</span><span class="hljs-punctuation">(</span>年轻代<span class="hljs-number">4.5</span><span class="hljs-variable">MB</span><span class="hljs-operator">+</span>老年代<span class="hljs-number">5</span><span class="hljs-variable">MB</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">GC</span>前整个<span class="hljs-variable">Java</span>堆内存使用了<span class="hljs-number">3706</span><span class="hljs-variable">KB</span><br><span class="hljs-variable">GC</span>之后<span class="hljs-variable">Java</span>堆内存使用了<span class="hljs-number">1643</span><span class="hljs-variable">KB</span><br><br><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">secs</span><br>本次<span class="hljs-variable">GC</span>消耗的时间，按秒计算<br><span class="hljs-operator">*/</span><br><span class="hljs-number">0.163</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">0.164</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParNew</span><span class="hljs-operator">:</span> <span class="hljs-number">3706</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0020715</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3706</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">1643</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">9728</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0029033</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><br><br><span class="hljs-operator">//</span><span class="hljs-variable">JVM</span>退出时打印出的当前堆内存的使用情况<br><span class="hljs-variable">Heap</span><br><br><span class="hljs-operator">/*</span><br><span class="hljs-variable">par</span> <span class="hljs-variable">new</span> <span class="hljs-variable">generation</span>   <span class="hljs-variable">total</span> <span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">3745</span><span class="hljs-built_in">K</span><br><span class="hljs-variable">parNew</span>垃圾回收器负责的年轻代总共有<span class="hljs-number">4608</span><span class="hljs-variable">KB</span>，目前使用了<span class="hljs-number">3745</span><span class="hljs-variable">KB</span><br><br><span class="hljs-operator">*/</span><br><span class="hljs-variable">par</span> <span class="hljs-variable">new</span> <span class="hljs-variable">generation</span>   <span class="hljs-variable">total</span> <span class="hljs-number">4608</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">3745</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000ff600000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ffb00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ffb00000</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-operator">/*</span><br><span class="hljs-variable">Eden</span>区<span class="hljs-number">4096</span><span class="hljs-built_in">K</span>大小，使用了<span class="hljs-number">78</span><span class="hljs-operator">%</span><br><span class="hljs-variable">From</span> <span class="hljs-variable">Survivor</span>区<span class="hljs-number">512</span><span class="hljs-built_in">K</span>大小，使用了<span class="hljs-number">100</span><span class="hljs-operator">%</span><br><span class="hljs-operator">*/</span><br><span class="hljs-variable">eden</span> <span class="hljs-variable">space</span> <span class="hljs-number">4096</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>  <span class="hljs-number">78</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000ff600000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff9285f8</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ffa00000</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">from</span> <span class="hljs-variable">space</span> <span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-number">100</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000ffa80000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ffb00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ffb00000</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">to</span>   <span class="hljs-variable">space</span> <span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>   <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000ffa00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ffa00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ffa80000</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-operator">/*</span><br><span class="hljs-variable">concurrent</span> <span class="hljs-variable">mark</span><span class="hljs-operator">-</span><span class="hljs-variable">sweep</span>即<span class="hljs-variable">CMS</span>垃圾回收器<br>管理老年代总共<span class="hljs-number">5120</span><span class="hljs-variable">KB</span>，使用了<span class="hljs-number">1131</span><span class="hljs-variable">KB</span><br><span class="hljs-operator">*/</span><br><span class="hljs-variable">concurrent</span> <span class="hljs-variable">mark</span><span class="hljs-operator">-</span><span class="hljs-variable">sweep</span> <span class="hljs-variable">generation</span> <span class="hljs-variable">total</span> <span class="hljs-number">5120</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">1131</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000ffb00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x0000000100000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x0000000100000000</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-operator">/*</span><br><span class="hljs-variable">Metaspace</span>源数据空间 和 <span class="hljs-variable">Class</span>空间<br>总容量、使用内存等<br><span class="hljs-operator">*/</span><br><span class="hljs-variable">Metaspace</span>       <span class="hljs-variable">used</span> <span class="hljs-number">3204</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">4496</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">4864</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><br>  <span class="hljs-variable">class</span> <span class="hljs-variable">space</span>    <span class="hljs-variable">used</span> <span class="hljs-number">348</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">388</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1048576</span><span class="hljs-built_in">K</span><br></code></pre></td></tr></table></figure><h2 id="动态年龄案例"><a href="#动态年龄案例" class="headerlink" title="动态年龄案例"></a>动态年龄案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JVMDemo2</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        -XX:NewSize=10485760 -XX:MaxNewSize=10485760 -XX:InitialHeapSize=20971520</span><br><span class="hljs-comment">        -XX:MaxHeapSize=20971520 -XX:SurvivorRatio=8  -XX:MaxTenuringThreshold=15</span><br><span class="hljs-comment">        -XX:PretenureSizeThreshold=10485760 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</span><br><span class="hljs-comment">        -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        arr1 = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">byte</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ <span class="hljs-number">128</span> * <span class="hljs-number">1024</span>];<br><br>        <span class="hljs-type">byte</span>[] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br><br>        arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">128</span> * <span class="hljs-number">1024</span>];<br>        arr3 = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">byte</span>[] arr4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数设置-1"><a href="#参数设置-1" class="headerlink" title="参数设置"></a>参数设置</h3><p>Java堆总大小20MB，新声代10MB，Eden区8MB，每个Survivor1MB，老年代10MB。<br>大对象超过10MB进入老年代<br>对象年龄超过15岁进入老年代<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650525086746-13c8cad0-f45b-4678-8928-88911361d9ee.png#clientId=u4158f702-860f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=309&id=u1454e991&margin=%5Bobject%20Object%5D&name=image.png&originHeight=309&originWidth=529&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11788&status=done&style=none&taskId=u9f911158-d618-4ad7-a23a-d94755cc0de&title=&width=529" alt="image.png"></p><h3 id="运行步骤-1"><a href="#运行步骤-1" class="headerlink" title="运行步骤"></a>运行步骤</h3><ol><li>连续创建3个2MB数组，将局部变量arr1设置为null</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650525250699-21d6223f-3d30-4361-8f2d-bcd0799b234d.png#clientId=u4158f702-860f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=412&id=u1caca4e9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=412&originWidth=504&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14599&status=done&style=none&taskId=u49ccaf26-d277-499b-80ae-3d999262efc&title=&width=504" alt="image.png"></p><ol start="2"><li>byte[] arr2 &#x3D; new byte[ 128 * 1024]</li></ol><p>在Eden区创建128KB数组，同时由arr2变量引用<img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650525295403-b18dc92f-1ef6-4227-9cea-41c4e75648be.png#clientId=u4158f702-860f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=420&id=u49533c06&margin=%5Bobject%20Object%5D&name=image.png&originHeight=420&originWidth=522&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17666&status=done&style=none&taskId=u46e236b1-ada2-4fbb-842a-ae678a6bc71&title=&width=522" alt="image.png"></p><ol start="3"><li>byte[] arr3 &#x3D; new byte[ 2 * 1024 * 1024]</li></ol><p>尝试在Eden区分配一个2MB的数组。此时算上着2MB，Eden区大小超过8MB，触发一次YoungGC</p><p>对应日志：ParNew: 8120K-&gt;780K(9216K), <em>0</em>.<em>0008585</em> secs</p><p>eden space 8192K,  <em>26</em>% used<br>from space 1024K,  <em>76</em>% used</p><p>Young GC过后，Eden区存在2MBarr3，S1区存在128KBarr2<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650526424165-73754022-086f-4749-9440-ac33121824da.png#clientId=u4158f702-860f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=399&id=u35df9356&margin=%5Bobject%20Object%5D&name=image.png&originHeight=399&originWidth=493&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17212&status=done&style=none&taskId=u72f19069-a198-48df-a0ef-0f4200d0dc5&title=&width=493" alt="image.png"><br>此时Survivor Form区的对象1岁</p><ol start="4"><li>继续分配3个2MB数组，一个128KB数组</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650526588522-3d795d22-df8e-407b-9973-f24b040293a4.png#clientId=u4158f702-860f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=508&id=u8c529d73&margin=%5Bobject%20Object%5D&name=image.png&originHeight=508&originWidth=506&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19622&status=done&style=none&taskId=u1582bde7-0519-46ff-b305-75be5c2dd4f&title=&width=506" alt="image.png"></p><ol start="5"><li>byte[] arr4 &#x3D; new byte[ 2 * 1024 * 1024]</li></ol><p>尝试放入2MB数组，触发Young GC</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Java</span> <span class="hljs-variable">HotSpot</span><span class="hljs-punctuation">(</span><span class="hljs-variable">TM</span><span class="hljs-punctuation">)</span> <span class="hljs-number">64</span><span class="hljs-operator">-</span><span class="hljs-variable">Bit</span> <span class="hljs-variable">Server</span> <span class="hljs-variable">VM</span> <span class="hljs-punctuation">(</span><span class="hljs-number">25.192</span><span class="hljs-operator">-</span><span class="hljs-variable">b12</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">for</span> <span class="hljs-variable">windows</span><span class="hljs-operator">-</span><span class="hljs-variable">amd64</span> <span class="hljs-variable">JRE</span> <span class="hljs-punctuation">(</span><span class="hljs-number">1.8</span><span class="hljs-number">.0</span><span class="hljs-type">_</span><span class="hljs-number">192</span><span class="hljs-operator">-</span><span class="hljs-variable">b12</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-variable">built</span> <span class="hljs-variable">on</span> <span class="hljs-variable">Oct</span>  <span class="hljs-number">6</span> <span class="hljs-number">2018</span> <span class="hljs-number">17</span><span class="hljs-operator">:</span><span class="hljs-number">12</span><span class="hljs-operator">:</span><span class="hljs-number">23</span> <span class="hljs-variable">by</span> <span class="hljs-string">&quot;java_re&quot;</span> <span class="hljs-variable">with</span> <span class="hljs-variable">MS</span> <span class="hljs-variable">VC</span><span class="hljs-operator">++</span> <span class="hljs-number">10.0</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">VS2010</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">Memory</span><span class="hljs-operator">:</span> <span class="hljs-number">4</span><span class="hljs-variable">k</span> <span class="hljs-variable">page</span><span class="hljs-operator">,</span> <span class="hljs-variable">physical</span> <span class="hljs-number">16647476</span><span class="hljs-variable">k</span><span class="hljs-punctuation">(</span><span class="hljs-number">7448476</span><span class="hljs-variable">k</span> <span class="hljs-variable">free</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-variable">swap</span> <span class="hljs-number">17761588</span><span class="hljs-variable">k</span><span class="hljs-punctuation">(</span><span class="hljs-number">4852852</span><span class="hljs-variable">k</span> <span class="hljs-variable">free</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">CommandLine</span> <span class="hljs-variable">flags</span><span class="hljs-operator">:</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">InitialHeapSize</span><span class="hljs-operator">=</span><span class="hljs-number">20971520</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">MaxHeapSize</span><span class="hljs-operator">=</span><span class="hljs-number">20971520</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">MaxNewSize</span><span class="hljs-operator">=</span><span class="hljs-number">10485760</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">MaxTenuringThreshold</span><span class="hljs-operator">=</span><span class="hljs-number">15</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">NewSize</span><span class="hljs-operator">=</span><span class="hljs-number">10485760</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">OldPLABSize</span><span class="hljs-operator">=</span><span class="hljs-number">16</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">PretenureSizeThreshold</span><span class="hljs-operator">=</span><span class="hljs-number">10485760</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGC</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCDetails</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCTimeStamps</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">SurvivorRatio</span><span class="hljs-operator">=</span><span class="hljs-number">8</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseCompressedClassPointers</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseCompressedOops</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseConcMarkSweepGC</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:-</span><span class="hljs-variable">UseLargePagesIndividualAllocation</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseParNewGC</span> <br><br><span class="hljs-number">0.372</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">0.372</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParNew</span><span class="hljs-operator">:</span> <span class="hljs-number">7430</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">881</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">9216</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0009686</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">7430</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">881</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">19456</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0013944</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><br><span class="hljs-number">0.374</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">0.374</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParNew</span><span class="hljs-operator">:</span> <span class="hljs-number">7185</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">0</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">9216</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0025467</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">7185</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">793</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">19456</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0025983</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><br><span class="hljs-variable">Heap</span><br> <span class="hljs-variable">par</span> <span class="hljs-variable">new</span> <span class="hljs-variable">generation</span>   <span class="hljs-variable">total</span> <span class="hljs-number">9216</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">2354</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000fec00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff600000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff600000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">eden</span> <span class="hljs-variable">space</span> <span class="hljs-number">8192</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>  <span class="hljs-number">28</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000fec00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000fee4c910</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff400000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">from</span> <span class="hljs-variable">space</span> <span class="hljs-number">1024</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>   <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000ff400000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff400000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff500000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">to</span>   <span class="hljs-variable">space</span> <span class="hljs-number">1024</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>   <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000ff500000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff500000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff600000</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">concurrent</span> <span class="hljs-variable">mark</span><span class="hljs-operator">-</span><span class="hljs-variable">sweep</span> <span class="hljs-variable">generation</span> <span class="hljs-variable">total</span> <span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">793</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000ff600000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x0000000100000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x0000000100000000</span><span class="hljs-punctuation">)</span><br> <span class="hljs-variable">Metaspace</span>       <span class="hljs-variable">used</span> <span class="hljs-number">2826</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">4486</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">4864</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><br>  <span class="hljs-variable">class</span> <span class="hljs-variable">space</span>    <span class="hljs-variable">used</span> <span class="hljs-number">301</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">386</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1048576</span><span class="hljs-built_in">K</span><br><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650529776957-68136f6d-0ee4-44c0-8e9c-c7f466c19d18.png#clientId=ucd65a052-0611-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=454&id=u0608f213&margin=%5Bobject%20Object%5D&name=image.png&originHeight=454&originWidth=531&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17674&status=done&style=none&taskId=u60e12ba5-3618-4506-b578-43eff364d01&title=&width=531" alt="image.png"></h2><h2 id="Full-GC案例"><a href="#Full-GC案例" class="headerlink" title="Full GC案例"></a>Full GC案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JVMDemo3</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    -XX:NewSize=10485760 -XX:MaxNewSize=10485760 -XX:InitialHeapSize=20971520</span><br><span class="hljs-comment">    -XX:MaxHeapSize=20971520 -XX:SurvivorRatio=8  -XX:MaxTenuringThreshold=15</span><br><span class="hljs-comment">    -XX:PretenureSizeThreshold=3145728 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</span><br><span class="hljs-comment">    -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        arr1 = <span class="hljs-literal">null</span>;<br>        <br>        <span class="hljs-type">byte</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        <span class="hljs-type">byte</span>[] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        <span class="hljs-type">byte</span>[] arr4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        <span class="hljs-type">byte</span>[] arr5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ <span class="hljs-number">128</span> * <span class="hljs-number">1024</span>];<br>        <br>        <span class="hljs-type">byte</span>[] arr6 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数设置-2"><a href="#参数设置-2" class="headerlink" title="参数设置"></a>参数设置</h3><p>-XX:NewSize&#x3D;10485760 -XX:MaxNewSize&#x3D;10485760 -XX:InitialHeapSize&#x3D;20971520<br>-XX:MaxHeapSize&#x3D;20971520 -XX:SurvivorRatio&#x3D;8  -XX:MaxTenuringThreshold&#x3D;15<br>-XX:PretenureSizeThreshold&#x3D;3145728 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC<br>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log</p><h3 id="GC日志-1"><a href="#GC日志-1" class="headerlink" title="GC日志"></a>GC日志</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Java</span> <span class="hljs-variable">HotSpot</span><span class="hljs-punctuation">(</span><span class="hljs-variable">TM</span><span class="hljs-punctuation">)</span> <span class="hljs-number">64</span><span class="hljs-operator">-</span><span class="hljs-variable">Bit</span> <span class="hljs-variable">Server</span> <span class="hljs-variable">VM</span> <span class="hljs-punctuation">(</span><span class="hljs-number">25.192</span><span class="hljs-operator">-</span><span class="hljs-variable">b12</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">for</span> <span class="hljs-variable">windows</span><span class="hljs-operator">-</span><span class="hljs-variable">amd64</span> <span class="hljs-variable">JRE</span> <span class="hljs-punctuation">(</span><span class="hljs-number">1.8</span><span class="hljs-number">.0</span><span class="hljs-type">_</span><span class="hljs-number">192</span><span class="hljs-operator">-</span><span class="hljs-variable">b12</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-variable">built</span> <span class="hljs-variable">on</span> <span class="hljs-variable">Oct</span>  <span class="hljs-number">6</span> <span class="hljs-number">2018</span> <span class="hljs-number">17</span><span class="hljs-operator">:</span><span class="hljs-number">12</span><span class="hljs-operator">:</span><span class="hljs-number">23</span> <span class="hljs-variable">by</span> <span class="hljs-string">&quot;java_re&quot;</span> <span class="hljs-variable">with</span> <span class="hljs-variable">MS</span> <span class="hljs-variable">VC</span><span class="hljs-operator">++</span> <span class="hljs-number">10.0</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">VS2010</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">Memory</span><span class="hljs-operator">:</span> <span class="hljs-number">4</span><span class="hljs-variable">k</span> <span class="hljs-variable">page</span><span class="hljs-operator">,</span> <span class="hljs-variable">physical</span> <span class="hljs-number">16647476</span><span class="hljs-variable">k</span><span class="hljs-punctuation">(</span><span class="hljs-number">7684608</span><span class="hljs-variable">k</span> <span class="hljs-variable">free</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-variable">swap</span> <span class="hljs-number">17761588</span><span class="hljs-variable">k</span><span class="hljs-punctuation">(</span><span class="hljs-number">4797304</span><span class="hljs-variable">k</span> <span class="hljs-variable">free</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">CommandLine</span> <span class="hljs-variable">flags</span><span class="hljs-operator">:</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">InitialHeapSize</span><span class="hljs-operator">=</span><span class="hljs-number">20971520</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">MaxHeapSize</span><span class="hljs-operator">=</span><span class="hljs-number">20971520</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">MaxNewSize</span><span class="hljs-operator">=</span><span class="hljs-number">10485760</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">MaxTenuringThreshold</span><span class="hljs-operator">=</span><span class="hljs-number">15</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">NewSize</span><span class="hljs-operator">=</span><span class="hljs-number">10485760</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">OldPLABSize</span><span class="hljs-operator">=</span><span class="hljs-number">16</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">PretenureSizeThreshold</span><span class="hljs-operator">=</span><span class="hljs-number">3145728</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGC</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCDetails</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">PrintGCTimeStamps</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:</span><span class="hljs-variable">SurvivorRatio</span><span class="hljs-operator">=</span><span class="hljs-number">8</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseCompressedClassPointers</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseCompressedOops</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseConcMarkSweepGC</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:-</span><span class="hljs-variable">UseLargePagesIndividualAllocation</span> <span class="hljs-operator">-</span><span class="hljs-variable">XX</span><span class="hljs-operator">:+</span><span class="hljs-variable">UseParNewGC</span> <br><br><span class="hljs-number">0.090</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span> <span class="hljs-number">0.090</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">ParNew</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">promotion</span> <span class="hljs-variable">failed</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> <span class="hljs-number">7430</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">8248</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">9216</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0028134</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><span class="hljs-number">0.093</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">CMS</span><span class="hljs-operator">:</span> <span class="hljs-number">8194</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">6922</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.1267533</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-number">11526</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">6922</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">19456</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Metaspace</span><span class="hljs-operator">:</span> <span class="hljs-number">2818</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2818</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-number">0.1626242</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">Times</span><span class="hljs-operator">:</span> <span class="hljs-variable">user</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span> <span class="hljs-variable">sys</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span><span class="hljs-operator">,</span> <span class="hljs-variable">real</span><span class="hljs-operator">=</span><span class="hljs-number">0.16</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span> <br><br><span class="hljs-variable">Heap</span><br> <span class="hljs-variable">par</span> <span class="hljs-variable">new</span> <span class="hljs-variable">generation</span>   <span class="hljs-variable">total</span> <span class="hljs-number">9216</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">2130</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000fec00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff600000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff600000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">eden</span> <span class="hljs-variable">space</span> <span class="hljs-number">8192</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>  <span class="hljs-number">26</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000fec00000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000fee14930</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff400000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">from</span> <span class="hljs-variable">space</span> <span class="hljs-number">1024</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>   <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000ff500000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff500000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff600000</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-variable">to</span>   <span class="hljs-variable">space</span> <span class="hljs-number">1024</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span>   <span class="hljs-number">0</span><span class="hljs-operator">%</span> <span class="hljs-variable">used</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000ff400000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff400000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x00000000ff500000</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">concurrent</span> <span class="hljs-variable">mark</span><span class="hljs-operator">-</span><span class="hljs-variable">sweep</span> <span class="hljs-variable">generation</span> <span class="hljs-variable">total</span> <span class="hljs-number">10240</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">used</span> <span class="hljs-number">6922</span><span class="hljs-built_in">K</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-variable">x00000000ff600000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x0000000100000000</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-variable">x0000000100000000</span><span class="hljs-punctuation">)</span><br> <span class="hljs-variable">Metaspace</span>       <span class="hljs-variable">used</span> <span class="hljs-number">2825</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">4486</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">4864</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1056768</span><span class="hljs-built_in">K</span><br>  <span class="hljs-variable">class</span> <span class="hljs-variable">space</span>    <span class="hljs-variable">used</span> <span class="hljs-number">301</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">capacity</span> <span class="hljs-number">386</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">committed</span> <span class="hljs-number">512</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">reserved</span> <span class="hljs-number">1048576</span><span class="hljs-built_in">K</span><br><br></code></pre></td></tr></table></figure><h3 id="运行步骤-2"><a href="#运行步骤-2" class="headerlink" title="运行步骤"></a>运行步骤</h3><ol><li><p>byte[] arr1 &#x3D; new byte[4 * 1024 * 1024]</p><div class="code-wrapper"><pre><code class="hljs"> arr1 = null</code></pre></div></li></ol><p>直接分配一个4MB的对象，是大对象，直接进入老年代<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650531055773-56bef3da-82cf-40fe-ae96-9e47c46ac693.png#clientId=ucd65a052-0611-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=424&id=u6158e0ba&margin=%5Bobject%20Object%5D&name=image.png&originHeight=424&originWidth=538&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16200&status=done&style=none&taskId=u8048f95e-cb55-4719-bdba-bfbad70ba77&title=&width=538" alt="image.png"></p><ol start="2"><li><p>byte[] arr2 &#x3D; new byte[ 2 * 1024 * 1024];</p><div class="code-wrapper"><pre><code class="hljs"> byte[] arr3 = new byte[ 2 * 1024 * 1024]; byte[] arr4 = new byte[ 2 * 1024 * 1024]; byte[] arr5 = new byte[ 128 * 1024];</code></pre></div></li></ol><p>连续分配4个数组，3个2MB数组，1个128KB数组。全部进入Eden区<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650531142168-fe94d769-57f0-4fd7-bc5a-912a5d9284be.png#clientId=ucd65a052-0611-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=465&id=u2713be0e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=465&originWidth=514&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22330&status=done&style=none&taskId=u017b1ac6-2b86-4644-a7c2-c8180fdcd3f&title=&width=514" alt="image.png"></p><ol start="3"><li>byte[] arr6 &#x3D; new byte[ 2 * 1024 * 1024];</li></ol><p>又分配了2MB区域，发现Eden区放不下，触发一次Young GC</p><p>ParNew (promotion failed): 7430K-&gt;8248K(9216K), <em>0</em>.<em>0028134</em> secs<br>由于存活对象放不下Survivor，需要全部进入老年代，但是老年代加上目前的数据也超出10MB。<br>因此触发了CMS垃圾回收器的Full GC。</p><p> [CMS: 8194K-&gt;6922K(10240K), <em>0</em>.<em>1267533</em> secs] 11526K-&gt;6922K(19456K), [Metaspace: 2818K-&gt;2818K(1056768K)], <em>0</em>.<em>1626242</em> secs]<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650531696616-0da93074-529a-4327-bfa3-9b60b2e854d9.png#clientId=ucd65a052-0611-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=458&id=u4b143814&margin=%5Bobject%20Object%5D&name=image.png&originHeight=458&originWidth=521&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22284&status=done&style=none&taskId=u5aec37ff-5e65-40c6-bac3-7828cc54e46&title=&width=521" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>垃圾回收</title>
    <link href="/2022/05/01/JVM/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <url>/2022/05/01/JVM/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="垃圾回收细节"><a href="#垃圾回收细节" class="headerlink" title="垃圾回收细节"></a>垃圾回收细节</h1><h2 id="什么时候触发垃圾回收"><a href="#什么时候触发垃圾回收" class="headerlink" title="什么时候触发垃圾回收"></a>什么时候触发垃圾回收</h2><p>随着系统的运行，当新生代里的对象越来越多，快满了的时候，触发垃圾回收，将新生代里没人引用的对象回收掉，释放内存空间。</p><h2 id="哪些变量引用不能回收"><a href="#哪些变量引用不能回收" class="headerlink" title="哪些变量引用不能回收"></a>哪些变量引用不能回收</h2><p>JVM使用可达性分析算法判断哪些对象可以被回收哪些不能回收。<br>可达性分析算法：对每个对象，都分析一下有谁在引用他，一层层往上判断，是否有一个GC Roots。<br>GC Roots</p><ul><li>方法的局部变量</li><li>类的静态变量</li></ul><h2 id="对象的引用类型"><a href="#对象的引用类型" class="headerlink" title="对象的引用类型"></a>对象的引用类型</h2><ul><li>强引用</li></ul><p>一个变量引用一个对象，只要是强引用的类型，那么垃圾回收绝对不会回收这个对象</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Kafka</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ReplicaManager</span> <span class="hljs-variable">rm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplicaManager</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>软引用</li></ul><p>正常情况下垃圾回收是不会回收软引用对象，但是如果进行垃圾回收之后，发现内存空间还是不够存放新的对象，内存都快溢出了。就会把这些软引用对象给回收掉，哪怕他被变量引用了，但是因为是软引用，所以还是会回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Kafka</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SoftReference&lt;ReplicaManager&gt; rm = <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;ReplicaManager&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplicaManager</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>ReplicaManager实例对象用<code>SoftReference</code>软引用类型的对象包裹起来，此时rm变量对ReplicaManager对象的引用就是软引用。<br>软引用对象在GC的时候是否回收存在公式：clock - timestamp &lt;&#x3D; freespace * SortRTefLRUPolicyMSPerMB<br>clock - timestamp：软引用对象多久没有被访问过了<br>freespace：JVM中空闲内存空间<br>SortRTefLRUPolicyMSPerMB：每1MB口你想空间允许SoftReference对象存活多久<br>假如JVM空闲空间为3000MB，SortRTefLRUPolicyMSPerMB默认1000毫秒，那么存活时间为3000*1000 &#x3D; 3000秒。</p><ul><li>弱引用</li></ul><p>弱引用就和没有引用类似，如果发生垃圾回收，就会将整个对象回收掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Kafka</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WeakReference&lt;ReplicaManager&gt; rm = <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;ReplicaManager&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplicaManager</span>());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>虚引用</li></ul><h2 id="Object-finalize"><a href="#Object-finalize" class="headerlink" title="Object.finalize()"></a>Object.finalize()</h2><p>假如要被垃圾回收的对象，重写了Object的finalize()方法。<br>那么在垃圾回收之前，会先尝试调用一下他的finalize()方法，看是否把自己的这个实例对象给某个GC Roots变量。如果重新让某个GC Roots变量引用了自己，那么就不用被垃圾回收了。</p><h2 id="Stop-the-World"><a href="#Stop-the-World" class="headerlink" title="Stop the World"></a>Stop the World</h2><p>在垃圾回收的时候，尽可能让垃圾回收器专心致志的工作，不能随便让Java程序继续写对象。此时JVM后台会进入<code>Stop the World</code>状态，直接停止Java系统的所有工作线程，等垃圾回收完再运行。<br>不同的垃圾回收器针对<code>Stop the World</code>状态，进行了优化。需要合理的对线程系统优化内存分配和垃圾回收，尽量减少垃圾回收的频率，降低垃圾回收的时间，减少垃圾回收对系统运行的影响。</p><h2 id="触发老年代Full-GC的时机"><a href="#触发老年代Full-GC的时机" class="headerlink" title="触发老年代Full GC的时机"></a>触发老年代Full GC的时机</h2><ol><li>老年代可用内存小于新生代全部对象的大小，如果没有开启空间担保参数，会直接触发Full GC</li><li>老年代可用内存小于历次新生代GC后进入老年代的平均对象大小，会触发Full GC</li><li>新生代Minor GC后的存活对象大于Survivor，那么会进入老年代，此时老年代内存不足，会触发Full GC</li><li><code>-XX:CMSInitiatingOccupancyFaction</code>参数设置比例，老年代可用内存空间大于历次新生代GC后进入老年代已经使用的内存空间超过了这个参数指定的比例，会触发Full GC</li></ol><h2 id="合理的GC频率"><a href="#合理的GC频率" class="headerlink" title="合理的GC频率"></a>合理的GC频率</h2><p>一次minor gc间隔10s以上，每次不超过50ms<br>full gc间隔十分钟以上一次，每次不超过1s</p><h1 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h1><h2 id="复制算法-新生代垃圾回收算法"><a href="#复制算法-新生代垃圾回收算法" class="headerlink" title="复制算法-新生代垃圾回收算法"></a>复制算法-新生代垃圾回收算法</h2><p>针对新生代的垃圾回收算法，叫做复制算法。</p><h3 id="区域划分"><a href="#区域划分" class="headerlink" title="区域划分"></a>区域划分</h3><p>1个Eden区，2个Survivor区<br>其中Eden区占80%的内存空间，每一块Survivor区各占10%内存空间。<br>平时使用Eden区+其中一块Survivor区<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650357555914-4869f94b-df21-48b5-b8b4-a8efdaaee89e.png#clientId=ufb7092a7-0f3d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=340&id=u03b15cf4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=340&originWidth=614&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17098&status=done&style=none&taskId=ue8c1bc90-aa5c-4f79-a4a8-25a4692fb96&title=&width=614" alt="image.png"></p><h3 id="回收流程"><a href="#回收流程" class="headerlink" title="回收流程"></a>回收流程</h3><ol><li>最开始对象都分配在Eden区内，如果Eden区快满了，就会触发垃圾回收</li><li>将Eden区中存活的对象都一次性转移到一块空着的Survivor区。然后Eden区就会清空，然后再次分配新对象到Eden区里。Eden区和一块Survivor区里存在对象，其中Survivor区里放的是上一次Minor GC之后存活的对象。</li><li>如果下一次Eden再次满了，那么再次触发Minor GC，会将Eden区和放着上次Minor GC后存活对象的Survivor区的存活对象，转移到另一块Survivor区去。</li></ol><p>复制算法始终保持一块Survivor区域空着，循环使用三块区域。最大的好处是只有10%的内存闲置。</p><h2 id="标记整理算法-老年代垃圾回收算法"><a href="#标记整理算法-老年代垃圾回收算法" class="headerlink" title="标记整理算法-老年代垃圾回收算法"></a>标记整理算法-老年代垃圾回收算法</h2><p>老年代进行垃圾回收的算法</p><h3 id="进入老年代的时机"><a href="#进入老年代的时机" class="headerlink" title="进入老年代的时机"></a>进入老年代的时机</h3><ol><li>达到一定岁数进入老年代</li></ol><p>在默认设置下，当对象的年龄达到15岁的时候，会转移到老年代中。<br>可以通过<code>-XX:MaxTenuringThreshold</code>修改设置，默认15岁。</p><ol start="2"><li>动态年龄判断</li></ol><p>假如当前放对象的Survivor区域里，一批对象的中大小大于了这块Survivor区域内存大小的50%，那么此时，大于等于这批对象年龄的对象，可以直接进入老年代</p><blockquote><p>年龄1+年龄2+….+年龄n的多个年龄对象总和超过了Survivor区域的50%，此时就会把年龄n以上的对象都放入老年代。</p></blockquote><p>动态年龄判断的规则，会让一些新生代的对象也进入老年代。</p><ol start="3"><li>大对象直接进入老年代</li></ol><p><code>-XX:PretenureSizeThreshold</code>可以将他的值设置为字节数，比如1048576字节，就是1MB。<br>意思就是如果要创建一个大于这个大小的对象，比如一个超大的数组，或者别的东西，此时就会直接把这个大对象放到老年代去，不会经过新生代。</p><p>注意<br>1和2是将长期存活的对象，放入老年代。<br>3是避免大对象在内存间来回复制，耗费时间。</p><h3 id="特殊场景"><a href="#特殊场景" class="headerlink" title="特殊场景"></a>特殊场景</h3><ul><li>Minor GC后的对象太多无法放入Survivor区</li></ul><p>这个时候必须将这些对象直接转移到老年代去。</p><h3 id="老年代空间分配担保规则"><a href="#老年代空间分配担保规则" class="headerlink" title="老年代空间分配担保规则"></a>老年代空间分配担保规则</h3><p>在执行任何一次Minor GC之前，JVM会先检查一遍老年代可用的可用内存空间是否大于新生代所有对象的总大小。</p><ol><li>在极端情况下，经过一次Minor GC，所有对象都会存活下来，即所有新生代对象都可以进入老年代。</li><li>假如在Minor GC之前，发现老年代的可用内存已经小于新生代的全部对象大小了，就会检查<code>-XX:-HandlePromotionFailure</code>参数是否设置。</li><li>如果这个参数，就会判断老年代内存大小是否大于之前每一次Minor GC后进入老年代对象的平均大小。(如果之前每次Minor GC每次活下来10MB，那么此时老年代内存如果大于10MB，那么很可能就是够用的)</li></ol><ul><li>如果步骤3执行失败或者步骤2没有设置参数，那么就会直接出发一次<code>Full GC</code>对老年代进行垃圾回收</li><li>如果步骤2参数设置了并且步骤3判断成功了，那么可以进行尝试Minor GC<ul><li>Minor GC后，剩余的存活对象的大小，小于Survivor区域的大小，那么此时存活对象进入Survivor区域</li><li>Minor GC后，剩余的存活对象的大小，大于Survivor区域大小，但是小于老年代可用内存大小，那么直接进入老年代</li><li>Minor GC后，剩余的存活对象的大小，大于Survivor区域大小，也大于老年代可用内存大小，就会发生<code>Handle Promotion Failure</code>触发<code>Full GC</code></li></ul></li></ul><ol start="4"><li>如果Full GC之后，老年代还是没有足够的内存存放Minor GC过后的剩余存活对象，就会导致OOM内存溢出</li></ol><blockquote><p><code>-XX:-HandlePromotionFailure</code>参数在JDK1.6走后废弃，不需要进行设置。</p></blockquote><h3 id="回收流程-1"><a href="#回收流程-1" class="headerlink" title="回收流程"></a>回收流程</h3><ol><li>首先标记出老年代当前存活的对象，这些对象可能会比较分散</li><li>让这些存活对象在内存里面进行移动，把存活对象尽量都挪动到一边去，让存活对象紧凑的靠在一起，避免垃圾回收过后出现过多的内存碎片</li><li>一次性将垃圾对象回收掉</li></ol><p>注意：Full GC的速度至少比Minor GC慢10倍</p><h1 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>Serial和Serial Old垃圾回收器</li></ul><p>分别用来回收新生代和老年代的垃圾对象<br>工作原理就是单线程运行，垃圾回收的时候，会停止我们自己写的系统的其他工作线程，让系统卡死，然后等他们垃圾回收。现在一般Java后台系统几乎不用。</p><ul><li>ParNew和CMS垃圾回收器</li></ul><p>ParNew现在一般都是在新生代的垃圾回收器，CMS是用在老年代的垃圾回收器。他们都是多线程并发机制，性能更好，现在一般是线上生产系统的标配</p><ul><li>G1垃圾回收器</li></ul><p>统一收集新生代和老年代，采用了更加优秀的算法和设计机制</p><h2 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>新生代ParNew垃圾回收器主打的就是多线程垃回收机制。而Serial垃圾回收器主打的是单线程垃圾回收，他们都是回收新生代，除了单线程和多线程的区别，垃圾回收算法是完全一样的。</p><h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h3><ul><li>指定使用ParNew垃圾回收器</li></ul><p><code>-XX:+UseParNewGC</code></p><ul><li>线程数分配</li></ul><p>一般根据CPU核数决定，不需要手动调节。<br>手动指定使用<code>-XX:parallelGCThreads</code></p><ul><li>使用ParNew还是Serial</li></ul><p>一般根据服务类型（server&#x2F;client）决定。linux部署的server一般使用ParNew。但是windows本地客户端很多时候使用Serial，减少线程上下文切换的开销。</p><h2 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>CMS垃圾回收器负责回收老年代，采用标记-清理算法。由于<code>Stop the World</code>的存在，如果采用<code>标记-清理</code>算法执行，直接停止工作线程，会导致系统卡死时间过长。所以CMS垃圾回收器采用的是垃圾回收线程和系统工作线程尽量同时执行的模式进行处理。</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>CMS执行一次垃圾回收的过程分为4个阶段</p><ol><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发清理</li></ol><p><strong>第一个阶段：初始标记</strong><br>首先CMS要进行垃圾回收时，会先执行初始标记阶段，这个阶段让系统的工作线程全部停止，进入<code>Stop the World</code>状态。<br>初始标记，就是标记出所有GC Roots直接引用的对象。</p><p><strong>第二个阶段：并发标记</strong><br>这个阶段会让系统线程可以随意创建各种新对象，继续运行。<br>在运行期间可能会创建新的存活对象，也可能会让部分存活对象失去引用，变成垃圾对象。在这个过程中，垃圾回收线程会尽可能对已有的对象进行GC Roots追踪。</p><blockquote><p>GC Roots追踪：用可达性分析，一层层往上看对象是否存在GC Roots。</p></blockquote><p>这个阶段就是对老年代所有对象进行GC Roots追踪，耗时最久。他需要追踪所有对象是否从根源上被GC Roots引用，是和系统程序并发运行的，所以不会对系统运行造成影响。</p><p><strong>第三个阶段：重新标记</strong><br>由于第二个阶段是和系统并发运行，所以会有很多新对象创建，也会有老对象变成垃圾对象。<br>第三个阶段会让系统进入<code>Stop the World</code>，重新标记在第二阶段里重新创建的一些对象，还有一些已有对象可能失去引用变成垃圾的情况。<br>这个阶段速度也很快，就是对第二阶段中被系统程序运行变动过的少数对象进行标记，所以运行速度很快。</p><p><strong>第四个阶段：并发清理</strong><br>这个阶段就是让系统随意运行，然后清理掉之前标记为垃圾的对象。<br>这个阶段也比较耗时，但是与系统并行运行，所以不会对系统运行造成影响。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>占用CPU资源</li></ol><p>在垃圾回收的同时让系统工作，并且这两个步骤的垃圾回收耗时比较久，会比较耗费CPU资源。<br>CMS默认启动的垃圾回收线程数是(CPU核数+ 3) &#x2F; 4</p><ol start="2"><li>Concurrent Mode Failure</li></ol><p>在并发清理阶段，CMS只是回收之前标记好的垃圾，但是此时系统同时也在运行，也会产生新的垃圾。这种垃圾叫做<code>浮动垃圾</code>。<br>浮动垃圾只能在下一次Full GC的时候回收。为了保证垃圾回收期间的浮动垃圾正常产生，会进行空间预留。<br><code>-XX:CMSInitiatingOccupancyFaction</code>可以设置老年代占用多少比例的时候触发CMS垃圾回收，默认92%<br>如果CMS垃圾回收期间，系统进入老年代的对象大于可用空间，会发生<code>Concurrent Mode Failure</code>垃圾回收失败。此时会自动使用<code>Serial Old</code>垃圾回收期代替CMS，强行把系统程序<code>Stop the world</code>，重新进行长时间的GC Roots追踪，标记出来全部垃圾对象，不允许新的对象产生。然后一次性把垃圾对象都回收掉，最后再回复系统线程。</p><ol start="3"><li>内存碎片问题</li></ol><p>如果内存碎片太多，会导致后续对象进入老年代找不到可用的连续内存空间，然后出发Full GC。<br>CMS不是完全就仅仅使用<code>标记-清理</code>算法，太多的内存碎片会导致更加频繁的Full GC。<br><code>-XX:+UseCMSCompactAtFullConllection</code>默认打开，表示在Full GC之后，再次进行<code>Stop the World</code>，停止工作线程，然后进行碎片整理，把存活对象挪到一起，空出来大片连续内存空间，避免内存碎片。<br><code>-XX:CMSFullGCsBeforeCompaction</code>，表示执行多少次Full GC之后再执行一次内存碎片整理工作，默认是0，表示每次执行后都会进行内存整理。</p><h2 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h2><h3 id="ParNew-CMS的缺点"><a href="#ParNew-CMS的缺点" class="headerlink" title="ParNew+CMS的缺点"></a>ParNew+CMS的缺点</h3><p><code>Stop the World</code>无论是新生代还是老年代都会存在STW现象，对系统运行有一定影响。<br>垃圾回收器的优化就是朝着减少STW的目标进行。</p><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><ol><li>G1垃圾回收器可以同时回收新生代和老年代的对象。</li><li>把Java堆内存拆分为多个大小相等的Region。</li></ol><p>G1也存在新生代和老年代的概念，但是只是逻辑上的概念，也就是新生代包含某部分Region，老年代包含某些Region。</p><ol start="3"><li>G1可以让我们设置一个垃圾回收的预期停顿时间。</li></ol><p>G1必须追踪每个Region里面的回收价值。他需要搞清楚每个Region里的对象有多少是垃圾，如果对这个Region进行垃圾回收，需要耗费多长时间，可以回收多少垃圾。</p><p>G1可以做到让你设定垃圾回收对系统的影响，通过将内存拆分为大量小Region，以及追踪每个Region中可以回收的对象大小和预估时间，最后再垃圾回收的时候，尽量把垃圾回收对系统造成的影响控制在指定时间范围内，同时在有限的时间内回收尽可能多的垃圾对象。<br>在G1中没有所谓的新生代多少内存，老年代多少内存。Region的区域分配会不停变动，由G1自动控制。</p><h3 id="工作细节"><a href="#工作细节" class="headerlink" title="工作细节"></a>工作细节</h3><ol><li>设定G1对应内存大小</li></ol><p>默认情况下自动计算和设置，可以给整个堆内存的大小，然后JVM启动的时候发现是G1垃圾回收器(使用<code>-XX:UseG1GC</code>指定使用G1垃圾回收器)，此时自动用堆大小除以2048。<br>因为JVM最多可以有2048个Region。然后Region大小必须是2的倍数，比如1MB,2MB,4MB。</p><ul><li>–XX:G1HeapRegionSize</li></ul><p>手动指定Region大小</p><ol start="2"><li>G1是否存在原本的分区</li></ol><p>G1依旧存在原本的新生代和老年代分区。<br>新生代分区划分为Eden和Survivor。依旧使用原本的参数调整占比。只是Region是动态划分。</p><ul><li>–XX:G1NewSizePercent</li></ul><p>刚开始，默认新生代堆内存的占比是5%。可以使用这个设置新生代初始占比</p><ul><li>–XX:G1MaxNewSizePercent</li></ul><p>在运行中，JVM不停的给新生代增加更多的Region，但是最多新生代占比不会超过60%。可以通过这个设置新生代最大占比</p><ol start="3"><li><p>G1的新生代垃圾回收</p><ol><li>随着不听的在新生代的Eden对应的Region中放对象，JVM就会不停地给新生代加入更多的Region</li><li>当新生代达到堆内存的最大大小60%，其中Eden区占用80%即1000个Region，Survivor每个占用100个Region。并且Eden区占满对象，会触发新生代GC</li><li>G1使用复制算法进行垃圾回收，并且进入<code>Stop the World</code>状态</li><li>将Eden区对应Region存活对象放入S1对应Region区，然后回收掉Eden区对应的Region中的垃圾对象</li><li>由于G1可以设定GC停顿时间<code>-XX:MAXGCPauseMills</code>，因此在上面基础上，G1会保证GC停顿时间控制在指定范围内，尽可能多的回收掉一些对象</li></ol></li><li><p>对象进入老年代的时机</p></li></ol><p>与原先一致：</p><ul><li>对象在新生代躲过了很多次垃圾回收，达到一定年龄</li><li>动态年龄判定规则</li></ul><p>与原本区别</p><ul><li>大对象</li></ul><p>G1提供了专门的Region存放大对象，而不是让大对象进入老年代的Region中。<br>G1中，大对象的判定规则就是一个大对象超过了一个Region的50%，就会放入大对象专门的Region中<br>如果一个对象太大，会横跨多个Region存放。<br>大对象的回收，会在新生代、老年代回收的时候，顺带着大对象Region一起回收。</p><ol start="5"><li>新生代+老年代的混合垃圾回收</li></ol><p><code>-XX:InitiatingHeapOccupancyPercent</code>如果来年代占据了堆内存45%的Region的时候，会尝试触发一个新生代+老年代一起的混合回收阶段。默认值为45%</p><p><strong>初始标记</strong><br>首先触发初始标记，这个过程需要进入STW，仅仅进行标记。<br>先停止系统的运行，然后对各个线程栈内存中的局部变量代表的GC Roots，以及方法区中的静态变量代表的GC Roots，进行扫描，标记他们直接引用的那些对象。</p><p><strong>并发标记</strong><br>然后进入并发标记，这个阶段允许系统程序运行，同时进行GC Roots跟踪，从GC Roots开始追踪所有的存活对象。<br>JVM会对并发标记阶段对对象作出的一些修改记录起来，比如哪个对象被新建了，哪个对象失去了引用。</p><p><strong>最终标记</strong><br>然后进入最终标记，这个过程需要进入STW，系统禁止运行，但是会根据并发标记阶段的记录，去最终标记哪些存活对象，哪些是垃圾对象。</p><p><strong>混合回收</strong><br>最后进入混合回收，这个阶段会计算老年代中每个Region中存活对象数量，存活对象的占比，还有执行垃圾回收的预期性能和效率。<br>然后停止系统，去全力进行垃圾回收。为了保证停顿时间在控制范围内，会选择部分Region进行回收。</p><ol start="6"><li>回收失败的Full GC</li></ol><p>在进行Mixed回收的时候，无论年轻代还是老年代都基于复制算法进行回收，需要把各个Region的存活对象拷贝到别的Region中。<br>要是拷贝过程中，发现没有空闲的Region可以承载存活对象，就会触发一次失败。<br>失败后，会立刻切换为停止系统程序，然后采用单线程进行标记，清理和压缩整理，空闲出一批Region。</p><h3 id="G1垃圾回收器的一些参数"><a href="#G1垃圾回收器的一些参数" class="headerlink" title="G1垃圾回收器的一些参数"></a>G1垃圾回收器的一些参数</h3><ul><li>-XX:G!MixedGCCountTarget</li></ul><p>在一次混合回收中，最后一个阶段执行几次混合回收。默认8次。<br>意味着最后一个阶段，先停止系统运行，混合回收一些Region，再恢复系统运行，接着再禁止系统运行，混合回收一些Region，反复8次。<br>如果一次混合回收预期要回收160Region，那么每次混合回收会回收20个Region。<br>多次混合回收，为了尽可能让系统不要停顿时间过长。</p><ul><li>-XX:G1HeapWastePercent</li></ul><p>默认5%<br>在混合回收的时候，对Region回收都是基于复制算法进行的，都要把回收的Region里的存活对象放入其他Region，然后这个Region中的垃圾对象全部清理。这样子在回收过程中会不断空出来新的Region，一旦空闲的Region数量，打到堆内存的5%,就会停止混合回收。</p><ul><li>-XX:G1MixedGCLiveThresholdPercent</li></ul><p>默认值85%<br>确定要回收的Region的时候，必须是存活对象低于85%的Region才进行回收。<br>因为大对象的拷贝成本比较高。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM案例</title>
    <link href="/2022/05/01/JVM/JVM%E6%A1%88%E4%BE%8B/"/>
    <url>/2022/05/01/JVM/JVM%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="每日百万交易的支付系统"><a href="#每日百万交易的支付系统" class="headerlink" title="每日百万交易的支付系统"></a>每日百万交易的支付系统</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650352307495-849c668f-8a5e-492c-ab58-059818bfe0a6.png#clientId=u0981b04d-1a44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=318&id=uc2f9b2f3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=318&originWidth=625&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13955&status=done&style=none&taskId=u9f40696b-5162-45c5-8092-ce6d60ba638&title=&width=625" alt="image.png"></p><h2 id="瓶颈分析"><a href="#瓶颈分析" class="headerlink" title="瓶颈分析"></a>瓶颈分析</h2><p>每天JVM会频繁的创建和销毁100W个支付订单。</p><ol><li>估算每秒需要处理多少订单</li></ol><p>假设每天100W个字符订单，用户交易行为发生在高峰期。假设高峰期每天几个小时，用100w平均分配到高峰期里，估算TPS，大概为每秒100笔订单。<br>假设支付系统集群部署3个机器，所以每个机器实际每秒处理30笔订单。</p><ol start="2"><li>估算每个订单处理耗时</li></ol><p>按照上面的假设，需要TPS30来算，内存中每秒至少存在30个订单的对象。</p><ol start="3"><li>估算支付订单需要多大的内存空间</li></ol><p>可以按照订单对象存在多少变量，按变量占用字节数估算。实际还有其他东西会比估算的大。可以测试环境打印一个看看。</p><ol start="4"><li>每秒发起的支付请求对内存的占用</li></ol><p>30个支付订单，大概占用内存空间30*500字节&#x3D;15000字节，大概15kb</p><ol start="5"><li>支付系统运行情况下分析</li></ol><p>每秒30个支付请求，创建30个支付订单对象，kb级别的占用。<br>下一秒又产生30个支付订单对象。<br>等到新生代里面存在几十万个对象的时候，大概占用几百MB，新生代就满了，需要进行一次Minor GC，将新生代里面的垃圾对象回收掉，腾出空间。</p><ol start="6"><li>对完整系统内存占用预估</li></ol><p>除了核心流程的对象占用，实际上还会存在其他对象。根据系统压力，姑且按照之前计算结果的10-20倍估算。</p><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>一般线上业务系统的机器配置为2核4G，或者4核8G。</p><p>假如使用2核4G的机器，除去机器自身占用内存，大概剩下2G给JVM进程，按照方法区，栈内存，堆内存划分完，堆内存大概分配到1G的内存空间。<br>然后堆内存分为新生代和老年代，划分完也就几百MB。<br>按照上面的业务模型，大概几百秒触发一次Minor GC，太频繁了。</p><p>因此按照4核8G的机器分配。<br>-Xms和-Xmx设置为3G<br>-Xmn设置为2G</p><h1 id="日处理上亿数据的计算系统"><a href="#日处理上亿数据的计算系统" class="headerlink" title="日处理上亿数据的计算系统"></a>日处理上亿数据的计算系统</h1><h2 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650419797784-202769e8-1cf6-4c5c-8b8f-e7f3b47a6072.png#clientId=u08968c11-d05f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=228&id=u9d942e3f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=228&originWidth=262&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6664&status=done&style=none&taskId=u9eb1c519-8a1e-4d2c-8678-3073ceec095&title=&width=262" alt="image.png"><br>计算系统不同的通过sql和其他方式从数据存储中提取数据到内存中计算，生产负载大概是每分钟执行500次数据提取和计算任务。<br>在部署多台机器的情况下，每台机器每分钟大概负责执行100次数据提取和计算任务。<br>每次提取大概1W左右的数据到内存计算，平均每次计算大概需要10s左右。<br>每台机器的配置为4核8G，JVM内存占用4G，其中新生代和老年代分别占用1.5G内存。</p><h2 id="瓶颈分析-1"><a href="#瓶颈分析-1" class="headerlink" title="瓶颈分析"></a>瓶颈分析</h2><ol><li>系统多快会塞满新生代？</li></ol><p>每条数据大概20个字段，大概每条数据在1KB大小，那么每次计算任务超过1W条就对应了10MB大小。<br>新生代按默认8：1：1进行分配的话，Eden区1.2GB，每块Survivor区在100MB左右。<br>按上面的分析，每分钟100次计算差不多1分钟之后Eden区就满了。</p><ol start="2"><li>触发Minor GC的时候有多少对象进入老年代？</li></ol><p>假如新生代的Eden区1分钟之后就塞满对象，继续执行任务时触发Minor GC。<br>执行Minor GC前，会进行检查。首先看老年代的可用内存空间是否大于新生代全部对象。目前老年嗲1.5GB，新生代Eden区总共1.2GB，所以放得下。就会直接执行Minor GC。<br>此时每个计算任务1万条数据需要计算10秒，每分钟执行100个。假设还剩下20个计算任务，大概就是还剩下200MB对象存活。由于Survivor区只有100MB放不下200MB对象，因此会全部进入老年代。</p><ol start="3"><li>系统运行多久，老年代大概会填满？</li></ol><p>按照1分钟进行一次Minor GC，200MB对象进入老年代，老年代大小1.5GB。那么在7分钟左右，老年代剩余空间就剩下100MB。</p><ol start="4"><li>系统运行多久，老年代会触发1次Full GC？</li></ol><p>第8分钟结束的时候，触发Minor GC，生成200MB垃圾，发现老年代只有100MB空间，比之前每次Minor GC进入老年代的200MB都要小，就会直接触发一次Full GC。</p><h2 id="优化方案-1"><a href="#优化方案-1" class="headerlink" title="优化方案"></a>优化方案</h2><p>这个系统是数据计算系统，每次执行Minor GC的时候，会有一批数据没有计算完。按照现有的内存模型，瓶颈就是每次Survivor区域放不下存活对象。</p><p>优化后，新增新生代的内存比例，3GB左右的堆内存，其中2GB分配给新生代，1GB留给老年代。<br>这样Survivor区大概就是200MB，每次刚好放得下Minor GC过后存活的对象。<br>还可以调整<code>-XX:SurvivorRatio=8</code>这个参数，默认是Eden区比例为80%,在内存有限的情况下，可以降低Eden区比例，给Survivor更多内存空间。</p><h1 id="每日上亿请求量的电商系统"><a href="#每日上亿请求量的电商系统" class="headerlink" title="每日上亿请求量的电商系统"></a>每日上亿请求量的电商系统</h1><h2 id="背景-2"><a href="#背景-2" class="headerlink" title="背景"></a>背景</h2><p>如果请求量上亿的话，按一个用户平均20次访问计算，大概需要500w日活。<br>按照10%付费转化率计算，每天大概有50W人会下单，那么大概就是每天会有50W订单。<br>按照28法则，算订单集中在每天的4小时高峰内，平均下来每秒大概几十个订单。<br>但是在双十一等电商节的情况下，可能10分钟内就有50W订单，此时每秒接近1000个订单。<br>因此，按3台3核8G的机器计算，每秒每个机器抗300-400个请求没有压力。针对这种场景，需要对JVM有限的内存资源进行合理的分配和优化，包括对垃圾回收进行合理的优化，让JVM的GC次数尽可能减少，尽量避免Full GC，减少JVM的GC对高峰期系统的影响。</p><h2 id="年轻代垃圾回收参数优化"><a href="#年轻代垃圾回收参数优化" class="headerlink" title="年轻代垃圾回收参数优化"></a>年轻代垃圾回收参数优化</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ol><li>大促高峰期内存使用模型估算</li></ol><p>按照每秒处理300个下单请求估算。每个订单按照1KB估算，单300个订单会存在300kb的内存开销。然后算上订单对象连带的订单条目、库存、促销、优惠券等业务对象，一般单个对象开销放大10-20倍。<br>同时除了下单本身，还会存在订单查询等操作，再扩大10倍。<br>每秒钟大概300KB<em>20</em>10 &#x3D; 60MB的内存开销。过一秒之后，可以认为存在60mb的对象垃圾。</p><ol start="2"><li>内存如何分配</li></ol><p>如果是4核8G的机器，JVM内存一般给到4G，剩余的留给操作系统。<br>其中堆内存3G，新生代1.5G，老年代1.5G。<br>每个线程的Java虚拟机栈有1M，那么如果存在几百个线程大概会占用几百M<br>永久代给256M</p><ol start="3"><li>运行内存分析</li></ol><p>按照8:1:1分区，Eden区占据1.2GB，Survivor每个占用150MB。<br>订单系统每秒处理300个订单，占用新生代60MB空间。过1秒之后，60MB对象会变成垃圾，新生代1.5G内存空间大概需要20S占满。<br>20秒过后，进行Minor GC，进行前置检查比较老年代可用空间大小和历次Minor GC后进入老年代对象的平均大小。<br>Minor GC第一次运行，回收绝大部分新生代对象，除了还在请求处理中的订单，大部分订单处理完成，此时存活对象可能100MB左右，放入S1区域<br>又过了20S，Eden区满了之后，进行Minor GC，将Eden区和S1区的对象清除，剩余对象转入S2区域。</p><ol start="4"><li>Survivor空间判断</li></ol><p>Survivor空间大小毕竟是估算的，可能会存在上下波动。<br>根据动态年龄判断，如果每次都是超过50%并且是同龄对象，也会导致对象进入老年代。<br>需要调整新生代和老年代的大小。普通的业务系统，大部分对象都是短生命周期，不应该频繁进入老年代。也没必要给老年代维持过大的内存空间，首先让对象尽量留在新生代。<br>将新生代调整为2G,老年代1G。此时Eden区1.6G，每个Survivor200MB。</p><ol start="5"><li>新生代多少年龄进入老年代</li></ol><p>对于业务系统，使用默认就行了。业务系统一般进入老年代都是Spring管理的对象。<br>这个参数需要根据业务内存运行流程判断是否更改。</p><ol start="6"><li>多大的对象直接进入老年代</li></ol><p>一般设置1MB就行了，很少存在超过1MB的大对象。</p><h3 id="最终参数"><a href="#最终参数" class="headerlink" title="最终参数"></a>最终参数</h3><p>-Xms3072M -Xmx3072M -Xmn2048M -Xss1M  -XX:PermSize&#x3D;256M -XX:MaxPermSize&#x3D;256M  -XX:SurvivorRatio&#x3D;8 -XX:MaxTenuringThreshold&#x3D;5 -XX:PretenureSizeThreshold&#x3D;1M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</p><h2 id="老年代垃圾回收参数优化"><a href="#老年代垃圾回收参数优化" class="headerlink" title="老年代垃圾回收参数优化"></a>老年代垃圾回收参数优化</h2><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><ol><li>什么情况下会让一些对象进入老年代</li></ol><ul><li><code>-XX:MaxTenuringThreshold=5</code>这个参数会让几分钟内连续躲过5次Minor GC的对象迅速进入老年代。</li><li>大对象，比如一个大数组或者大List。这种情况案例不存在，忽略</li><li>Minor GC之后可能存活对象超过200MB，放不下Survivor区域，或者一下子占用Survivor超过50%.</li></ul><ol start="2"><li>多久时间触发一次Full GC</li></ol><p>按照上面分析，可能系统运行半小时-1小时之后，才有接近1GB的对象进入老年区，才可能满足触发Full GC的条件。<br>这个时间段已经超过了大促时间，并且日常使用比这个时间更久。</p><h3 id="最终参数-1"><a href="#最终参数-1" class="headerlink" title="最终参数"></a>最终参数</h3><p>-Xms3072M -Xmx3072M -Xmn2048M -Xss1M  -XX:PermSize&#x3D;256M -XX:MaxPermSize&#x3D;256M  -XX:SurvivorRatio&#x3D;8 -XX:MaxTenuringThreshold&#x3D;5 -XX:PretenureSizeThreshold&#x3D;1M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFaction&#x3D;92 -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction&#x3D;0</p><h1 id="百万级用户的在线教育平台"><a href="#百万级用户的在线教育平台" class="headerlink" title="百万级用户的在线教育平台"></a>百万级用户的在线教育平台</h1><h2 id="背景-3"><a href="#背景-3" class="headerlink" title="背景"></a>背景</h2><p>百万级用户的在想教育平台，主要目标用户群体是几岁到十几岁的小孩，注册用户几百万规模，日活用户规模在几十万。<br>上课的高峰阶段在每天晚上几个小时内，以及周末，核心业务大概就是视频课程中的交互。<br>预估晚上高峰3小时内，总共60W活跃用户，每个用户大概上一小时课程。那么每小时大概20W用户同时在线。20W活跃用户大概每分钟进行一次交互，一小时进行60次。一小时内总计1200W吃交互动作，平均每秒3000次。<br>3000次并发，按每台4核8G的机器抗600次请求计算，需要5台机器。<br> 每次互动请求，大概会连带创建对象，占用几KB，当成5KB预估，每秒600请求，会占用3MB内存。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM概述</title>
    <link href="/2022/05/01/JVM/JVM%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/05/01/JVM/JVM%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h1><h2 id="JVM运行流程"><a href="#JVM运行流程" class="headerlink" title="JVM运行流程"></a>JVM运行流程</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/12966419/1650332103295-2c92eb96-a9a4-44da-ac1d-a87222be02ef.jpeg"></p><ol><li>将.java文件编译为.class字节码文件</li><li>类加载器将.class字节码文件中的类加载到JVM中</li><li>JVM执行写好的类中的代码</li></ol><h2 id="类加载流程"><a href="#类加载流程" class="headerlink" title="类加载流程"></a>类加载流程</h2><ul><li>加载</li><li>验证</li><li>准备</li><li>解析</li><li>初始化</li><li>使用</li><li>卸载<h3 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h3>当代码里需要使用到这个类的时候，就需要加载</li></ul><h3 id="验证阶段"><a href="#验证阶段" class="headerlink" title="验证阶段"></a>验证阶段</h3><p>根据Java虚拟机规范，校验加载进来的.class文件的内容是否符合指定的归档</p><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p>给类分配内存空间，然后给里面的变量(static修饰的变量)分配内存空间，赋值默认的初始值</p><h3 id="解析阶段"><a href="#解析阶段" class="headerlink" title="解析阶段"></a>解析阶段</h3><p>将符号引用替换为直接引用的过程</p><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><p>变量实际初始化的过程。</p><p><strong>初始化的规则</strong></p><ul><li>如果初始化一个类的时候，发现他的父类还没有初始化，就必须先初始化他的父类</li></ul><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>类加载从出发到初始化需要依靠类加载器实现。</p><h2 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h2><ul><li>启动类加载器 Bootstrap ClassLoader</li></ul><p>负责加载在机器上安装的Java目录下的核心类。一旦JVM启动，那么首先会依托启动类加载器，去加载Java安装目录下的<code>lib</code>目录中的核心类库。</p><ul><li>扩展类加载器 Extension ClassLoader</li></ul><p>负责加载Java安装目录下<code>lib\ext</code>目录</p><ul><li>应用程序类加载器 Application ClassLoader</li></ul><p>负责加载<code>ClassPath</code>环境变量所指定的路径中的类，即自己写好的类</p><ul><li>自定义加载器</li></ul><p>可以自定义类加载器，去根据需求加载类</p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>JVM类加载器存在亲子层级结构，启动类加载器是最上层，扩展类加载器在第二层，应用程序类加载器在第三层，最后一程是自定义加载器。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650333345396-b7eac5b3-8670-4c8c-89ed-9fafaf9ac629.png#clientId=ucd5f05b7-da21-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=370&id=ue5a25008&margin=%5Bobject%20Object%5D&name=image.png&originHeight=370&originWidth=262&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8073&status=done&style=none&taskId=ude39a97f-e7f6-457b-a0a7-b232b8e9de0&title=&width=262" alt="image.png"><br>双亲委派机制<br>假设应用程序类加载器需要加载一个类，会首先委派给自己的父类加载器去加载，最终传导到顶层的类加载器去加载。如果父类加载器在自己负责的范围内，没有找到这个类，就会下推加载权利给自己的子类加载器。<br>这样可以避免多层级的加载器结构重复加载某些类。</p><h1 id="JVM内存区域划分"><a href="#JVM内存区域划分" class="headerlink" title="JVM内存区域划分"></a>JVM内存区域划分</h1><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>JDK1.8之前，代表JVM中的一块区域，存放从<code>.class</code>文件加载进来的类，还要一些类似常量池的东西在这个区域。</p><p>JDK1.8之后，改名叫做<code>Metaspace</code>元数据空间，还是主要存放自己写的各种类相关的信息。</p><p><strong>Metaspace</strong><br>如果在代码里使用了类似反射的方式，JVM会动态去生成一些类放入Metaspace区域</p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>每个线程有一个自己的程序计数器，记录当前这个线程目前执行到了哪一条字节码指令。</p><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>存放方法内部的局部变量的数据。调用执行任何方法时，会给方法创建栈帧，然后入栈。<br>每个线程有自己的Java虚拟机栈。如果线程执行了一个方法，就会对这个方法调用创建对应的一个栈帧。<br>栈帧里面有这个方法的局部变量表、操作数栈、动态链接、方法出口等东西。</p><h2 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h2><p>存放代码中创建的各种对象。</p><h2 id="其他内存区域"><a href="#其他内存区域" class="headerlink" title="其他内存区域"></a>其他内存区域</h2><p>堆外内存</p><ul><li>底层API使用native方法调用底层程序的时候，会有线程对应的本地方法栈，存放各种native方法的局部变量表之类的信息</li><li>通过NIO中的allocateDirect这种API，在Java堆外分配内存空间，通过Java虚拟机的DirectByteBuffer来引用和操作堆外内存空间</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650335156451-524eeb6d-e291-4933-8f7b-3ef1e7269b01.png#clientId=ucd5f05b7-da21-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=416&id=ud98afa72&margin=%5Bobject%20Object%5D&name=image.png&originHeight=416&originWidth=581&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21681&status=done&style=none&taskId=u47cde547-b04c-44e3-a5ff-9dbf62dcb82&title=&width=581" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Kafka</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ReplicaManager</span> <span class="hljs-variable">replicaManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplicaManager</span>();<br>        replicaManager.loadReplicasFromDisk();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReplicaManager</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> replicaCount;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadReplicasFromDisk</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">hasFinishedLoad</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">if</span>(isLocalDataCorrupt())&#123;&#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">isLocalDataCorrupt</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">isCorrupt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> isCorrupt;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>JVM进程启动，加载Kafka类到内存，然后有一个main线程，开始执行Kafka中的main方法</li><li>main线程关联了一个程序计数器，线程执行到哪一行指令，就会记录到哪一行</li><li>main线程在执行main()方法的时候，会在main线程关联的Java虚拟机栈里面，压入一个main()方法的栈帧。</li><li>mian线程发现需要创建一个ReplicaManager类的实例对象，此时会加载ReplicaManager类到内存中。</li><li>然后创建一个ReplicaManager的对象实例分配在Java堆内存中，并且在mian()方法的栈帧里面的局部变量表引入<code>replicaManager</code>变量，让他引用ReplicaManager对象在Java堆内存中的地址。</li><li>main线程开始执行ReplicaManager对象中的方法，依次把自己执行到的方法的栈帧压入自己的Java虚拟机栈</li><li>执行完方法后，再把方法对应的栈帧从Java虚拟机栈里出栈</li></ol><h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>只要启动一个JVM进程，就会自带一个垃圾回收的后台线程，会不断检测JVM堆内存中的各个实例对象。<br>如果这个实例对象没有任何一个方法的局部变量指向他，也没有任何一个类的静态变量，包括常量等地方指向他，那么垃圾回收线程就会把没人指向的实例对象给回收掉。从内存中清除，不在占用资源。</p><p>方法区的类回收的条件</p><ul><li>该类的所有实例对象已经从Java堆内存里被回收</li><li>加载这个类的ClassLoader已经被回收</li><li>对该类的Class对象没有任何应用</li></ul><h1 id="JVM内存划分"><a href="#JVM内存划分" class="headerlink" title="JVM内存划分"></a>JVM内存划分</h1><h2 id="分代模型"><a href="#分代模型" class="headerlink" title="分代模型"></a>分代模型</h2><ul><li>年轻代</li></ul><p>很快就要被回收的对象</p><ul><li>老年代</li></ul><p>长期存在的对象</p><ul><li>永久代</li></ul><p>方法区。存放一些类信息。</p><h2 id="垃圾回收流程"><a href="#垃圾回收流程" class="headerlink" title="垃圾回收流程"></a>垃圾回收流程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Kafka</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ReplicFetcher</span> <span class="hljs-variable">fetcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplicFetcher</span>();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        loadReplicasFromDisk();<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            loadReplicasFromRemote();<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadReplicasFromDisk</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ReplicaManager</span> <span class="hljs-variable">replicaManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplicaManager</span>();<br>        replicaManager.load();<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadReplicasFromRemote</span><span class="hljs-params">()</span>&#123;   <br>        fetcher.fetch();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>fetcher引用了ReplicFetcher对象，是长期需要驻留在内存中使用的。这个对象在年轻代停留后，最终会进入老年代。</p><ol><li>大部分的正常对象，都是优先在新生代分配内存。</li></ol><p>fetcher和replicaManager实例对象，都是分配在新生代里面。</p><ol start="2"><li>loadReplicasFromDisk()方法的栈帧出栈的时候，会导致没有任何局部变量应用replicaManager实例对象。当越来越多的这种对象快要占满新生代预分配的内存空间时，会触发一次新生代内存空间的垃圾回收。</li></ol><p>新生代内存的垃圾回收，称为<code>Minor GC</code>，也叫作<code>Young GC</code>，会尝试把新生代里面没有人引用的垃圾对象回收掉</p><ol start="3"><li>长期存活的对象会躲过多次垃圾回收。每垃圾回收一次，如果一个对象没有被回收掉，他的年龄就会增加1。</li></ol><p>fetcher由于是静态变量，所以长期持有，导致一直没有被回收掉。当他到达一定的年龄，会被转移到Java堆内存的老年代中。</p><ol start="4"><li>老年代的对象随着代码的运行，不再被人引用，达到一定条件也会进行垃圾回收。</li></ol><h2 id="内存相关参数"><a href="#内存相关参数" class="headerlink" title="内存相关参数"></a>内存相关参数</h2><ul><li>-Xms</li></ul><p>Java堆内存初始大小</p><ul><li>-Xmx</li></ul><p>Java堆内存的最大大小</p><ul><li>-Xmn</li></ul><p>Java堆内存中的新生代大小，根据扣除新生代，剩下的就是老年代内存大小</p><ul><li>-XX:PermiSize</li></ul><p>永久代初始大小</p><ul><li>-XX:MaxPermSize</li></ul><p>永久代最大大小</p><ul><li>-XX:MetaspaceSize</li></ul><p>元空间初始大小</p><ul><li>-XX:MaxMetaspaceSize</li></ul><p>元空间最大大小</p><ul><li>-Xss</li></ul><p>每个线程的栈内存大小</p><p>-Xms和-Xms，分别设置Java堆内存的刚开始的大小，以及允许扩张到的最大大小。<br>一般会设置成完全一样的大小，这个参数用来限定Java堆内存的总大小。</p><p>-Xmm，设置Java堆内存中的新生代大小。</p><p>-XX:PerSize和-XX:MaxPermSize，分别限定了永久代大小和永久代的最大大小。<br>通常也会设置成一样。一般设置几百MB够用。</p><p>-XX:MaxPermSize和-XX:MaxMetaspaceSize，在JDK1.8之后，永久代被元空间代替。</p><p>-Xss，限定了每个线程的栈内存大小。一般默认就是512KB-1MB。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12966419/1650351916701-e12a8853-b1d9-45cf-b7aa-5e26f0b7dc14.png#clientId=ucd5f05b7-da21-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=344&id=u57a1c73a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=344&originWidth=368&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9619&status=done&style=none&taskId=ucfe8876b-671b-4de2-9e56-60a6d3f7e9b&title=&width=368" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
